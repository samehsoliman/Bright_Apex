ALTER TABLE JOURNALS_ENTRIES_BALANCE ADD (DOCUMENT_MONTH VARCHAR2(25), DOCUMENT_YEAR VARCHAR2(25));

  

/*
UPDATE JOURNALS_ENTRIES_BALANCE
SET DOCUMENT_MONTH = TO_CHAR(DOCUMENT_DATE, 'MM-RRRR'),
    DOCUMENT_YEAR = TO_CHAR(DOCUMENT_YEAR,'RRRR');

COMMIT;
*/

CREATE OR REPLACE TRIGGER ACCOUNT_BALANCE_TRI
AFTER INSERT OR UPDATE OR DELETE ON JOURNALS_ENTRIES
FOR EACH ROW
DECLARE
CURSOR C1(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
  SELECT DOCUMENT_DATE, JOURNAL_TYPES_ID, BRANCH_ID, CONFIRMED, CANCELED, DOCUMENT_TYPES_ID, BASE_DOCUMENT_TYPES_ID
  FROM JOURNALS
  WHERE DOCUMENT_ID = V_DOCUMENT_ID
  AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
V_JOURNAL_TYPES_ID NUMBER;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;
BEGIN
  IF INSERTING THEN
      OPEN C1(:NEW.DOCUMENT_ID, :NEW.DEPARTMENT_ID);
      FETCH C1 INTO V_C1;
      CLOSE C1;

      IF :NEW.SETL_FOR IN (5,6,7,9,10) THEN
	V_SETL_FOR :='';
	V_SETL_REF :='';
      ELSE
	V_SETL_FOR :=:NEW.SETL_FOR;
	V_SETL_REF :=:NEW.SETL_REF;
      END IF;

      INSERT INTO JOURNALS_ENTRIES_BALANCE
		(
			DOCUMENT_ID            ,
			DEPARTMENT_ID          ,
			ARRANGMENT_NO          ,
			DOCUMENT_TYPES_ID      ,
			BASE_DOCUMENT_TYPES_ID,
			DOCUMENT_DATE          ,
			JOURNAL_TYPES_ID       ,
			BRANCH_ID              ,
			ACCOUNT_ID             ,
			CURRENCIES_ID          ,
			EXCHANGE_RATE          ,
			CR_DEBIT               ,
			CR_CREDIT              ,
			COST_CENTER_ID         ,
			ACTIVITY_ID            ,
			SETL_FOR		,
			SETL_REF		,
			CONFIRMED              ,
			CANCELED,
                        DOCUMENT_MONTH,
                        DOCUMENT_YEAR
		)
	VALUES
		(
			:NEW.DOCUMENT_ID            ,
			:NEW.DEPARTMENT_ID          ,
			:NEW.ARRANGMENT_NO          ,
			V_C1.DOCUMENT_TYPES_ID      ,
			V_C1.BASE_DOCUMENT_TYPES_ID,
			V_C1.DOCUMENT_DATE          ,
			V_C1.JOURNAL_TYPES_ID       ,
			V_C1.BRANCH_ID              ,
			:NEW.ACCOUNT_ID             ,
			:NEW.CURRENCIES_ID          ,
			:NEW.EXCHANGE_RATE          ,
			:NEW.CR_DEBIT               ,
			:NEW.CR_CREDIT              ,
			:NEW.COST_CENTER_ID         ,
			:NEW.ACTIVITY_ID            ,
			V_SETL_FOR			,
			V_SETL_REF			,
			V_C1.CONFIRMED              ,
			V_C1.CANCELED,
                        TO_CHAR(V_C1.DOCUMENT_DATE, 'MM-RRRR'),
                        TO_CHAR(V_C1.DOCUMENT_DATE,'RRRR')
		);

  ELSIF UPDATING THEN
--      IF (:OLD.ACCOUNT_ID <> :NEW.ACCOUNT_ID) OR (:OLD.CR_DEBIT <> :NEW.CR_DEBIT) OR (:OLD.CR_CREDIT <> :NEW.CR_CREDIT) OR (:OLD.EXCHANGE_RATE <> :NEW.EXCHANGE_RATE) OR (:OLD.CURRENCIES_ID <> :NEW.CURRENCIES_ID) OR (:OLD.COST_CENTER_ID <> :NEW.COST_CENTER_ID) OR (:OLD.ACTIVITY_ID <> :NEW.ACTIVITY_ID) THEN
      IF :NEW.SETL_FOR IN (5,6,7,9,10) THEN
	V_SETL_FOR :='';
	V_SETL_REF :='';
      ELSE
	V_SETL_FOR :=:NEW.SETL_FOR;
	V_SETL_REF :=:NEW.SETL_REF;
      END IF;

          UPDATE JOURNALS_ENTRIES_BALANCE
          SET ACCOUNT_ID = :NEW.ACCOUNT_ID,
              CURRENCIES_ID = :NEW.CURRENCIES_ID,
              EXCHANGE_RATE = :NEW.EXCHANGE_RATE,
              CR_DEBIT = :NEW.CR_DEBIT,
              CR_CREDIT = :NEW.CR_CREDIT,
              COST_CENTER_ID = :NEW.COST_CENTER_ID,
              ACTIVITY_ID = :NEW.ACTIVITY_ID,
	      SETL_FOR = V_SETL_FOR,
	      SETL_REF = V_SETL_REF
          WHERE DOCUMENT_ID = :NEW.DOCUMENT_ID
          AND DEPARTMENT_ID = :NEW.DEPARTMENT_ID
          AND ARRANGMENT_NO = :NEW.ARRANGMENT_NO;
--      END IF;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER ACCOUNT_BALANCE_JOURNAL_TRI
AFTER UPDATE ON JOURNALS
FOR EACH ROW
DECLARE
BEGIN
  IF (:OLD.DOCUMENT_DATE <> :NEW.DOCUMENT_DATE) OR (:OLD.DOCUMENT_TYPES_ID <> :NEW.DOCUMENT_TYPES_ID) OR (:OLD.BASE_DOCUMENT_TYPES_ID <> :NEW.BASE_DOCUMENT_TYPES_ID) OR (:OLD.JOURNAL_TYPES_ID <> :NEW.JOURNAL_TYPES_ID) OR (:OLD.CONFIRMED <> :NEW.CONFIRMED) OR (:OLD.CANCELED <> :NEW.CANCELED) THEN
      UPDATE JOURNALS_ENTRIES_BALANCE
      SET DOCUMENT_DATE = :NEW.DOCUMENT_DATE,
          DOCUMENT_TYPES_ID = :NEW.DOCUMENT_TYPES_ID,
          BASE_DOCUMENT_TYPES_ID = :NEW.BASE_DOCUMENT_TYPES_ID,
          JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID,
          CONFIRMED = :NEW.CONFIRMED,
          CANCELED = :NEW.CANCELED,
          DOCUMENT_MONTH =   TO_CHAR(:NEW.DOCUMENT_DATE, 'MM-RRRR'),
          DOCUMENT_YEAR = TO_CHAR(:NEW.DOCUMENT_DATE,'RRRR')
      WHERE DOCUMENT_ID = :NEW.DOCUMENT_ID
      AND DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
   END IF;
END;
/


CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_NEW_DB( V_BRANCH_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER,V_PREFIX VARCHAR2 DEFAULT NULL, V_SUFFIX VARCHAR2 DEFAULT NULL, V_SEQUENCE_LENGTH NUMBER DEFAULT NULL, V_DETAIL_ID NUMBER DEFAULT NULL, V_DATE DATE DEFAULT NULL, V_DOCUMENT_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT MAX(DOCUMENT_NO)
	FROM JOURNALS_NO_VIEW
	WHERE BRANCH_ID = V_BRANCH_ID
	AND JOURNAL_TYPES_ID = NVL(V_DETAIL_ID, JOURNAL_TYPES_ID)
	AND TO_CHAR(DOCUMENT_DATE,'MM-YYYY') = NVL(TO_CHAR(V_DATE,'MM-YYYY'), TO_CHAR(DOCUMENT_DATE,'MM-YYYY'))
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND NVL(DOCUMENT_ID,1) <> NVL(V_DOCUMENT_ID,-1);

V_MAX VARCHAR2(50);
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_MAX :='';

	OPEN C1(V_BRANCH_ID);
	FETCH C1 INTO V_MAX;
	CLOSE C1;

  V_NUMBER := NVL(SUBSTR(V_MAX, NVL(LENGTH(V_PREFIX), 0) + 1 , V_SEQUENCE_LENGTH) + 1,1);
  IF V_DATE IS NULL THEN
  		V_LAST_SEQUENCE := V_PREFIX || LPAD(V_NUMBER,V_SEQUENCE_LENGTH, '0') || V_SUFFIX;
  ELSE
  		V_LAST_SEQUENCE := V_PREFIX || LPAD(V_NUMBER,V_SEQUENCE_LENGTH, '0') || V_SUFFIX||'/'||TO_CHAR(V_DATE,'MM');
  END IF;
	RETURN(V_LAST_SEQUENCE);
END;
/

CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_DETAIL_ID NUMBER DEFAULT NULL) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOC_NO_SETUP_DEPT
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
CURSOR C2(V_BRANCH_ID NUMBER) IS
	SELECT MASTER_DETIAL_TYPE, AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOC_NO_SETUP_DEPT
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	FOR UPDATE;
V_C2 C2%ROWTYPE;
CURSOR C3(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOC_NO_SETUP_DEPT_DETAIL
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID;
V_C3 C3%ROWTYPE;
CURSOR C4(V_BRANCH_ID NUMBER) IS
	SELECT  AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOC_NO_SETUP_DEPT_DETAIL
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID
	FOR UPDATE;
V_C4 C4%ROWTYPE;
V_COUNT NUMBER;
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_COUNT :=0;
  OPEN C1(V_BRANCH_ID);
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT = 0 THEN
  		RETURN('ERROR');
  END IF;
  OPEN C2(V_BRANCH_ID);
  FETCH C2 INTO V_C2;
  CLOSE C2;
  IF V_C2.MASTER_DETIAL_TYPE = 2 THEN
		  OPEN C3(V_BRANCH_ID);
		  FETCH C3 INTO V_COUNT;
		  CLOSE C3;
		  IF V_COUNT = 0 THEN
		  		RETURN('ERROR');
		  END IF;

		  OPEN C4(V_BRANCH_ID);
		  FETCH C4 INTO V_C4;
		  CLOSE C4;
		  IF V_C4.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;

		  V_NUMBER := SUBSTR(V_C4.LAST_SEQUENCE, NVL(LENGTH(V_C4.PREFIX), 0) + 1 , V_C4.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C4.PREFIX || LPAD(V_NUMBER,V_C4.SEQUENCE_LENGTH, '0') || V_C4.SUFFIX;
		  UPDATE DOC_NO_SETUP_DEPT_DETAIL
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
			AND DETAIL_ID = V_DETAIL_ID;
			RETURN(V_LAST_SEQUENCE);
  ELSE
		  IF V_C2.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;
		  V_NUMBER := SUBSTR(V_C2.LAST_SEQUENCE, NVL(LENGTH(V_C2.PREFIX), 0) + 1 , V_C2.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C2.PREFIX || LPAD(V_NUMBER,V_C2.SEQUENCE_LENGTH, '0') || V_C2.SUFFIX;
		  UPDATE DOC_NO_SETUP_DEPT
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
			RETURN(V_LAST_SEQUENCE);
	END IF;
END;
/



CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_DB(V_BRANCH_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_DETAIL_ID NUMBER DEFAULT NULL, V_DATE DATE DEFAULT NULL, V_DOCUMENT_ID NUMBER DEFAULT NULL) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOCUMENT_NO_SETUP
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
CURSOR C2(V_BRANCH_ID NUMBER) IS
	SELECT MASTER_DETIAL_TYPE, AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOCUMENT_NO_SETUP
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	FOR UPDATE;
V_C2 C2%ROWTYPE;
CURSOR C3(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOCUMENT_NO_SETUP_DETAIL
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID;
V_C3 C3%ROWTYPE;
CURSOR C4(V_BRANCH_ID NUMBER) IS
	SELECT  AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOCUMENT_NO_SETUP_DETAIL
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID
	FOR UPDATE;
V_C4 C4%ROWTYPE;
CURSOR C5 IS
	SELECT YEARLY_MONTHLY_FLAG
	FROM GL_DOC_NO_SETUP;
V_C5 C5%ROWTYPE;


V_COUNT NUMBER;
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_COUNT :=0;
  OPEN C5;
  FETCH C5 INTO V_C5;
  CLOSE C5;

  OPEN C1(V_BRANCH_ID);
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT = 0 THEN
  		RETURN('ERROR');
  END IF;
  OPEN C2(V_BRANCH_ID);
  FETCH C2 INTO V_C2;
  CLOSE C2;
  IF V_C2.MASTER_DETIAL_TYPE = 2 THEN
		  OPEN C3(V_BRANCH_ID);
		  FETCH C3 INTO V_COUNT;
		  CLOSE C3;
		  IF V_COUNT = 0 THEN
		  		RETURN('ERROR');
		  END IF;

		  OPEN C4(V_BRANCH_ID);
		  FETCH C4 INTO V_C4;
		  CLOSE C4;
		  IF V_C4.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;
		  IF V_DOCUMENT_TYPES_ID = 28 AND GET_USER_PARAMETER(58, V_BRANCH_ID) = 2 THEN
		  		IF V_C5.YEARLY_MONTHLY_FLAG = 1 THEN
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID, V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C4.PREFIX,V_C4.SUFFIX,V_C4.SEQUENCE_LENGTH,V_DETAIL_ID, NULL,V_DOCUMENT_ID));
		  		ELSE
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID, V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C4.PREFIX,V_C4.SUFFIX,V_C4.SEQUENCE_LENGTH,V_DETAIL_ID, V_DATE,V_DOCUMENT_ID));
		  		END IF;
		  END IF;

		  V_NUMBER := SUBSTR(V_C4.LAST_SEQUENCE, NVL(LENGTH(V_C4.PREFIX), 0) + 1 , V_C4.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C4.PREFIX || LPAD(V_NUMBER,V_C4.SEQUENCE_LENGTH, '0') || V_C4.SUFFIX;
		  UPDATE DOCUMENT_NO_SETUP_DETAIL
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE BRANCH_ID = V_BRANCH_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
			AND DETAIL_ID = V_DETAIL_ID;
			RETURN(V_LAST_SEQUENCE);
  ELSE
		  IF V_C2.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;

		  IF V_DOCUMENT_TYPES_ID = 28 AND GET_USER_PARAMETER(58, V_BRANCH_ID) = 2 THEN
		  		IF V_C5.YEARLY_MONTHLY_FLAG = 1 THEN
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID,V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C2.PREFIX,V_C2.SUFFIX,V_C2.SEQUENCE_LENGTH,NULL, NULL,V_DOCUMENT_ID));
		  		ELSE
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID,V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C2.PREFIX,V_C2.SUFFIX,V_C2.SEQUENCE_LENGTH,NULL, V_DATE,V_DOCUMENT_ID));
		  		END IF;
		  END IF;

		  V_NUMBER := SUBSTR(V_C2.LAST_SEQUENCE, NVL(LENGTH(V_C2.PREFIX), 0) + 1 , V_C2.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C2.PREFIX || LPAD(V_NUMBER,V_C2.SEQUENCE_LENGTH, '0') || V_C2.SUFFIX;
		  UPDATE DOCUMENT_NO_SETUP
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE BRANCH_ID = V_BRANCH_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
			RETURN(V_LAST_SEQUENCE);
	END IF;
END;
/


CREATE SEQUENCE COST_CODES_SEQ;


/*==============================================================*/
/* Table: COST_CODES                                            */
/*==============================================================*/
create table COST_CODES  (
   COST_CODE_ID         NUMBER (15)                     not null,
   PARENT_COST_CODE_ID  NUMBER (15),
   BRANCH_ID            NUMBER (15)                     not null,
   USER_CODE            VARCHAR2 (25)                   not null,
   PRIMARY_NAME         VARCHAR2 (60)                   not null,
   SECONDARY_NAME       VARCHAR2 (60),
   MAIN_SUB_TYPE        NUMBER (15)                     not null,
   TREE_LEVEL           NUMBER (5)                      not null,
   ACTIVE               NUMBER (1)                      not null,
   CREATED_BY           VARCHAR2(25),
   CREATION_DATE        DATE,
   CREATION_MACHINE     VARCHAR2(25),
   UPDATED_BY           VARCHAR2(25),
   UPDATED_DATE         DATE,
   UPDATED_MACHINE      VARCHAR2(25),
   constraint PK_ACC_0070 primary key (COST_CODE_ID),
   constraint UK_ACC_0040 unique (USER_CODE, BRANCH_ID)
);

comment on table COST_CODES is
'Created By Sameh Noshi';

comment on column COST_CODES.MAIN_SUB_TYPE is
'1- MAIN
2- SUB';

alter table COST_CODES
   add constraint FK_ACC_0181 foreign key (PARENT_COST_CODE_ID)
      references COST_CODES (COST_CODE_ID);

alter table COST_CODES
   add constraint FK_ACC_0182 foreign key (BRANCH_ID)
      references BRANCHES (BRANCH_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD                                      */
/*==============================================================*/
create table COST_CENTERS_BUD  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   DOCUMENT_DATE        DATE                            not null,
   NOTES                VARCHAR2 (500),
   constraint PK_ACC_0073 primary key (COST_CENTER_ID, ARRANGMENT_NO)
);

alter table COST_CENTERS_BUD
   add constraint FK_ACC_0183 foreign key (COST_CENTER_ID)
      references COST_CENTERS (COST_CENTER_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD_COST                                 */
/*==============================================================*/
create table COST_CENTERS_BUD_COST  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   COST_CODE_ID         NUMBER (15)                     not null,
   constraint PK_ACC_0072 primary key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
);

alter table COST_CENTERS_BUD_COST
   add constraint FK_ACC_0184 foreign key (COST_CENTER_ID, ARRANGMENT_NO)
      references COST_CENTERS_BUD (COST_CENTER_ID, ARRANGMENT_NO)
      on delete cascade;

alter table COST_CENTERS_BUD_COST
   add constraint FK_ACC_0185 foreign key (COST_CODE_ID)
      references COST_CODES (COST_CODE_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD_COST_ITM                             */
/*==============================================================*/
create table COST_CENTERS_BUD_COST_ITM  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   COST_CODE_ID         NUMBER (15)                     not null,
   ITEMS_ID             NUMBER (15)                     not null,
   UNIT_QUANTITY        NUMBER (17,5)                  default 0 not null,
   UNIT_FACTOR          NUMBER (17,5)                  default 0 not null,
   UNIT_COST            NUMBER (17,5)                  default 0 not null,
   ACTUAL_VALUE         NUMBER (17,5)                  default 0,
   constraint PK_ACC_0071 primary key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID, ITEMS_ID)
);

alter table COST_CENTERS_BUD_COST_ITM
   add constraint FK_ACC_0186 foreign key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
      references COST_CENTERS_BUD_COST (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
      on delete cascade;

alter table COST_CENTERS_BUD_COST_ITM
   add constraint FK_ACC_0187 foreign key (ITEMS_ID)
      references ITEMS (ITEMS_ID);

/*==============================================================*/
/* View: COST_CODES_TRANS_VIEW                                  */
/*==============================================================*/
create or replace view COST_CODES_TRANS_VIEW as
SELECT DISTINCT COST_CODE_ID
FROM PUR_INVOICES_ITEMS
UNION
SELECT DISTINCT  COST_CODE_ID
FROM PUR_ORDERS_ITEMS
UNION
SELECT DISTINCT  COST_CODE_ID
FROM STOCK_OUT_DOCUMENTS_ITEMS;

comment on table COST_CODES_TRANS_VIEW is
'Created By Sameh Noshi';



CREATE OR REPLACE PACKAGE PCK_ACCOUNTS_OPEN_BALANCE IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE ACCOUNTS_OPEN_BALANCE_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE ACCOUNTS_OPEN_BALANCE_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE V_MAKE_ACCOUNT_TRANSACTION;
    PROCEDURE MAKE_ACCOUNT_TRANSACTION;
END;
/

CREATE OR REPLACE PACKAGE BODY PCK_ACCOUNTS_OPEN_BALANCE IS
CURSOR ACCOUNTS_OPEN_BALANCE_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            BASE_DOCUMENT_ID    ,
            BASE_DEPARTMENT_ID  ,
            FINANCIAL_YEARS_ID  ,
            FINANCIAL_PERIODS_ID,
            DESCRIPTION         ,
            TOTAL_ACTUAL_DEBIT  ,
            TOTAL_ACTUAL_CREDIT ,
            CONFIRMED           ,
            CANCELED            ,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_ACCOUNTS_OPEN_BALANCE_CUR ACCOUNTS_OPEN_BALANCE_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN ACCOUNTS_OPEN_BALANCE_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH ACCOUNTS_OPEN_BALANCE_CUR INTO V_ACCOUNTS_OPEN_BALANCE_CUR;
    CLOSE ACCOUNTS_OPEN_BALANCE_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE ACCOUNTS_OPEN_BALANCE_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
CURSOR C10 IS
    SELECT ACCOUNTS.SALARY_ACCOUNT, ACCOUNTS_OPEN_BALANCE_DTL_TREC.NOTES, ACCOUNTS_OPEN_BALANCE_DTL_TREC.CHECK_NO, ACCOUNTS_OPEN_BALANCE_DTL_TREC.BANK_ID, ACCOUNTS_OPEN_BALANCE_DTL_TREC.TREASURIES_ID, ACCOUNTS_OPEN_BALANCE_DTL_TREC.CHECK_STATUS,ACCOUNTS_OPEN_BALANCE_DTL_TREC.SETL_FOR,ACCOUNTS_OPEN_BALANCE_DTL_TREC.SETL_REF
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC, ACCOUNTS_OPEN_BALANCE_DTL, ACCOUNTS
    WHERE ACCOUNTS_OPEN_BALANCE_DTL_TREC.DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DOCUMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DEPARTMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.ARRANGMENT_NO = ACCOUNTS_OPEN_BALANCE_DTL.ARRANGMENT_NO
    AND ACCOUNTS_OPEN_BALANCE_DTL.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID;
V_C10 C10%ROWTYPE;

CURSOR C11(V_CHECK_NO VARCHAR2, V_BANK_ID NUMBER,V_SETL_FOR NUMBER ,V_SETL_REF NUMBER) IS
    SELECT
        CHECK_ID               ,
        BRANCH_ID              ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        CHECK_AMOUNT           ,
        CURRENCIES_ID          ,
        SETL_FOR               ,
        SETL_REF               ,
        ACCOUNT_ID             ,
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        DOCUMENT_TYPES_ID      ,
        PAYMENT_RECEIPT_FALG,
        CREATED_BY           ,
        CREATION_DATE         ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE        ,
        CONT_NO                ,
        ADVANCE_CHECK
    FROM CHECKS
    WHERE BANK_ID = V_BANK_ID
    AND CHECK_NO = V_CHECK_NO
    AND BRANCH_ID=V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID
    AND SETL_FOR=V_SETL_FOR
    AND SETL_REF=V_SETL_REF
    ;
V_C11 C11%ROWTYPE;

CURSOR C12 IS
    SELECT ACCOUNTS.SALARY_ACCOUNT, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.NOTES, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.CHECK_NO, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.BANK_ID, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.BANK_ACC_ID,ACCOUNTS_OPEN_BALANCE_DTL_BNKC.SETL_FOR,ACCOUNTS_OPEN_BALANCE_DTL_BNKC.SETL_REF
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC, ACCOUNTS_OPEN_BALANCE_DTL, ACCOUNTS
    WHERE ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DOCUMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DEPARTMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.ARRANGMENT_NO = ACCOUNTS_OPEN_BALANCE_DTL.ARRANGMENT_NO
    AND ACCOUNTS_OPEN_BALANCE_DTL.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID;
V_C12 C12%ROWTYPE;
V_CHECK_STATUS NUMBER;

V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN
    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID ,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.CONFIRMED) THEN

        V_MAKE_ACCOUNT_TRANSACTION;
        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,NULL);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE ACCOUNTS_OPEN_BALANCE
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM ACCOUNTS_OPEN_BALANCE
        WHERE DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND DOCUMENT_ID <>  V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        MAKE_ACCOUNT_TRANSACTION;


        OPEN C10;
        LOOP
                FETCH C10 INTO V_C10;
                EXIT WHEN C10%NOTFOUND;
                OPEN C11(V_C10.CHECK_NO, V_C10.BANK_ID,V_C10.SETL_FOR ,V_C10.SETL_REF);
                FETCH C11 INTO V_C11;
                CLOSE C11;

                PCK_GENERAL_LEDGER.MAKE_CHECK_TRANSACTION(V_C11.CHECK_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE,V_DOCUMENT_NO,V_C10.CHECK_STATUS, 3, V_C10.TREASURIES_ID, V_C10.NOTES, V_BRANCH_ID, V_USER_NAME, V_USER_COMPUTER);
        END LOOP;
        CLOSE C10;

        OPEN C12;
        LOOP
                FETCH C12 INTO V_C12;
                EXIT WHEN C12%NOTFOUND;
                OPEN C11(V_C12.CHECK_NO, V_C12.BANK_ID,V_C12.SETL_FOR ,V_C12.SETL_REF);
                FETCH C11 INTO V_C11;
                CLOSE C11;
                IF V_C12.SALARY_ACCOUNT = 9 THEN
                        V_CHECK_STATUS := 3;
                ELSIF V_C12.SALARY_ACCOUNT = 11 THEN
                        V_CHECK_STATUS := 1;
                ELSIF V_C12.SALARY_ACCOUNT = 12 THEN
                        V_CHECK_STATUS := 2;
                END IF;

                PCK_GENERAL_LEDGER.MAKE_CHECK_TRANSACTION(V_C11.CHECK_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE,V_DOCUMENT_NO,V_CHECK_STATUS, 11, V_C12.BANK_ACC_ID, V_C10.NOTES, V_BRANCH_ID, V_USER_NAME, V_USER_COMPUTER);
        END LOOP;
        CLOSE C12;

        UPDATE ACCOUNTS_OPEN_BALANCE
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;


    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE ACCOUNTS_OPEN_BALANCE_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID ,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.CONFIRMED) THEN
        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_BRANCH_ID, V_LANGUAGE_ID);
        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID);

        UPDATE ACCOUNTS_OPEN_BALANCE
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------


PROCEDURE V_MAKE_ACCOUNT_TRANSACTION IS
CURSOR C2 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        ARRANGMENT_NO                  ,
        ACCOUNT_ID                     ,
        CURRENCIES_ID                  ,
        EXCHANGE_RATE                  ,
        CR_DEBIT                       ,
        CR_CREDIT                      ,
        BANK_ID                        ,
        CHECK_NO                       ,
        CHECK_DATE                     ,
        COST_CENTER_ID                 ,
        DESCRIPTION                    ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        ACTIVITY_ID                    ,
        ACTUAL_DEBIT                   ,
        ACTUAL_CREDIT
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    ORDER BY ARRANGMENT_NO;
V_C2 C2%ROWTYPE;
CURSOR C3(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID            ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

CURSOR C4(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID            ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C4 C4%ROWTYPE;

CURSOR C5(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        LEGAL_PERSON_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C5 C5%ROWTYPE;

CURSOR C6(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        SUPPLIER_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C6 C6%ROWTYPE;

CURSOR C7(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CUSTOMER_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C7 C7%ROWTYPE;

CURSOR C8(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        TREASURIES_ID    ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C8 C8%ROWTYPE;

CURSOR C9(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        BANK_ACC_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C9 C9%ROWTYPE;

CURSOR C10(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TEN
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C10 C10%ROWTYPE;

CURSOR C11(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_OWN
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C11 C11%ROWTYPE;

V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_DOCUMENT_NO VARCHAR2(50);
V_ARRANGMENT_NO NUMBER;
V_COUNT NUMBER;
V_TOTAL_EMP NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
V_COUNT2 NUMBER :=0;
V_COUNT3 NUMBER :=0;
V_COUNT4 NUMBER :=0;
V_COUNT5 NUMBER :=0;
V_COUNT8 NUMBER :=0;
V_COUNT9 NUMBER :=0;
V_COUNT10 NUMBER :=0;
V_COUNT11 NUMBER :=0;
V_COUNT15 NUMBER:=0;
V_COUNT16 NUMBER:=0;
V_FINANCIAL_YEARS_ID NUMBER;
BEGIN

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


  V_ARRANGMENT_NO :=0;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            V_COUNT := 0;
            SELECT COUNT(1)
            INTO V_COUNT
            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT2 := 0;
            SELECT COUNT(1)
            INTO V_COUNT2
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT3 := 0;
            SELECT COUNT(1)
            INTO V_COUNT3
            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT4 := 0;
            SELECT COUNT(1)
            INTO V_COUNT4
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT5 := 0;
            SELECT COUNT(1)
            INTO V_COUNT5
            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT8 := 0;
            SELECT COUNT(1)
            INTO V_COUNT8
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT9 := 0;
            SELECT COUNT(1)
            INTO V_COUNT9
            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


             IF V_COUNT > 0 OR V_COUNT2 > 0 OR V_COUNT3 > 0 OR V_COUNT4 > 0 OR V_COUNT5 > 0 OR V_COUNT8 > 0 OR V_COUNT9 > 0  THEN
                    IF V_COUNT > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000166',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                    ELSIF V_COUNT2 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000141',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                    ELSIF V_COUNT3 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000165',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                    ELSIF V_COUNT4 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000242',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                    ELSIF V_COUNT5 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000243',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );

                            END IF;

                    ELSIF V_COUNT8 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000244',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                            OPEN C8(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C8 INTO V_C8;
                                    EXIT WHEN C8%NOTFOUND;

                                    V_COUNT10 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT10
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                    IF V_COUNT10 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C8.CR_DEBIT - V_C8.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000246',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                            END LOOP;
                            CLOSE C8;

                    ELSIF V_COUNT9 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000245',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C9(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C9 INTO V_C9;
                                    EXIT WHEN C9%NOTFOUND;

                                    V_COUNT11 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT11
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                    IF V_COUNT11 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C9.CR_DEBIT - V_C9.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000247',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                            END LOOP;
                            CLOSE C9;

------end new ------


                    END IF;
            ELSE
                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
            END IF;
    END LOOP;
    CLOSE C2;
END;

-------------------------------------------------

PROCEDURE MAKE_ACCOUNT_TRANSACTION IS
CURSOR C2 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        ARRANGMENT_NO                  ,
        ACCOUNT_ID                     ,
        CURRENCIES_ID                  ,
        EXCHANGE_RATE                  ,
        CR_DEBIT                       ,
        CR_CREDIT                      ,
        BANK_ID                        ,
        CHECK_NO                       ,
        CHECK_DATE                     ,
        COST_CENTER_ID                 ,
        DESCRIPTION                    ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        ACTIVITY_ID                    ,
        ACTUAL_DEBIT                   ,
        ACTUAL_CREDIT
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    ORDER BY ARRANGMENT_NO;
V_C2 C2%ROWTYPE;
CURSOR C3(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

CURSOR C4(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C4 C4%ROWTYPE;

CURSOR C5(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        LEGAL_PERSON_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION            ,
        CON_CONTRACT_ID
    FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C5 C5%ROWTYPE;

CURSOR C6(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        SUPPLIER_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C6 C6%ROWTYPE;

CURSOR C7(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CUSTOMER_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C7 C7%ROWTYPE;

CURSOR C8(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        TREASURIES_ID ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C8 C8%ROWTYPE;

CURSOR C9(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        BANK_ACC_ID ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C9 C9%ROWTYPE;

V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_DOCUMENT_NO VARCHAR2(50);
V_ARRANGMENT_NO NUMBER;
V_COUNT NUMBER;
V_TOTAL_EMP NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
V_COUNT2 NUMBER :=0;
V_COUNT3 NUMBER :=0;
V_COUNT4 NUMBER :=0;
V_COUNT5 NUMBER :=0;
V_COUNT8 NUMBER :=0;
V_COUNT9 NUMBER :=0;
V_COUNT10 NUMBER :=0;
V_COUNT11 NUMBER :=0;
V_COUNT15 NUMBER :=0;
V_COUNT16 NUMBER :=0;

CURSOR C20 IS
    SELECT DOCUMENT_NO
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;
V_C20 C20%ROWTYPE;

BEGIN
  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;

    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;



    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,28,V_FINANCIAL_YEARS_ID,0,NULL,NULL);

    IF V_DOCUMENT_NO = 'ERROR' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000099',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    ELSIF V_DOCUMENT_NO = 'USER' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000098',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    OPEN C20;
    FETCH C20 INTO V_C20;
    CLOSE C20;


  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE, 0 , V_FINANCIAL_YEARS_ID, V_BRANCH_ID);
  INSERT INTO JOURNALS
            (   DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                BASE_DOCUMENT_TYPES_ID ,
                BASE_DOCUMENT_NO             ,
                JOURNAL_TYPES_ID             ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL                 ,
                COMPUTER_SERIAL_FIRST                 ,
                COMPUTER_SERIAL_LAST                 ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (   V_TRANSACTIONS_ID                  ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID          ,
                28                                              ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID                     ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID             ,
                V_C20.DOCUMENT_NO,
                0                                                        ,
                V_DOCUMENT_NO,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE          ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID              ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.FINANCIAL_YEARS_ID     ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.FINANCIAL_PERIODS_ID         ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DESCRIPTION            ,
                0     ,
                0    ,
                1                                          ,
                2                                       ,
                V_COMPUTER_SERIAL                 ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
  V_ARRANGMENT_NO :=0;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            V_COUNT := 0;
            SELECT COUNT(1)
            INTO V_COUNT
            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT2 := 0;
            SELECT COUNT(1)
            INTO V_COUNT2
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT3 := 0;
            SELECT COUNT(1)
            INTO V_COUNT3
            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT4 := 0;
            SELECT COUNT(1)
            INTO V_COUNT4
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT5 := 0;
            SELECT COUNT(1)
            INTO V_COUNT5
            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT15 := 0;
            SELECT COUNT(1)
            INTO V_COUNT15
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TEN
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT16 := 0;
            SELECT COUNT(1)
            INTO V_COUNT16
            FROM ACCOUNTS_OPEN_BALANCE_DTL_OWN
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT8 := 0;
            SELECT COUNT(1)
            INTO V_COUNT8
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT9 := 0;
            SELECT COUNT(1)
            INTO V_COUNT9
            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            IF V_COUNT > 0 OR V_COUNT2 > 0 OR V_COUNT3 > 0 OR V_COUNT4 > 0 OR V_COUNT5 > 0 OR V_COUNT8 > 0 OR V_COUNT9 > 0  OR V_COUNT15 > 0 OR V_COUNT16 > 0 THEN
                    IF V_COUNT > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000166',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );

                            END IF;


                            OPEN C3(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C3 INTO V_C3;
                                    EXIT WHEN C3%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C3.CR_DEBIT               ,
                                                V_C3.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                4,
                                                V_C3.EMPLOYEE_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C3;
                    ELSIF V_COUNT2 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000141',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C4(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C4 INTO V_C4;
                                    EXIT WHEN C4%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C4.CR_DEBIT               ,
                                                V_C4.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                4,
                                                V_C4.EMPLOYEE_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C4;
                    ELSIF V_COUNT3 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000165',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C5(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C5 INTO V_C5;
                                    EXIT WHEN C5%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                CON_CONTRACT_ID,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C5.CR_DEBIT               ,
                                                V_C5.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                8,
                                                V_C5.LEGAL_PERSON_ID,
                                                V_C5.CON_CONTRACT_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C5;

                    ELSIF V_COUNT4 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000242',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C6(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C6 INTO V_C6;
                                    EXIT WHEN C6%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C6.CR_DEBIT               ,
                                                V_C6.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                2,
                                                V_C6.SUPPLIER_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C6;


                    ELSIF V_COUNT5 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000243',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C7(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C7 INTO V_C7;
                                    EXIT WHEN C7%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C7.CR_DEBIT               ,
                                                V_C7.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                1,
                                                V_C7.CUSTOMER_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C7;
------new ------

                    ELSIF V_COUNT8 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000244',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                            OPEN C8(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C8 INTO V_C8;
                                    EXIT WHEN C8%NOTFOUND;

                                    V_COUNT10 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT10
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                    IF V_COUNT10 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C8.CR_DEBIT - V_C8.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000246',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C8.CR_DEBIT               ,
                                                V_C8.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                3,
                                                V_C8.TREASURIES_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C8;

                    ELSIF V_COUNT9 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000245',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C9(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C9 INTO V_C9;
                                    EXIT WHEN C9%NOTFOUND;

                                    V_COUNT11 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT11
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                    IF V_COUNT11 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C9.CR_DEBIT - V_C9.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000247',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C9.CR_DEBIT               ,
                                                V_C9.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                11,
                                                V_C9.BANK_ACC_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C9;

------end new ------


                    END IF;
            ELSE
                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                    INSERT INTO JOURNALS_ENTRIES
                            (    DOCUMENT_ID            ,
                                DEPARTMENT_ID          ,
                                ARRANGMENT_NO          ,
                                ACCOUNT_ID             ,
                                CURRENCIES_ID          ,
                                EXCHANGE_RATE          ,
                                CR_DEBIT               ,
                                CR_CREDIT              ,
                                BANK_ID                ,
                                CHECK_NO               ,
                                CHECK_DATE             ,
                                COST_CENTER_ID         ,
                                ACTIVITY_ID,
                                DESCRIPTION            ,
                                CREATED_BY             ,
                                CREATION_DATE          ,
                                CREATION_MACHINE             ,
                                UPDATED_BY             ,
                                UPDATED_DATE           ,
                                UPDATED_MACHINE
                          )
                  VALUES
                            (    V_TRANSACTIONS_ID           ,
                                V_C2.DEPARTMENT_ID          ,
                                V_ARRANGMENT_NO          ,
                                V_C2.ACCOUNT_ID             ,
                                V_C2.CURRENCIES_ID          ,
                                V_C2.EXCHANGE_RATE          ,
                                V_C2.CR_DEBIT               ,
                                V_C2.CR_CREDIT              ,
                                V_C2.BANK_ID                ,
                                V_C2.CHECK_NO               ,
                                V_C2.CHECK_DATE             ,
                                V_C2.COST_CENTER_ID         ,
                                V_C2.ACTIVITY_ID,
                                V_C2.DESCRIPTION            ,
                                V_USER_NAME                        ,
                                V_SYSDATE                                        ,
                                V_USER_COMPUTER                ,
                                NULL                                                ,
                                NULL                                                ,
                                NULL
                          );
            END IF;
    END LOOP;
    CLOSE C2;
END;




END;
/

CREATE OR REPLACE PACKAGE PCK_CLOSING_FINANCIAL_YEARS IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CLOSING_FINANCIAL_YEARS_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CLOSING_FINANCIAL_YEARS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CHECK_DOCUMENTS;
    PROCEDURE MAKE_PROFIT_AND_LOSE;
    PROCEDURE MAKE_NEW_OPEN_BALANCE;
    PROCEDURE CLOSE_FINANCIAL_YEAR;
    PROCEDURE CLOSE_FINANCIAL_YEAR_C;
END;
/


CREATE OR REPLACE PACKAGE BODY PCK_CLOSING_FINANCIAL_YEARS IS
CURSOR CLOSING_FINANCIAL_YEARS_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            FINANCIAL_YEARS_ID,
            NEW_FINANCIAL_YEARS_ID,
            CONFIRMED           ,
            CANCELED            ,
            DESCRIPTION,
            ACCOUNT_ID,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM CLOSING_FINANCIAL_YEARS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_CLOSING_FINANCIAL_YEARS_CUR CLOSING_FINANCIAL_YEARS_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN CLOSING_FINANCIAL_YEARS_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH CLOSING_FINANCIAL_YEARS_CUR INTO V_CLOSING_FINANCIAL_YEARS_CUR;
    CLOSE CLOSING_FINANCIAL_YEARS_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE CLOSING_FINANCIAL_YEARS_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN



    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);
/*
    IF PCK_BRIGHT.ABLE_TO_CONFIRM('ACC_F_009','BRIGHT')= FALSE THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000045',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;
*/


    IF GET_DB_CONFIRM_VALUE(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID ,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_CLOSING_FINANCIAL_YEARS_CUR.CONFIRMED) THEN

        CHECK_DOCUMENTS;


        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID,NULL);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE CLOSING_FINANCIAL_YEARS
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM CLOSING_FINANCIAL_YEARS
        WHERE DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND DOCUMENT_ID <>  V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        MAKE_PROFIT_AND_LOSE;
        MAKE_NEW_OPEN_BALANCE;
        CLOSE_FINANCIAL_YEAR;

        UPDATE CLOSING_FINANCIAL_YEARS
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;


    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE CLOSING_FINANCIAL_YEARS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID ,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_CLOSING_FINANCIAL_YEARS_CUR.CONFIRMED) THEN

        DELETE FROM ACCOUNTS_OPEN_BALANCE_DTL
        WHERE (DOCUMENT_ID, DEPARTMENT_ID) IN
                            (    SELECT  DOCUMENT_ID, DEPARTMENT_ID
                                FROM ACCOUNTS_OPEN_BALANCE
                                WHERE BASE_DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
                                AND BASE_DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID);

        DELETE FROM ACCOUNTS_OPEN_BALANCE
        WHERE BASE_DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND BASE_DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;


        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID, V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID, V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_BRANCH_ID, V_LANGUAGE_ID);

        CLOSE_FINANCIAL_YEAR_C;

        UPDATE CLOSING_FINANCIAL_YEARS
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------




PROCEDURE CHECK_DOCUMENTS IS
CURSOR C1 IS
    SELECT START_DATE, END_DATE
    FROM FINANCIAL_YEARS
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
V_C1 C1%ROWTYPE;
V_COUNT NUMBER;
CURSOR CUR_JOURNALS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM JOURNALS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_JOURNALS CUR_JOURNALS%ROWTYPE;

CURSOR CUR_ACCOUNTS_OPEN_BALANCE(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_ACCOUNTS_OPEN_BALANCE CUR_ACCOUNTS_OPEN_BALANCE%ROWTYPE;

CURSOR CUR_SAL_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_INVOICES CUR_SAL_INVOICES%ROWTYPE;

CURSOR CUR_SAL_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_RETURNES CUR_SAL_RETURNES%ROWTYPE;

CURSOR CUR_SAL_SERVICES_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_SERVICES_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_SERVICES_INVOICES CUR_SAL_SERVICES_INVOICES%ROWTYPE;

CURSOR CUR_SAL_SERVICES_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_SERVICES_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_SERVICES_RETURNES CUR_SAL_SERVICES_RETURNES%ROWTYPE;

CURSOR CUR_PUR_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PUR_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PUR_INVOICES CUR_PUR_INVOICES%ROWTYPE;

CURSOR CUR_PUR_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PUR_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PUR_RETURNES CUR_PUR_RETURNES%ROWTYPE;

CURSOR CUR_STOCK_IN_DOCUMENTS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCK_IN_DOCUMENTS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCK_IN_DOCUMENTS CUR_STOCK_IN_DOCUMENTS%ROWTYPE;

CURSOR CUR_STOCK_OUT_DOCUMENTS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCK_OUT_DOCUMENTS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCK_OUT_DOCUMENTS CUR_STOCK_OUT_DOCUMENTS%ROWTYPE;

CURSOR CUR_STORE_TRANSFERS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORE_TRANSFERS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORE_TRANSFERS CUR_STORE_TRANSFERS%ROWTYPE;

CURSOR CUR_STORES_DISPOSE(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORES_DISPOSE
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORES_DISPOSE CUR_STORES_DISPOSE%ROWTYPE;

CURSOR CUR_STOCKTAKING(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCKTAKING
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCKTAKING CUR_STOCKTAKING%ROWTYPE;

CURSOR CUR_STORES_ASSEMBLY(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORES_ASSEMBLY
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORES_ASSEMBLY CUR_STORES_ASSEMBLY%ROWTYPE;

CURSOR CUR_PAYMENT_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAYMENT_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAYMENT_VOUCHER CUR_PAYMENT_VOUCHER%ROWTYPE;

CURSOR CUR_RECEIVE_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM RECEIVE_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_RECEIVE_VOUCHER CUR_RECEIVE_VOUCHER%ROWTYPE;



CURSOR CUR_RECEIPT_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM RECEIPT_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_RECEIPT_VOUCHER CUR_RECEIPT_VOUCHER%ROWTYPE;



CURSOR CUR_PAYMENTS_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAYMENTS_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAYMENTS_VOUCHER CUR_PAYMENTS_VOUCHER%ROWTYPE;

CURSOR CUR_PAY_CHECK_COLLECTION(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAY_CHECK_COLLECTION
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAY_CHECK_COLLECTION CUR_PAY_CHECK_COLLECTION%ROWTYPE;


CURSOR CUR_PAY_CHECK_RETURN(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAY_CHECK_RETURN
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAY_CHECK_RETURN CUR_PAY_CHECK_RETURN%ROWTYPE;

CURSOR CUR_REC_CHECK_DEPOSIT(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_DEPOSIT
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_DEPOSIT CUR_REC_CHECK_DEPOSIT%ROWTYPE;

CURSOR CUR_REC_CHECK_COLLECTION(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_COLLECTION
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_COLLECTION CUR_REC_CHECK_COLLECTION%ROWTYPE;

CURSOR CUR_REC_CHECK_RETURN(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_RETURN
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_RETURN CUR_REC_CHECK_RETURN%ROWTYPE;

ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    V_COUNT := 0;
    OPEN CUR_JOURNALS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_JOURNALS INTO V_COUNT;
    CLOSE CUR_JOURNALS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(28, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


    V_COUNT := 0;
    OPEN CUR_ACCOUNTS_OPEN_BALANCE(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_ACCOUNTS_OPEN_BALANCE INTO V_COUNT;
    CLOSE CUR_ACCOUNTS_OPEN_BALANCE;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(27, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    ------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_SAL_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_INVOICES INTO V_COUNT;
    CLOSE CUR_SAL_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(1, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_RETURNES INTO V_COUNT;
    CLOSE CUR_SAL_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(6, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_SERVICES_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_SERVICES_INVOICES INTO V_COUNT;
    CLOSE CUR_SAL_SERVICES_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(15, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_SERVICES_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_SERVICES_RETURNES INTO V_COUNT;
    CLOSE CUR_SAL_SERVICES_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(16, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
  ----------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_PUR_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PUR_INVOICES INTO V_COUNT;
    CLOSE CUR_PUR_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(19, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PUR_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PUR_RETURNES INTO V_COUNT;
    CLOSE CUR_PUR_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(7, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    -----------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_STOCK_IN_DOCUMENTS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCK_IN_DOCUMENTS INTO V_COUNT;
    CLOSE CUR_STOCK_IN_DOCUMENTS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(23, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STOCK_OUT_DOCUMENTS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCK_OUT_DOCUMENTS INTO V_COUNT;
    CLOSE CUR_STOCK_OUT_DOCUMENTS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(24, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORE_TRANSFERS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORE_TRANSFERS INTO V_COUNT;
    CLOSE CUR_STORE_TRANSFERS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(3, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORES_DISPOSE(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORES_DISPOSE INTO V_COUNT;
    CLOSE CUR_STORES_DISPOSE;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(18, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STOCKTAKING(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCKTAKING INTO V_COUNT;
    CLOSE CUR_STOCKTAKING;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(5, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORES_ASSEMBLY(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORES_ASSEMBLY INTO V_COUNT;
    CLOSE CUR_STORES_ASSEMBLY;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(8, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    ---------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_PAYMENT_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAYMENT_VOUCHER INTO V_COUNT;
    CLOSE CUR_PAYMENT_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(30, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_RECEIVE_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_RECEIVE_VOUCHER INTO V_COUNT;
    CLOSE CUR_RECEIVE_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(31, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_RECEIPT_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_RECEIPT_VOUCHER INTO V_COUNT;
    CLOSE CUR_RECEIPT_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(31, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    V_COUNT := 0;
    OPEN CUR_PAYMENTS_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAYMENTS_VOUCHER INTO V_COUNT;
    CLOSE CUR_PAYMENTS_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(30, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PAY_CHECK_COLLECTION(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAY_CHECK_COLLECTION INTO V_COUNT;
    CLOSE CUR_PAY_CHECK_COLLECTION;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(204, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PAY_CHECK_RETURN(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAY_CHECK_RETURN INTO V_COUNT;
    CLOSE CUR_PAY_CHECK_RETURN;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(205, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    V_COUNT := 0;
    OPEN CUR_REC_CHECK_DEPOSIT(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_DEPOSIT INTO V_COUNT;
    CLOSE CUR_REC_CHECK_DEPOSIT;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(206, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_REC_CHECK_COLLECTION(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_COLLECTION INTO V_COUNT;
    CLOSE CUR_REC_CHECK_COLLECTION;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(207, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_REC_CHECK_RETURN(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_RETURN INTO V_COUNT;
    CLOSE CUR_REC_CHECK_RETURN;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(208, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


END;


----------------------------------------------------

PROCEDURE MAKE_PROFIT_AND_LOSE IS
CURSOR C1 IS
    SELECT ACCOUNTS.ACCOUNT_ID,ACCOUNTS.USER_CODE,JOURNAL_JOURNAL_ENTRY_VIEW.COST_CENTER_ID, JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID, JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT) CR_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT) CR_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW , ACCOUNTS
    WHERE JOURNAL_JOURNAL_ENTRY_VIEW.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID
    AND ACCOUNTS.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_TYPE IN (3,4)
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CONFIRMED = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CANCELED <> 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    GROUP BY ACCOUNTS.ACCOUNT_ID,ACCOUNTS.USER_CODE,JOURNAL_JOURNAL_ENTRY_VIEW.COST_CENTER_ID, JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID, JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE
    ORDER BY ACCOUNTS.USER_CODE;

V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        FINANCIAL_YEARS_ID     ,
        BRANCH_ID              ,
        USER_CODE              ,
        START_DATE             ,
        END_DATE               ,
        CLOSING_FLAG           ,
        CLOSING_DATE           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM FINANCIAL_YEARS
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
V_C2 C2%ROWTYPE;
CURSOR C3 IS
    SELECT
        FINANCIAL_PERIODS_ID           ,
        FINANCIAL_YEARS_ID             ,
        BRANCH_ID                      ,
        USER_CODE                      ,
        START_DATE                     ,
        END_DATE                       ,
        CLOSING_FLAG                   ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE
    FROM FINANCIAL_PERIODS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    ORDER BY START_DATE DESC;
V_C3 C3%ROWTYPE;

V_COUNT NUMBER;
V_SYSDATE DATE;
V_TRANSACTIONS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(50);
ALERT_ID NUMBER;
I NUMBER;
V_TOTAL NUMBER;
V_TOTAL_ACTUAL_DEBIT NUMBER;
V_TOTAL_ACTUAL_CREDIT NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
BEGIN
    SELECT SYSDATE
    INTO V_SYSDATE
    FROM DUAL;

    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,28,V_FINANCIAL_YEARS_ID,-1,NULL,NULL);

    IF V_DOCUMENT_NO = 'ERROR' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000099',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    ELSIF V_DOCUMENT_NO = 'USER' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000098',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;



    OPEN C3;
    FETCH C3 INTO V_C3;
    CLOSE C3;


  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE, -1 , V_FINANCIAL_YEARS_ID, V_BRANCH_ID);
  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                BASE_DOCUMENT_TYPES_ID ,
                BASE_DOCUMENT_NO             ,
                JOURNAL_TYPES_ID             ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL                 ,
                COMPUTER_SERIAL_FIRST                 ,
                COMPUTER_SERIAL_LAST                 ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID          ,
                28                                              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID                     ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID             ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO,
                -1                                                    ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO,
                V_C3.END_DATE          ,
                V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID     ,
                V_C3.FINANCIAL_PERIODS_ID                                                 ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION            ,
                0,
                0,
                1                                          ,
                2                                       ,
                V_COMPUTER_SERIAL                 ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
    OPEN C1;
    I:=0;
    V_TOTAL := 0;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;
            I:=I+1;

            V_TOTAL := V_TOTAL + ((NVL(V_C1.CR_DEBIT, 0) - NVL(V_C1.CR_CREDIT, 0)) * V_C1.EXCHANGE_RATE);
            IF V_C1.CR_DEBIT > V_C1.CR_CREDIT THEN
                    V_C1.CR_DEBIT := V_C1.CR_DEBIT - V_C1.CR_CREDIT;
                    V_C1.CR_CREDIT :=0;
            ELSE
                    V_C1.CR_CREDIT := V_C1.CR_CREDIT - V_C1.CR_DEBIT;
                    V_C1.CR_DEBIT :=0;
            END IF;
            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID          ,
                        I          ,
                        V_C1.ACCOUNT_ID             ,
                        V_C1.CURRENCIES_ID          ,
                        V_C1.EXCHANGE_RATE          ,
                        V_C1.CR_CREDIT              ,
                        V_C1.CR_DEBIT               ,
                        NULL                                  ,
                        NULL                                ,
                        NULL                        ,
                        NULL                                ,
                        NULL                                  ,
                        V_C1.COST_CENTER_ID         ,
                        V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION            ,
                        V_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C1;
    I:=I+1;

    OPEN C2;
    FETCH C2 INTO V_C2;
    CLOSE C2;

    IF V_TOTAL > 0 THEN
            V_TOTAL_ACTUAL_DEBIT := V_TOTAL;
            V_TOTAL_ACTUAL_CREDIT :=0;
    ELSE
            V_TOTAL_ACTUAL_DEBIT := 0;
            V_TOTAL_ACTUAL_CREDIT := V_TOTAL * -1;
    END IF;

    INSERT INTO JOURNALS_ENTRIES
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                ARRANGMENT_NO          ,
                ACCOUNT_ID             ,
                CURRENCIES_ID          ,
                EXCHANGE_RATE          ,
                CR_DEBIT               ,
                CR_CREDIT              ,
                SETL_FOR               ,
                SETL_REF               ,
                BANK_ID                ,
                CHECK_NO               ,
                CHECK_DATE             ,
                COST_CENTER_ID         ,
                DESCRIPTION            ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE             ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
            )
    VALUES
            (    V_TRANSACTIONS_ID           ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                I                                              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.ACCOUNT_ID   ,
                V_LOCAL_CURRENCY_ID        ,
                1                                              ,
                V_TOTAL_ACTUAL_DEBIT        ,
                V_TOTAL_ACTUAL_CREDIT       ,
                NULL                                  ,
                NULL                                ,
                NULL                        ,
                NULL                                ,
                NULL                                  ,
                NULL                                         ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION  ,
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
            );

    IF V_TOTAL > 0 THEN
            UPDATE JOURNALS
            SET TOTAL_ACTUAL_DEBIT = V_TOTAL,
                    TOTAL_ACTUAL_CREDIT = V_TOTAL
            WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
            AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    ELSE
            UPDATE JOURNALS
            SET TOTAL_ACTUAL_DEBIT = V_TOTAL * -1,
                    TOTAL_ACTUAL_CREDIT = V_TOTAL * -1
            WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
            AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    END IF;
END;


---------------------------------------

PROCEDURE MAKE_NEW_OPEN_BALANCE IS
CURSOR C1 IS
    SELECT
        FINANCIAL_PERIODS_ID           ,
        FINANCIAL_YEARS_ID             ,
        BRANCH_ID                      ,
        USER_CODE                      ,
        START_DATE                     ,
        END_DATE                       ,
        CLOSING_FLAG                   ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE
    FROM FINANCIAL_PERIODS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.NEW_FINANCIAL_YEARS_ID
    ORDER BY START_DATE;
V_C1 C1%ROWTYPE;

CURSOR C2 IS
    SELECT ACCOUNT_ID
    FROM ACCOUNTS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND MAIN_SUB_TYPE = 2
    ORDER BY USER_CODE;
V_C2 C2%ROWTYPE;

CURSOR C3(V_ACCOUNT_ID NUMBER) IS
    SELECT  CURRENCIES_ID,EXCHANGE_RATE, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT) CR_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT) CR_CREDIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT * JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE) ACTUAL_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT * JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW
    WHERE JOURNAL_JOURNAL_ENTRY_VIEW.ACCOUNT_ID = V_ACCOUNT_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.BRANCH_ID = V_BRANCH_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CONFIRMED = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CANCELED <> 1
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    GROUP BY CURRENCIES_ID,EXCHANGE_RATE;
V_C3 C3%ROWTYPE;
V_COUNT NUMBER;
V_SYSDATE DATE;
V_TRANSACTIONS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(50);
ALERT_ID NUMBER;
I NUMBER;
V_TOTAL NUMBER;
V_TOTAL_ACTUAL_DEBIT NUMBER;
V_TOTAL_ACTUAL_CREDIT NUMBER;
V_ACCOUNT_DEFAULT_CURRENCY NUMBER;
BEGIN
  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;

    SELECT ACCOUNTS_OPEN_BALANCE_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;


    IF V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO IS NULL THEN
        IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,27,V_CLOSING_FINANCIAL_YEARS_CUR.NEW_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                END IF;
                IF V_DOCUMENT_NO = 'ERROR' THEN
                    apex_error.add_error(
                        p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                        p_additional_info  => null,
                        p_display_location => apex_error.c_inline_in_notification
                    );

                ELSIF V_DOCUMENT_NO = 'USER' THEN
                    apex_error.add_error(
                        p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                        p_additional_info  => null,
                        p_display_location => apex_error.c_inline_in_notification
                    );
                END IF;
        END IF;
    ELSE
        V_DOCUMENT_NO := V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO;
    END IF;


  INSERT INTO ACCOUNTS_OPEN_BALANCE
            (   DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                27                                              ,
                V_DOCUMENT_NO                       ,
                V_C1.START_DATE                  ,
                V_BRANCH_ID           ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID             ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID         ,
                V_C1.FINANCIAL_YEARS_ID     ,
                V_C1.FINANCIAL_PERIODS_ID         ,
                'OPEN BALANCE'                            ,
                0                                                 ,
                0                                                    ,
                1                                          ,
                2                                       ,
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
    OPEN C2;
    I:=0;
    V_TOTAL :=0;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            OPEN C3(V_C2.ACCOUNT_ID);
            LOOP
                    FETCH C3 INTO V_C3;
                    EXIT WHEN C3%NOTFOUND;
                    I:=I+1;

                    V_C3.CR_DEBIT := NVL(V_C3.CR_DEBIT, 0);
                    V_C3.CR_CREDIT := NVL(V_C3.CR_CREDIT,0);

                    IF V_C3.CR_DEBIT > V_C3.CR_CREDIT THEN
                            V_C3.CR_DEBIT := V_C3.CR_DEBIT - V_C3.CR_CREDIT;
                            V_C3.CR_CREDIT :=0;
                    ELSE
                            V_C3.CR_CREDIT := V_C3.CR_CREDIT - V_C3.CR_DEBIT;
                            V_C3.CR_DEBIT :=0;
                    END IF;

                    INSERT INTO ACCOUNTS_OPEN_BALANCE_DTL
                            (    DOCUMENT_ID            ,
                                DEPARTMENT_ID          ,
                                ARRANGMENT_NO          ,
                                ACCOUNT_ID             ,
                                CURRENCIES_ID          ,
                                EXCHANGE_RATE          ,
                                CR_DEBIT               ,
                                CR_CREDIT              ,
                                BANK_ID                ,
                                CHECK_NO               ,
                                CHECK_DATE             ,
                                COST_CENTER_ID         ,
                                DESCRIPTION            ,
                                CREATED_BY             ,
                                CREATION_DATE          ,
                                CREATION_MACHINE             ,
                                UPDATED_BY             ,
                                UPDATED_DATE           ,
                                UPDATED_MACHINE
                          )
                  VALUES
                            (    V_TRANSACTIONS_ID           ,
                                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                                I                                             ,
                                V_C2.ACCOUNT_ID             ,
                                V_C3.CURRENCIES_ID                       ,
                                V_C3.EXCHANGE_RATE                    ,
                                V_C3.CR_DEBIT                   ,
                                V_C3.CR_CREDIT                  ,
                                NULL                                ,
                                NULL                                   ,
                                NULL                                     ,
                                NULL                                         ,
                                'OPEN BALANCE'                ,
                                V_USER_NAME                        ,
                                V_SYSDATE                                        ,
                                V_USER_COMPUTER                ,
                                NULL                                                ,
                                NULL                                                ,
                                NULL
                          );
                END LOOP;
                CLOSE C3;
    END LOOP;
    CLOSE C2;
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE)
    INTO V_TOTAL
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
    AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    UPDATE ACCOUNTS_OPEN_BALANCE
    SET TOTAL_ACTUAL_DEBIT = V_TOTAL,
            TOTAL_ACTUAL_CREDIT = V_TOTAL
    WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
    AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
END;

--------------------------------------------

PROCEDURE CLOSE_FINANCIAL_YEAR IS
BEGIN
    UPDATE FINANCIAL_YEARS
    SET CLOSING_FLAG = 1,
            CLOSING_DATE = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

    UPDATE FINANCIAL_PERIODS
    SET CLOSING_FLAG = 1
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

END;


---------------------------------

PROCEDURE CLOSE_FINANCIAL_YEAR_C IS
BEGIN
    UPDATE FINANCIAL_YEARS
    SET CLOSING_FLAG = 2,
            CLOSING_DATE = ''
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

    UPDATE FINANCIAL_PERIODS
    SET CLOSING_FLAG = 2
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
END;

-------------------


END;
/

CREATE OR REPLACE PACKAGE PCK_GENERAL_LEDGER IS
    PROCEDURE COPY_ACCOUNTS(OLD_BRANCH_ID NUMBER, NEW_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER DEFAULT 1);
    FUNCTION GET_ACCOUNT_MAPPING(V_ACCOUNT_ID_OLD NUMBER) RETURN NUMBER;
    FUNCTION IS_OPEN_FINANCIAL_YEAR(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN;
    FUNCTION IS_OPEN_FINANCIAL_PERIOD(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN;
    FUNCTION JOURNALS(V_DATE DATE, V_JOURNAL_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_BRANCH_ID NUMBER) RETURN VARCHAR2;
    FUNCTION JOURNALS_MONTH(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN VARCHAR2;
    PROCEDURE MAKE_CHECK_TRANSACTION(V_CHECK_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER,V_DOCUMENT_ID NUMBER,V_DEPARTMENT_ID NUMBER, V_DOCUMENT_DATE DATE, V_DOCUMENT_NO VARCHAR2,V_CHECK_STATUS NUMBER, V_SETL_FOR NUMBER, V_SETL_REF NUMBER, V_DESCRIPTION VARCHAR2, V_APP_BRANCH_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE AUTO_DISTRIBUTE_SAL_PAYMENT (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER,  V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    FUNCTION GET_GL_NO_POST_SAVE_FLAG RETURN NUMBER;
    FUNCTION COPY_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2;
    FUNCTION REVERSE_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2;
    FUNCTION GET_OUT_OF_AGE_NOT(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER) RETURN NUMBER;
    PROCEDURE MAKE_CUSTOMER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_SUPPLIER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_EXP_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_TREASURIES_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_TENANT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_OWNER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    FUNCTION GET_COST_CODE_ID(V_COST_CODE_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    FUNCTION GET_COST_CENTER_ID(V_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    FUNCTION GET_ACTIVITY_ID(V_ACTIVITY_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    PROCEDURE GET_ACC_OB_RECON_CUR_S(V_ACCOUNT_ID NUMBER, V_CURRENCIES_ID NUMBER, V_YEAR NUMBER, V_MONTH NUMBER, V_CR_DEBIT IN OUT NUMBER, V_CR_CREDIT IN OUT NUMBER);


    FUNCTION GET_ACC_OPEN_BALANCE_TBD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_TBC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SD(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SC(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIOND(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SD (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SC (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_OPEN_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_OPEN_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_TRANSACTION_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_TRANSACTION_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_BALANCE_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_BALANCE_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIOND (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCED (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCEC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIOND (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCED (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCEC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;




-------



    FUNCTION GET_ACC_OPEN_BALANCE_TBDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_TBCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCEDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCECB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCEDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCECB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;















END;
/

CREATE OR REPLACE PACKAGE BODY PCK_GENERAL_LEDGER IS
------------------------------------
PROCEDURE COPY_ACCOUNTS(OLD_BRANCH_ID NUMBER, NEW_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER DEFAULT 1) IS
CURSOR C1 IS
    SELECT
        ACCOUNT_ID                     ,
        BRANCH_ID                      ,
        GENERAL_ACCOUNT_ID             ,
        PARENT_ACCOUNT_ID              ,
        USER_CODE                      ,
        PRIMARY_NAME                   ,
        SECONDARY_NAME                 ,
        MAIN_SUB_TYPE                  ,
        ACCOUNT_TYPE                   ,
        ACCOUNT_REPORT                 ,
        DEBIT_CREDIT_TYPE              ,
        ENFORCE_COST_CENTER            ,
        RESTRICTED_ACCOUNT             ,
        MULTI_CURRENCY_ACCOUNT         ,
        CURRENCIES_ID                  ,
        TREE_LEVEL                                    ,
        ACTIVE              ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE        ,
        ENFORCE_CHECK_DETAILS  ,
        CURRENCY_RECALCULATION ,
        SALARY_ACCOUNT                 ,
        ENFORCE_ACTIVITY
    FROM ACCOUNTS
    WHERE BRANCH_ID = OLD_BRANCH_ID
    ORDER BY TREE_LEVEL;
V_C1 C1%ROWTYPE;
V_ACCOUNT_ID NUMBER;
V_PARENT_ACCOUNT_ID NUMBER;
V_COUNT NUMBER :=0;
ALERT_ID NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM ACCOUNTS
    WHERE BRANCH_ID = NEW_BRANCH_ID;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000239',V_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );

    END IF;

    DELETE FROM ACCOUNTS_MAPPING;


    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT ACCOUNTS_SEQ.NEXTVAL
            INTO V_ACCOUNT_ID
            FROM DUAL;
            V_PARENT_ACCOUNT_ID := NULL;
            IF V_C1.PARENT_ACCOUNT_ID IS NOT NULL THEN
                    V_PARENT_ACCOUNT_ID := NULL;
                    V_PARENT_ACCOUNT_ID := GET_ACCOUNT_MAPPING(V_C1.PARENT_ACCOUNT_ID);
            END IF;

            INSERT INTO ACCOUNTS
                    (    ACCOUNT_ID             ,
                        BRANCH_ID              ,
                        GENERAL_ACCOUNT_ID     ,
                        PARENT_ACCOUNT_ID      ,
                        USER_CODE              ,
                        PRIMARY_NAME           ,
                        SECONDARY_NAME         ,
                        MAIN_SUB_TYPE          ,
                        ACCOUNT_TYPE           ,
                        ACCOUNT_REPORT         ,
                        DEBIT_CREDIT_TYPE      ,
                        ENFORCE_COST_CENTER    ,
                        RESTRICTED_ACCOUNT     ,
                        MULTI_CURRENCY_ACCOUNT ,
                        CURRENCIES_ID          ,
                        TREE_LEVEL             ,
                        ACTIVE                 ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE       ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE        ,
                        ENFORCE_CHECK_DETAILS  ,
                        CURRENCY_RECALCULATION ,
                        SALARY_ACCOUNT                 ,
                        ENFORCE_ACTIVITY
                    )
            VALUES
                    (    V_ACCOUNT_ID                     ,
                        NEW_BRANCH_ID                            ,
                        V_C1.GENERAL_ACCOUNT_ID     ,
                        V_PARENT_ACCOUNT_ID              ,
                        V_C1.USER_CODE              ,
                        V_C1.PRIMARY_NAME           ,
                        V_C1.SECONDARY_NAME         ,
                        V_C1.MAIN_SUB_TYPE          ,
                        V_C1.ACCOUNT_TYPE           ,
                        V_C1.ACCOUNT_REPORT         ,
                        V_C1.DEBIT_CREDIT_TYPE      ,
                        V_C1.ENFORCE_COST_CENTER    ,
                        V_C1.RESTRICTED_ACCOUNT     ,
                        V_C1.MULTI_CURRENCY_ACCOUNT ,
                        V_C1.CURRENCIES_ID          ,
                        V_C1.TREE_LEVEL             ,
                        V_C1.ACTIVE                 ,
                        V_C1.CREATED_BY             ,
                        V_C1.CREATION_DATE          ,
                        V_C1.CREATION_MACHINE       ,
                        V_C1.UPDATED_BY             ,
                        V_C1.UPDATED_DATE           ,
                        V_C1.UPDATED_MACHINE        ,
                        V_C1.ENFORCE_CHECK_DETAILS  ,
                        V_C1.CURRENCY_RECALCULATION ,
                        V_C1.SALARY_ACCOUNT                 ,
                        V_C1.ENFORCE_ACTIVITY
                    );

            INSERT INTO ACCOUNTS_MAPPING
                    (    ACCOUNT_ID_OLD,
                        ACCOUNT_ID_NEW
                    )
            VALUES
                    (    V_C1.ACCOUNT_ID,
                        V_ACCOUNT_ID
                    );
    END LOOP;
    CLOSE C1;
    COMMIT;
END;
------------------------------------------
FUNCTION GET_ACCOUNT_MAPPING(V_ACCOUNT_ID_OLD NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT ACCOUNT_ID_NEW
    FROM ACCOUNTS_MAPPING
    WHERE ACCOUNT_ID_OLD = V_ACCOUNT_ID_OLD;
V_ACCOUNT_ID_NEW NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_ACCOUNT_ID_NEW;
    CLOSE C1;
     RETURN (V_ACCOUNT_ID_NEW);
END;
-----------------------------------------
FUNCTION IS_OPEN_FINANCIAL_YEAR(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN IS
CURSOR C1 IS
    SELECT CLOSING_FLAG
    FROM FINANCIAL_YEARS
    WHERE START_DATE <= V_DATE
    AND END_DATE >= V_DATE
    AND BRANCH_ID = V_BRANCH_ID;
V_CLOSING_FLAG NUMBER;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CLOSING_FLAG;
    CLOSE C1;

  IF NVL(V_CLOSING_FLAG,1) = 1 THEN
          RETURN(FALSE);
  ELSE
          RETURN(TRUE);
  END IF;
END;
--------------------------------------
FUNCTION IS_OPEN_FINANCIAL_PERIOD(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN IS
CURSOR C1 IS
    SELECT CLOSING_FLAG
    FROM FINANCIAL_PERIODS
    WHERE START_DATE <= V_DATE
    AND END_DATE >= V_DATE
    AND BRANCH_ID = V_BRANCH_ID;
V_CLOSING_FLAG NUMBER;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CLOSING_FLAG;
    CLOSE C1;
  IF NVL(V_CLOSING_FLAG,1) = 1 THEN
          RETURN(FALSE);
  ELSE
          RETURN(TRUE);
  END IF;
END;
---------------------------------------

FUNCTION JOURNALS(V_DATE DATE, V_JOURNAL_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_BRANCH_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1  IS
    SELECT MAX(COMPUTER_SERIAL_FIRST) COMPUTER_SERIAL
    FROM JOURNALS
    WHERE JOURNAL_TYPES_ID = V_JOURNAL_TYPES_ID
    AND COMPUTER_SERIAL_LAST = TO_CHAR(V_DATE,'MM-RRRR')
    AND BRANCH_ID = V_BRANCH_ID;
V_C1 C1%ROWTYPE;
V_LENGTH NUMBER;
BEGIN
    V_LENGTH := NVL(GET_SYSTEM_PARAMETER(23),5);
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    IF NVL(V_C1.COMPUTER_SERIAL,'0') ='0' THEN
            RETURN(LPAD('1',V_LENGTH,'0') ||'-'|| TO_CHAR(V_DATE,'MM-RRRR'));
    ELSE
            RETURN(LPAD(TO_CHAR(V_C1.COMPUTER_SERIAL + 1),V_LENGTH,'0') ||'-'|| TO_CHAR(V_DATE,'MM-RRRR'));
    END IF;
END;

---------------------------------------

FUNCTION JOURNALS_MONTH(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1  IS
    SELECT MAX(DOCUMENT_NO) DOCUMENT_NO
    FROM JOURNALS
    WHERE TO_CHAR(DOCUMENT_DATE,'MM-RRRR') = TO_CHAR(V_DATE,'MM-RRRR')
    AND BRANCH_ID = V_BRANCH_ID;
V_C1 C1%ROWTYPE;
V_LENGTH NUMBER;
BEGIN
    V_LENGTH := NVL(GET_SYSTEM_PARAMETER(23),5);
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    IF NVL(V_C1.DOCUMENT_NO,'0') ='0' THEN
            RETURN(LPAD('1',V_LENGTH,'0'));
    ELSE
            RETURN(LPAD(TO_CHAR(V_C1.DOCUMENT_NO + 1),V_LENGTH,'0'));
    END IF;
END;


---------------------------------------------


PROCEDURE MAKE_CHECK_TRANSACTION(V_CHECK_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER,V_DOCUMENT_ID NUMBER,V_DEPARTMENT_ID NUMBER, V_DOCUMENT_DATE DATE, V_DOCUMENT_NO VARCHAR2,V_CHECK_STATUS NUMBER, V_SETL_FOR NUMBER, V_SETL_REF NUMBER, V_DESCRIPTION VARCHAR2, V_APP_BRANCH_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;
V_GLOBAL_USER_NAME                 VARCHAR2(100);
V_GLOBAL_USER_COMPUTER        VARCHAR2(100);
V_BRANCH_ID NUMBER;
BEGIN
    V_BRANCH_ID := V_APP_BRANCH_ID;
    V_GLOBAL_USER_NAME := V_APP_USER_NAME;
    V_GLOBAL_USER_COMPUTER := V_APP_USER_COMPUTER;

    SELECT CHECKS_TRANSACTIONS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    SELECT SYSDATE
    INTO V_SYSDATE
    FROM DUAL;

    INSERT INTO CHECKS_TRANSACTIONS

            (   TRANSACTION_ID,
                CHECK_ID,
                BASE_DOCUMENT_TYPES_ID,
                BASE_DOCUMENT_ID,
                BASE_DEPARTMENT_ID,
                TRANSACTION_DATE,
                DOCUMENT_NO,
                NOTES,
                BRANCH_ID,
                CHECK_STATUS,
                SETL_FOR,
                SETL_REF,
                CREATED_BY,
                CREATION_DATE,
                CREATION_MACHINE,
                UPDATED_BY,
                UPDATED_DATE,
                UPDATED_MACHINE
            )
    VALUES
            (   V_TRANSACTIONS_ID,
                V_CHECK_ID,
                V_DOCUMENT_TYPES_ID,
                V_DOCUMENT_ID,
                V_DEPARTMENT_ID,
                V_DOCUMENT_DATE,
                V_DOCUMENT_NO,
                V_DESCRIPTION,
                V_BRANCH_ID,
                V_CHECK_STATUS,
                V_SETL_FOR,
                V_SETL_REF,
                V_GLOBAL_USER_NAME,
                V_SYSDATE,
                V_GLOBAL_USER_COMPUTER,
                NULL,
                NULL,
                NULL
            );
END;




/******************************************************************************************************************************************************/
/*                                                                                                                          Developed By Sameh Noshi Naguib                                                                                                                    */
/******************************************************************************************************************************************************/
/* Warning: This is a restricted software and all right reserved, this program is protected by copyright law and international treaties, unauthorized */
/* reproduction or distribution of this program or any portion of it may result in severe civil and criminal penalties and will be prosecuted  to the    */
/* maximum extent possible under law.                                                                                                                                                                                                                                        */
/******************************************************************************************************************************************************/
PROCEDURE AUTO_DISTRIBUTE_SAL_PAYMENT (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER,  V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2)IS
CURSOR C1(V_SETL_REF NUMBER, V_BRANCH_ID NUMBER)  IS
    SELECT     SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                    SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID,
                    SAL_INVOICES.NET_PRICE - NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_INVOICES, SAL_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                     SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID
    UNION
    SELECT     SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                    SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID,
                    SAL_INVOICES.NET_PRICE - NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_INVOICES, SAL_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_INVOICES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                     SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                    SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID,
                    SAL_RETURNES.NET_PRICE - NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, -1 OPER
    FROM SAL_RETURNES, SAL_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                     SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID
    UNION
    SELECT      SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                    SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID,
                    SAL_RETURNES.NET_PRICE - NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, -1 OPER
    FROM SAL_RETURNES, SAL_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_RETURNES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                     SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID
    UNION

    SELECT      SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                    SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID,
                    SAL_SERVICES_INVOICES.NET_PRICE - NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_INVOICES, SAL_SERVICES_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                     SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                    SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID,
                    SAL_SERVICES_INVOICES.NET_PRICE - NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_INVOICES, SAL_SERVICES_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_INVOICES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                     SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                    SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID,
                    SAL_SERVICES_RETURNES.NET_PRICE - NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_RETURNES, SAL_SERVICES_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                     SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                    SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID,
                    SAL_SERVICES_RETURNES.NET_PRICE - NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_RETURNES, SAL_SERVICES_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_RETURNES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                     SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID

    order by 1,2;
V_C1 C1%ROWTYPE;
V_ARRANGMENT_NO2 NUMBER;
V_AMOUNT_DISTRIBUTED_SO_FAR NUMBER;
V_END_FLAG BOOLEAN := FALSE;

CURSOR C2 IS
    SELECT *
    FROM JOURNALS
    WHERE     DEPARTMENT_ID = V_DEPARTMENT_ID
    AND         DOCUMENT_ID = V_DOCUMENT_ID;
V_C2 C2%ROWTYPE;

CURSOR C3 IS
    SELECT *
    FROM JOURNALS_ENTRIES
    WHERE     DEPARTMENT_ID = V_DEPARTMENT_ID
    AND         DOCUMENT_ID = V_DOCUMENT_ID
    AND         ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

V_AMOUNT_TO_DISTRIBUTE NUMBER;
BEGIN

    OPEN C2;
    FETCH C2 INTO V_C2;
    CLOSE C2;

    OPEN C3;
    FETCH C3 INTO V_C3;
    CLOSE C3;

    V_AMOUNT_TO_DISTRIBUTE := NVL(V_C3.CR_CREDIT,0) - NVL(V_C3.CR_DEBIT,0);

    IF V_C3.SETL_FOR IS NOT NULL AND V_C3.SETL_REF IS NOT NULL AND V_C2.BASE_DOCUMENT_ID IS NULL AND V_AMOUNT_TO_DISTRIBUTE > 0 THEN
            DELETE FROM SAL_INVOICES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_RETURNES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_SERVICES_INVOICES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_SERVICES_RETURNES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;
            V_AMOUNT_DISTRIBUTED_SO_FAR :=0;
            OPEN C1(V_C3.SETL_REF, V_C2.BRANCH_ID);
            LOOP
                    FETCH C1 INTO V_C1;
                    EXIT WHEN C1%NOTFOUND OR V_AMOUNT_DISTRIBUTED_SO_FAR = V_AMOUNT_TO_DISTRIBUTE;
                    IF V_C1.REMAINING_VALUE > 0 THEN
                            IF V_C1.DOCUMENT_TYPES_ID IN(1,15) THEN
                                    IF V_AMOUNT_DISTRIBUTED_SO_FAR + V_C1.REMAINING_VALUE > V_AMOUNT_TO_DISTRIBUTE THEN
                                            V_C1.REMAINING_VALUE := V_AMOUNT_TO_DISTRIBUTE - V_AMOUNT_DISTRIBUTED_SO_FAR;
                                    END IF;
                                    V_AMOUNT_DISTRIBUTED_SO_FAR := V_AMOUNT_DISTRIBUTED_SO_FAR + V_C1.REMAINING_VALUE;
                            ELSIF V_C1.DOCUMENT_TYPES_ID IN(6,32,16) THEN
                                    V_AMOUNT_DISTRIBUTED_SO_FAR := V_AMOUNT_DISTRIBUTED_SO_FAR - V_C1.REMAINING_VALUE;
                            END IF;
                            V_ARRANGMENT_NO2 := 1;
                            IF V_C1.DOCUMENT_TYPES_ID = 1 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_INVOICES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_INVOICES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID = 15 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_SERVICES_INVOICES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_SERVICES_INVOICES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID IN (6,32) THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_RETURNES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_RETURNES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID = 16 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_SERVICES_RETURNES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_SERVICES_RETURNES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );

                            END IF;
                    END IF;
            END LOOP;
            CLOSE C1;
    END IF;
END;


------------------------------------------------------------------

FUNCTION GET_GL_NO_POST_SAVE_FLAG RETURN NUMBER IS
CURSOR C1 IS
    SELECT POST_SAVE_FLAG
    FROM GL_DOC_NO_SETUP;
V_C1 C1%ROWTYPE;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    RETURN(V_C1.POST_SAVE_FLAG);

END;

----------------------------------------------------------------


FUNCTION COPY_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        DOCUMENT_TYPES_ID              ,
        BASE_DOCUMENT_ID               ,
        BASE_DEPARTMENT_ID             ,
        BASE_DOCUMENT_TYPES_ID         ,
        BASE_DOCUMENT_NO               ,
        DOCUMENT_NO                    ,
        DOCUMENT_DATE                  ,
        JOURNAL_TYPES_ID               ,
        BRANCH_ID                      ,
        FINANCIAL_YEARS_ID             ,
        FINANCIAL_PERIODS_ID           ,
        DESCRIPTION                    ,
        TOTAL_ACTUAL_DEBIT             ,
        TOTAL_ACTUAL_CREDIT            ,
        CONFIRMED                      ,
        CANCELED                       ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        COMPUTER_SERIAL                ,
        COMPUTER_SERIAL_FIRST          ,
        COMPUTER_SERIAL_LAST
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C2 C2%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_FINANCIAL_PERIODS_ID NUMBER;
V_FINANCIAL_YEARS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(25);
V_COMPUTER_SERIAL VARCHAR2(50);
V_ROWID VARCHAR2(500);
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;


    IF GET_USER_PARAMETER(40, V_C1.BRANCH_ID) = 2 THEN
            IF ROUND(V_C1.TOTAL_ACTUAL_DEBIT,4) <> ROUND(V_C1.TOTAL_ACTUAL_CREDIT,4) THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000068',V_APP_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );
            END IF;
    END IF;

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

  V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_SYSDATE, V_C1.BRANCH_ID);
  V_FINANCIAL_PERIODS_ID := GET_FINANCIAL_PERIOD(V_SYSDATE, V_C1.BRANCH_ID);

    V_DOCUMENT_NO :='';
    IF GET_GL_NO_POST_SAVE_FLAG = 2 THEN
          V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_C1.BRANCH_ID,V_C1.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C1.JOURNAL_TYPES_ID,NULL,NULL);

    END IF;

  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_C1.DOCUMENT_DATE, V_C1.JOURNAL_TYPES_ID , V_FINANCIAL_YEARS_ID, V_C1.BRANCH_ID);

  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID       ,
                BASE_DEPARTMENT_ID     ,
                BASE_DOCUMENT_TYPES_ID ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                JOURNAL_TYPES_ID       ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL        ,
                COMPUTER_SERIAL_FIRST        ,
                COMPUTER_SERIAL_LAST        ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_C1.DEPARTMENT_ID          ,
                V_C1.DOCUMENT_TYPES_ID      ,
                V_C1.BASE_DOCUMENT_ID       ,
                V_C1.BASE_DEPARTMENT_ID     ,
                V_C1.BASE_DOCUMENT_TYPES_ID ,
                V_DOCUMENT_NO                           ,
                V_C1.DOCUMENT_DATE                    ,
                V_C1.JOURNAL_TYPES_ID       ,
                V_C1.BRANCH_ID              ,
                V_C1.FINANCIAL_YEARS_ID       ,
                V_C1.FINANCIAL_PERIODS_ID        ,
                V_C1.DESCRIPTION            ,
                0     ,
                0    ,
                2                                          ,
                2                                       ,
                V_COMPUTER_SERIAL               ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_APP_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_APP_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          )
          returning rowid into V_ROWID;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        ACTIVITY_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_C2.DEPARTMENT_ID          ,
                        V_C2.ARRANGMENT_NO          ,
                        V_C2.ACCOUNT_ID             ,
                        V_C2.CURRENCIES_ID          ,
                        V_C2.EXCHANGE_RATE          ,
                        V_C2.CR_DEBIT               ,
                        V_C2.CR_CREDIT              ,
                        V_C2.SETL_FOR               ,
                        V_C2.SETL_REF               ,
                        V_C2.BANK_ID                ,
                        V_C2.CHECK_NO               ,
                        V_C2.CHECK_DATE             ,
                        V_C2.COST_CENTER_ID         ,
                        V_C2.ACTIVITY_ID         ,
                        V_C2.DESCRIPTION            ,
                        V_APP_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_APP_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C2;

    RETURN(V_ROWID);

END;


-----------------------------------------------------


FUNCTION REVERSE_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        DOCUMENT_TYPES_ID              ,
        BASE_DOCUMENT_ID               ,
        BASE_DEPARTMENT_ID             ,
        BASE_DOCUMENT_TYPES_ID         ,
        BASE_DOCUMENT_NO               ,
        DOCUMENT_NO                    ,
        DOCUMENT_DATE                  ,
        JOURNAL_TYPES_ID               ,
        BRANCH_ID                      ,
        FINANCIAL_YEARS_ID             ,
        FINANCIAL_PERIODS_ID           ,
        DESCRIPTION                    ,
        TOTAL_ACTUAL_DEBIT             ,
        TOTAL_ACTUAL_CREDIT            ,
        CONFIRMED                      ,
        CANCELED                       ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        COMPUTER_SERIAL                ,
        COMPUTER_SERIAL_FIRST          ,
        COMPUTER_SERIAL_LAST
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C2 C2%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_FINANCIAL_PERIODS_ID NUMBER;
V_FINANCIAL_YEARS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(25);
V_COMPUTER_SERIAL VARCHAR2(50);
V_ROWID VARCHAR2(500);
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;


    IF GET_USER_PARAMETER(40, V_C1.BRANCH_ID) = 2 THEN
            IF ROUND(V_C1.TOTAL_ACTUAL_DEBIT,4) <> ROUND(V_C1.TOTAL_ACTUAL_CREDIT,4) THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000068',V_APP_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );
            END IF;
    END IF;

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

  V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_SYSDATE, V_C1.BRANCH_ID);
  V_FINANCIAL_PERIODS_ID := GET_FINANCIAL_PERIOD(V_SYSDATE, V_C1.BRANCH_ID);

    V_DOCUMENT_NO :='';
    IF GET_GL_NO_POST_SAVE_FLAG = 2 THEN
          V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_C1.BRANCH_ID,V_C1.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C1.JOURNAL_TYPES_ID,NULL,NULL);

    END IF;

  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_C1.DOCUMENT_DATE, V_C1.JOURNAL_TYPES_ID , V_FINANCIAL_YEARS_ID, V_C1.BRANCH_ID);

  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID       ,
                BASE_DEPARTMENT_ID     ,
                BASE_DOCUMENT_TYPES_ID ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                JOURNAL_TYPES_ID       ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL        ,
                COMPUTER_SERIAL_FIRST        ,
                COMPUTER_SERIAL_LAST        ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_C1.DEPARTMENT_ID          ,
                V_C1.DOCUMENT_TYPES_ID      ,
                V_C1.BASE_DOCUMENT_ID       ,
                V_C1.BASE_DEPARTMENT_ID     ,
                V_C1.BASE_DOCUMENT_TYPES_ID ,
                V_DOCUMENT_NO                           ,
                V_C1.DOCUMENT_DATE                    ,
                V_C1.JOURNAL_TYPES_ID       ,
                V_C1.BRANCH_ID              ,
                V_C1.FINANCIAL_YEARS_ID       ,
                V_C1.FINANCIAL_PERIODS_ID        ,
                V_C1.DESCRIPTION            ,
                0     ,
                0    ,
                2                                          ,
                2                                       ,
                V_COMPUTER_SERIAL               ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_APP_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_APP_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          )
          returning rowid into V_ROWID;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        ACTIVITY_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_C2.DEPARTMENT_ID          ,
                        V_C2.ARRANGMENT_NO          ,
                        V_C2.ACCOUNT_ID             ,
                        V_C2.CURRENCIES_ID          ,
                        V_C2.EXCHANGE_RATE          ,
                        V_C2.CR_CREDIT              ,
                        V_C2.CR_DEBIT               ,
                        V_C2.SETL_FOR               ,
                        V_C2.SETL_REF               ,
                        V_C2.BANK_ID                ,
                        V_C2.CHECK_NO               ,
                        V_C2.CHECK_DATE             ,
                        V_C2.COST_CENTER_ID         ,
                        V_C2.ACTIVITY_ID         ,
                        V_C2.DESCRIPTION            ,
                        V_APP_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_APP_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C2;

    RETURN(V_ROWID);

END;


--------------------------------------

FUNCTION GET_OUT_OF_AGE_NOT(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER) RETURN NUMBER IS
V_AMOUNT NUMBER;
V_SAL_INVOICES_PAY  NUMBER;
V_SAL_SERVICES_INVOICES_PAY  NUMBER;
V_SAL_RETURNES_PAY  NUMBER;
V_SAL_SERVICES_RETURNES_PAY NUMBER;
BEGIN
    SELECT NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_INVOICES_PAY
    FROM SAL_INVOICES_PAYMENT
    WHERE SAL_INVOICES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_INVOICES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_INVOICES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_RETURNES_PAY
    FROM SAL_RETURNES_PAYMENT
    WHERE SAL_RETURNES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_RETURNES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_RETURNES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_SERVICES_INVOICES_PAY
    FROM SAL_SERVICES_INVOICES_PAYMENT
    WHERE SAL_SERVICES_INVOICES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_SERVICES_INVOICES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_SERVICES_INVOICES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_SERVICES_RETURNES_PAY
    FROM SAL_SERVICES_RETURNES_PAYMENT
    WHERE SAL_SERVICES_RETURNES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_SERVICES_RETURNES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_SERVICES_RETURNES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    RETURN(V_SAL_INVOICES_PAY + V_SAL_SERVICES_INVOICES_PAY - V_SAL_RETURNES_PAY - V_SAL_SERVICES_RETURNES_PAY);
END;

---------------------------------------

PROCEDURE MAKE_CUSTOMER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM CUSTOMERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

------------------------------------

PROCEDURE MAKE_SUPPLIER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM SUPPLIERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

-------------------------------------------------

PROCEDURE MAKE_EXP_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
CURSOR C1 IS
    SELECT SETL_FOR, SETL_REF
    FROM STOCK_IN_DOCUMENTS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND STORES_ID = V_DEPARTMENT_ID;

CURSOR C2 IS
    SELECT SETL_FOR, SETL_REF
    FROM STOCK_OUT_DOCUMENTS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND STORES_ID = V_DEPARTMENT_ID;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;

BEGIN
    DELETE FROM EXPENSES_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

    IF V_DOCUMENT_TYPES_ID = 23 THEN
            OPEN C1;
            FETCH C1 INTO V_SETL_FOR, V_SETL_REF;
            CLOSE C1;
    ELSIF V_DOCUMENT_TYPES_ID = 24 THEN
            OPEN C2;
            FETCH C2 INTO V_SETL_FOR, V_SETL_REF;
            CLOSE C2;
    END IF;

    IF V_SETL_FOR = 1 THEN
            DELETE FROM CUSTOMERS_TRANSACTIONS
            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
    ELSIF V_SETL_FOR = 2 THEN
            DELETE FROM SUPPLIERS_TRANSACTIONS
            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
    END IF;

END;


---------------------------------------------

PROCEDURE MAKE_TREASURIES_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM TREASURIES_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

---------------------------------------------

PROCEDURE MAKE_TENANT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM TENANTS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

----------------------------------------------

PROCEDURE MAKE_OWNER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM OWNERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID     = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID     = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

----------------------------------------------


FUNCTION GET_COST_CODE_ID(V_COST_CODE_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT COST_CODE_ID
  FROM COST_CODES
  WHERE USER_CODE = V_COST_CODE_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_COST_CODE_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_COST_CODE_ID;
  CLOSE C1;
  RETURN(V_COST_CODE_ID);
END;

-----------------------


FUNCTION GET_COST_CENTER_ID(V_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT COST_CENTER_ID
  FROM COST_CENTERS
  WHERE USER_CODE = V_COST_CENTER_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_COST_CENTER_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_COST_CENTER_ID;
  CLOSE C1;
  RETURN(V_COST_CENTER_ID);
END;

-----------------------


FUNCTION GET_ACTIVITY_ID(V_ACTIVITY_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT ACTIVITY_ID
  FROM ACTIVITIES
  WHERE USER_CODE = V_ACTIVITY_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_ACTIVITY_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_ACTIVITY_ID;
  CLOSE C1;
  RETURN(V_ACTIVITY_ID);
END;

-----------------------

PROCEDURE GET_ACC_OB_RECON_CUR_S(V_ACCOUNT_ID NUMBER, V_CURRENCIES_ID NUMBER, V_YEAR NUMBER, V_MONTH NUMBER, V_CR_DEBIT IN OUT NUMBER, V_CR_CREDIT IN OUT NUMBER) IS
CURSOR C1 IS
    SELECT SUM(CR_DEBIT) CR_DEBIT, SUM(CR_CREDIT) CR_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW
    WHERE ACCOUNT_ID  = V_ACCOUNT_ID
    AND CONFIRMED = 1
    AND CANCELED <> 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID = V_CURRENCIES_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_STATUS = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_YEAR ||'-'||LPAD( JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_MONTH,2,'0')< V_YEAR || '-'||LPAD( V_MONTH,2,'0')
    AND (JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_YEAR,JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_MONTH) NOT IN (SELECT V_YEAR, V_MONTH FROM DUAL);
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CR_DEBIT, V_CR_CREDIT;
    CLOSE C1;
    V_CR_DEBIT := NVL(V_CR_DEBIT, 0);
    V_CR_CREDIT := NVL(V_CR_CREDIT, 0);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SD(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SC(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;

------------------------------------
FUNCTION GET_ACC_TRANSACTIOND(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTIONC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SD (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SC (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;


-------------------------------------

FUNCTION GET_TRIAL_OPEN_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;


CURSOR C4 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;



CURSOR C11 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;

CURSOR C44 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;
    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C44;
                    FETCH C44 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C44;
            ELSE
                    OPEN C4;
                    FETCH C4 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C4;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C11;
                    FETCH C11 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C11;
            ELSE
                    OPEN C1;
                    FETCH C1 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C1;
            END IF;
    END IF;

    RETURN NVL(V_OPEN_BALANCE_DEBIT_TOTAL,0);

END;


-------------------------------------

FUNCTION GET_TRIAL_OPEN_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;


CURSOR C4 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;



CURSOR C11 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;

CURSOR C44 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;
    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C44;
                    FETCH C44 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C44;
            ELSE
                    OPEN C4;
                    FETCH C4 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C4;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C11;
                    FETCH C11 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C11;
            ELSE
                    OPEN C1;
                    FETCH C1 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C1;
            END IF;
    END IF;

    RETURN NVL(V_OPEN_BALANCE_CREDIT_TOTAL,0);

END;


-----------------------------------------------------------------------------


FUNCTION GET_TRIAL_TRANSACTION_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C2 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C22 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C55 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C55;
                    FETCH C55 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C55;
            ELSE
                    OPEN C5;
                    FETCH C5 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C5;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C22;
                    FETCH C22 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C22;
            ELSE
                    OPEN C2;
                    FETCH C2 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C2;
            END IF;
    END IF;

    RETURN NVL(V_TRANSACTION_DEBIT_TOTAL,0);

END;


-----------------------------------------------------------------------------


FUNCTION GET_TRIAL_TRANSACTION_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C2 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C22 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C55 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C55;
                    FETCH C55 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C55;
            ELSE
                    OPEN C5;
                    FETCH C5 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C5;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C22;
                    FETCH C22 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C22;
            ELSE
                    OPEN C2;
                    FETCH C2 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C2;
            END IF;
    END IF;

    RETURN NVL(V_TRANSACTION_CREDIT_TOTAL,0);

END;

-----------------------------------------------

FUNCTION GET_TRIAL_BALANCE_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C3 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;


CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C33 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C66 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C66;
                    FETCH C66 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C66;
            ELSE
                    OPEN C6;
                    FETCH C6 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C6;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C33;
                    FETCH C33 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C33;
            ELSE
                    OPEN C3;
                    FETCH C3 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C3;
            END IF;
    END IF;

    RETURN NVL(V_BALANCE_DEBIT_TOTAL,0);
END;

-------------------------------------------

-----------------------------------------------

FUNCTION GET_TRIAL_BALANCE_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C3 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;


CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C33 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C66 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C66;
                    FETCH C66 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C66;
            ELSE
                    OPEN C6;
                    FETCH C6 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C6;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C33;
                    FETCH C33 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C33;
            ELSE
                    OPEN C3;
                    FETCH C3 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C3;
            END IF;
    END IF;

    RETURN NVL(V_BALANCE_CREDIT_TOTAL,0);
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------



FUNCTION GET_ACC_TRANSACTION_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_TRANSACTION_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIOND (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCED (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCEC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIOND (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCED (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCEC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------

--------------------------------------

































FUNCTION GET_ACC_OPEN_BALANCE_TBDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);
    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------
FUNCTION GET_ACC_TRANSACTIONDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTIONCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-------------------------------------


FUNCTION GET_EMP_OPEN_BALANCE_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------



FUNCTION GET_ACC_TRANSACTION_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_TRANSACTION_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCEDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCECB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCEDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCECB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------













END;
/

CREATE OR REPLACE PACKAGE PCK_JOURNALS IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE JOURNALS_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE JOURNALS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CHECK_CUST_AGE_DISTRIBUTION;
    PROCEDURE MAKE_CUSTOMER_TRANSACTION;
    PROCEDURE MAKE_SUPPLIER_TRANSACTION;
    PROCEDURE MAKE_TREASURIES_TRANSACTION;
    PROCEDURE MAKE_EXPENSES_TRANSACTION;
    PROCEDURE MAKE_TENANT_TRANSACTION;
    PROCEDURE MAKE_OWNER_TRANSACTION;


END;
/

CREATE OR REPLACE PACKAGE BODY PCK_JOURNALS IS
CURSOR JOURNALS_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            BASE_DOCUMENT_ID    ,
            BASE_DEPARTMENT_ID  ,
            BASE_DOCUMENT_TYPES_ID,
            FINANCIAL_YEARS_ID  ,
            FINANCIAL_PERIODS_ID,
            JOURNAL_TYPES_ID,
            DESCRIPTION         ,
            TOTAL_ACTUAL_DEBIT  ,
            TOTAL_ACTUAL_CREDIT ,
            CONFIRMED           ,
            CANCELED            ,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_JOURNALS_CUR JOURNALS_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN JOURNALS_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH JOURNALS_CUR INTO V_JOURNALS_CUR;
    CLOSE JOURNALS_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_JOURNALS_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE JOURNALS_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN
    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_JOURNALS_CUR.DOCUMENT_ID ,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID, V_JOURNALS_CUR.CONFIRMED) THEN

        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_JOURNALS_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_JOURNALS_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_JOURNALS_CUR.JOURNAL_TYPES_ID,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID,V_JOURNALS_CUR.JOURNAL_TYPES_ID);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE JOURNALS
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_JOURNALS_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM JOURNALS
        WHERE DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND JOURNAL_TYPES_ID = V_JOURNALS_CUR.JOURNAL_TYPES_ID
        AND FINANCIAL_YEARS_ID  = V_JOURNALS_CUR.FINANCIAL_YEARS_ID
        AND DOCUMENT_ID <>  V_JOURNALS_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);


        CHECK_CUST_AGE_DISTRIBUTION;

        IF V_JOURNALS_CUR.BASE_DOCUMENT_ID IS NULL OR V_JOURNALS_CUR.BASE_DOCUMENT_TYPES_ID = 114 THEN
                MAKE_CUSTOMER_TRANSACTION;
                MAKE_SUPPLIER_TRANSACTION;
                MAKE_TREASURIES_TRANSACTION;
                MAKE_EXPENSES_TRANSACTION;
                MAKE_TENANT_TRANSACTION;
                MAKE_OWNER_TRANSACTION;
        END IF;

        UPDATE JOURNALS
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;

    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE JOURNALS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_JOURNALS_CUR.DOCUMENT_ID ,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID, V_JOURNALS_CUR.CONFIRMED) THEN


        IF V_JOURNALS_CUR.BASE_DOCUMENT_ID IS NULL OR V_JOURNALS_CUR.BASE_DOCUMENT_TYPES_ID = 114 THEN
                PCK_GENERAL_LEDGER.MAKE_CUSTOMER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_SUPPLIER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_EXP_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_TREASURIES_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_TENANT_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_OWNER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
        END IF;


        UPDATE JOURNALS
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------

PROCEDURE CHECK_CUST_AGE_DISTRIBUTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE             ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 1
    AND SETL_REF  IS NOT NULL;
V_C1 C1%ROWTYPE;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    LOOP

            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;
            IF ABS(PCK_GENERAL_LEDGER.GET_OUT_OF_AGE_NOT(V_C1.DOCUMENT_ID, V_C1.DEPARTMENT_ID, V_C1.ARRANGMENT_NO)) > ABS((V_C1.CR_DEBIT * V_C1.EXCHANGE_RATE) - (V_C1.CR_CREDIT * V_C1.EXCHANGE_RATE)) THEN
                apex_error.add_error(
                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000150',V_LANGUAGE_ID),
                    p_additional_info  => null,
                    p_display_location => apex_error.c_inline_in_notification
                );
            END IF;
    END LOOP;
    CLOSE C1;
END;

------------------------------------

PROCEDURE MAKE_CUSTOMER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 1
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM CUSTOMERS
            WHERE CUSTOMER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT CUSTOMERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO CUSTOMERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        CUSTOMER_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

-------------------------------------

PROCEDURE MAKE_SUPPLIER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 2
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM SUPPLIERS
            WHERE SUPPLIER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT SUPPLIERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO SUPPLIERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        SUPPLIER_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;


--------------------------------

PROCEDURE MAKE_TREASURIES_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 3
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT TREASURIES_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO TREASURIES_TRANSACTIONS
                    (    TRANSACTION_ID,
                        TREASURIES_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

---------------------------------

PROCEDURE MAKE_EXPENSES_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 5
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT EXPENSES_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO EXPENSES_TRANSACTIONS
                    (    TRANSACTION_ID,
                        EXPENSES_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

----------------------------------------

PROCEDURE MAKE_TENANT_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 6
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM TENANTS_ACC_VIEW
            WHERE TENANT_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT TENANTS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO TENANTS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        TENANT_NO,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        ACCOUNT_ID,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.ACCOUNT_ID,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

------------------------------------

PROCEDURE MAKE_OWNER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE             ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 7
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM OWNERS_ACC_VIEW
            WHERE OWNER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT OWNERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO OWNERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        OWNER_NO,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        ACCOUNT_ID,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.ACCOUNT_ID,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

----------------------------------------------




END;
/

CREATE OR REPLACE PACKAGE PCK_BRIGHT IS
    FUNCTION GET_LOCAL_CURRENCY_ID RETURN NUMBER;
    FUNCTION ABLE_TO_CONFIRM(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN;
    FUNCTION ABLE_TO_CANCEL(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN;
    FUNCTION GET_USER_JOB(V_USER_NAME VARCHAR2) RETURN NUMBER;
    FUNCTION GET_FUNCTION_ID(V_FUNCTION_CODE VARCHAR2) RETURN NUMBER;
    FUNCTION GET_EXCHANGE_RATE(V_CURRENCIES_ID NUMBER, V_DATE DATE) RETURN NUMBER;
    FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;
    FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2,V_START_END VARCHAR2, V_TEXT VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;
    PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER);
    PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    FUNCTION GET_DOCUMENT_TYPE_NAME(V_DOCUMENT_TYPES_ID NUMBER, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;

END;
/

CREATE OR REPLACE PACKAGE BODY PCK_BRIGHT IS
------------------------------------
FUNCTION GET_LOCAL_CURRENCY_ID RETURN NUMBER IS
CURSOR C1 IS
  SELECT CURRENCIES_ID
  FROM CURRENCIES
  WHERE DEFAULT_CURRENCY = 1;
V_CURRENCIES_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CURRENCIES_ID;
    CLOSE C1;
    RETURN V_CURRENCIES_ID;

END;
----------------------------------------
FUNCTION ABLE_TO_CONFIRM(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN IS
CURSOR C1(V_FUNCTION_ID NUMBER, V_JOB_ID NUMBER) IS
    SELECT FUNCTION_CONFIRM
    FROM FUNCTIONS_JOBS
    WHERE FUNCTION_ID = V_FUNCTION_ID
    AND JOB_ID = V_JOB_ID;
V_FUNCTION_ID NUMBER;
V_JOB_ID NUMBER;
V_FUNCTION_CONFIRM NUMBER;
BEGIN
    V_FUNCTION_CONFIRM :=2;
    V_FUNCTION_ID   := GET_FUNCTION_ID(V_FUNCTION_CODE);
    V_JOB_ID := GET_USER_JOB(V_USER_NAME);
    OPEN C1(V_FUNCTION_ID, V_JOB_ID);
    FETCH C1 INTO V_FUNCTION_CONFIRM;
    CLOSE C1;
    IF V_FUNCTION_CONFIRM = 1 THEN
            RETURN(TRUE);
    ELSE
            RETURN(FALSE);
    END IF;
END;
----------------------------------------

FUNCTION ABLE_TO_CANCEL(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN IS
CURSOR C1(V_FUNCTION_ID NUMBER, V_JOB_ID NUMBER) IS
    SELECT FUNCTION_CANCEL
    FROM FUNCTIONS_JOBS
    WHERE FUNCTION_ID = V_FUNCTION_ID
    AND JOB_ID = V_JOB_ID;
V_FUNCTION_ID NUMBER;
V_JOB_ID NUMBER;
V_FUNCTION_CANCEL NUMBER;
BEGIN
    V_FUNCTION_CANCEL :=2;
    V_FUNCTION_ID   := GET_FUNCTION_ID(V_FUNCTION_CODE);
    V_JOB_ID := GET_USER_JOB(V_USER_NAME);
    OPEN C1(V_FUNCTION_ID, V_JOB_ID);
    FETCH C1 INTO V_FUNCTION_CANCEL;
    CLOSE C1;
    IF V_FUNCTION_CANCEL = 1 THEN
            RETURN(TRUE);
    ELSE
            RETURN(FALSE);
    END IF;
END;

----------------------------------------

FUNCTION GET_USER_JOB(V_USER_NAME VARCHAR2) RETURN NUMBER IS
CURSOR C1 IS
    SELECT JOB_ID
    FROM USERS
    WHERE USER_NAME = V_USER_NAME;
V_JOB_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_JOB_ID;
    CLOSE C1;
    RETURN(V_JOB_ID);
END;
---------------------------------------
FUNCTION GET_FUNCTION_ID(V_FUNCTION_CODE VARCHAR2) RETURN NUMBER IS
CURSOR C1 IS
    SELECT FUNCTION_ID
    FROM FUNCTIONS
    WHERE FUNCTION_CODE = V_FUNCTION_CODE;
V_FUNCTION_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_FUNCTION_ID;
    CLOSE C1;
    RETURN(V_FUNCTION_ID);
END;
---------------------------------------
FUNCTION GET_EXCHANGE_RATE(V_CURRENCIES_ID NUMBER, V_DATE DATE) RETURN NUMBER IS
CURSOR C1 IS
    SELECT EXCHANGE_RATE
    FROM CURRENCIES_RATE
    WHERE CURRENCIES_ID = V_CURRENCIES_ID
    AND CURRENCIES_DATE <= V_DATE
    ORDER BY CURRENCIES_DATE DESC;
V_EXCHANGE_RATE NUMBER;
V_CURRENCIES_DATE DATE;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_EXCHANGE_RATE;
    CLOSE C1;
    RETURN(NVL(V_EXCHANGE_RATE,0));
END;
-------------------------------------
FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
  SELECT DECODE(NVL(V_LANGUAGE_ID,1), '1', PRIMARY_NAME,SECONDARY_NAME) NAME
  FROM MESSAGES
  WHERE MESSAGE_NO = V_MESSAGE_NO;
V_MESSAGE VARCHAR2(1000);
BEGIN
  OPEN C1;
  FETCH C1 INTO  V_MESSAGE;
  CLOSE C1;

  RETURN (V_MESSAGE);
END;
------------------------------------

FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2,V_START_END VARCHAR2, V_TEXT VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
  SELECT DECODE(NVL(V_LANGUAGE_ID,1), '1', PRIMARY_NAME,SECONDARY_NAME) NAME
  FROM MESSAGES
  WHERE MESSAGE_NO = V_MESSAGE_NO;
V_MESSAGE VARCHAR2(1000);
BEGIN
  OPEN C1;
  FETCH C1 INTO  V_MESSAGE;
  CLOSE C1;

  IF V_START_END = 'E' THEN
    RETURN (V_MESSAGE || ' ' || V_TEXT);
  ELSE
    RETURN (V_TEXT || ' ' || V_MESSAGE);
  END IF;

END;
------------------------------------



PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER) IS
CURSOR C1 IS
    SELECT DOCUMENT_ID, DEPARTMENT_ID, CONFIRMED
    FROM JOURNALS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
V_C1 C1%ROWTYPE;
ALERT_ID NUMBER;
BEGIN
    IF NVL(GET_USER_PARAMETER(86, V_BRANCH_ID),1) = 2 THEN
            OPEN C1;
            FETCH C1 INTO V_C1;
            CLOSE C1;

            IF V_C1.CONFIRMED = 1 THEN
                apex_error.add_error(
                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000255',V_LANGUAGE_ID),
                    p_additional_info  => null,
                    p_display_location => apex_error.c_inline_in_notification
                );
            END IF;
    END IF;

    DELETE FROM JOURNALS_ENTRIES
    WHERE (DOCUMENT_ID, DEPARTMENT_ID) IN
                        (    SELECT  DOCUMENT_ID, DEPARTMENT_ID
                            FROM JOURNALS
                            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
                            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
                            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID);

    DELETE FROM JOURNALS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

------------------------------------


PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM CHECKS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

------------------------------------

FUNCTION GET_DOCUMENT_TYPE_NAME(V_DOCUMENT_TYPES_ID NUMBER, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT DECODE(GET_USER_LANG(V_LANGUAGE_ID), 'P', PRIMARY_NAME, SECONDARY_NAME) NAME
    FROM DOCUMENT_TYPES
    WHERE DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
V_C1 C1%ROWTYPE;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;
  RETURN (V_C1.NAME);
END;

------------------------------------

END;
/






ALTER TABLE FUNCTIONS ADD(WORKFLOW NUMBER(1) DEFAULT 2 NOT NULL);
ALTER TABLE FUNCTIONS ADD(MOBILE_ORDER VARCHAR2(25));
ALTER TABLE FUNCTIONS ADD(PRIMARY_NAME_MOBILE VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD(SECONDARY_NAME_MOBILE VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD(FUNCTION_ID_MOBILE NUMBER(15));
ALTER TABLE FUNCTIONS ADD(MOBILE_ICON VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD (FUNCTION_CATEGORY NUMBER(15));
ALTER TABLE FUNCTIONS ADD (FUNCTION_SUB_CATEGORY NUMBER(15));
ALTER TABLE FUNCTIONS ADD (FUNCTION_ORDER NUMBER(15));
ALTER TABLE CODES_SYS ADD (ORDER_BY NUMBER(15));
ALTER TABLE FUNCTIONS_JOBS ADD(FUNCTION_FAVOURITE NUMBER(1));
ALTER TABLE FUNCTIONS_JOBS ADD (ORDER_BY NUMBER(15));


UPDATE FUNCTIONS 
SET WORKFLOW = 1
WHERE FUNCTION_CODE IN (
'ACC_F_019', 
'ACC_F_008', 
'ACC_F_050',
'ACC_F_009',
'SAL_F_011',
'SAL_F_108',
'SAL_F_039',
'SAL_F_006',
'SAL_F_029',
'SAL_F_007',
'SAL_F_030',
'SAL_F_031',
'SAL_F_032',
'SAL_F_102',
'SAL_F_103',
'SAL_F_104',
'SAL_F_101',
'SAL_F_008',
'SAL_F_009',
'PUR_F_028',
'PUR_F_006',
'PUR_F_007',
'PUR_F_008',
'PUR_F_009',
'PUR_F_010',
'PUR_F_011',
'PUR_F_107',
'PUR_F_103',
'PUR_F_104',
'PUR_F_105',
'PUR_F_022',
'PUR_F_023',
'STK_F_006_SAMEH',
'STK_F_007_SAMEH',
'STK_F_008_SAMEH',
'STK_F_009_SAMEH',
'STK_F_010_SAMEH',
'STK_F_011_SAMEH',
'STK_F_012_SAMEH',
'STK_F_013_SAMEH',
'WFL_F_001',
'WFL_F_002',
'FST_F_029',
'FST_F_019',
'FST_F_020',
'FST_F_022',
'FST_F_038',
'FST_F_027',
'PAY_F_051',
'CSH_F_011',
'CSH_F_012',
'CSH_F_013',
'CSH_F_014',
'CSH_F_015',
'CSH_F_016',
'CSH_F_017',
'CSH_F_018',
'CSH_F_019',
'CSH_F_020',
'CSH_F_021',
'CSH_F_022',
'CON_F_010',
'CTR_F_010',
'LGR_F_003',
'LGR_F_004',
'LGR_F_005',
'LGR_F_006',
'LGR_F_007'
);

COMMIT;



  CREATE TABLE "APP_PAGES" 
   (	"APPLICATION_ID" NUMBER, 
	"PAGE_ID" NUMBER, 
	"PRIMARY_NAME" VARCHAR2(200), 
	"SECONDARY_NAME" VARCHAR2(200), 
	"ENTRY_TARGET" VARCHAR2(1000), 
	"PARENT_PAGE_ID" NUMBER, 
	"ENTRY_IMAGE" VARCHAR2(200), 
	"DISPLAY_SEQUENCE" NUMBER, 
	"IS_VISIBLE" NUMBER, 
	"FUNCTION_ID" NUMBER, 
	"APEX_PAGE_ID" NUMBER, 
	 CONSTRAINT "APP_PAGES_PK" PRIMARY KEY ("PAGE_ID") DISABLE, 
	 CONSTRAINT "APP_PAGES_R01" FOREIGN KEY ("PARENT_PAGE_ID")
	  REFERENCES "APP_PAGES" ("PAGE_ID") DISABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INCRE_APP_PAGES" BEFORE INSERT ON APP_PAGES
FOR EACH ROW
BEGIN
IF :NEW.PAGE_ID=-1 OR  :NEW.PAGE_ID IS NULL THEN

SELECT  MAX(PAGE_ID)+1 into :new.PAGE_ID
FROM APP_PAGES;


END IF;
END;


/
ALTER TRIGGER "TRG_INCRE_APP_PAGES" ENABLE;




ALTER TABLE APP_PAGES ADD constraint FK_PP_PAGE_01 foreign key (FUNCTION_ID)
         references FUNCTIONS (FUNCTION_ID)

DROP VIEW BI_PUR_INVOICES_ITEMS_VIEW;

CREATE OR REPLACE FORCE VIEW BI_PUR_INVOICES_ITEMS_VIEW
(
   BRANCH_ID,
   DOCUMENT_ID,
   DOCUMENT_NO,
   DOCUMENT_TYPES_ID,
   DOCUMENT_TYPES_PRIMARY_NAME,
   DOCUMENT_TYPES_SECONDARY_NAME,
   PAYMENT_TYPE,
   PAYMENT_TYPES_PRIMARY_NAME,
   PAYMENT_TYPES_SECONDARY_NAME,
   DEPARTMENT_ID,
   DEPARTMENT_CODE,
   DEPARTMENT_PRIMARY_NAME,
   DEPARTMENT_SECONDARY_NAME,
   DOCUMENT_DATE,
   SUPPLIER_ID,
   SUPPLIER_CODE,
   SUPPLIER_PRIMARY_NAME,
   SUPPLIER_SECONDARY_NAME,
   SUPPLIERS_GROUP_ID,
   SUPPLIERS_GROUP_CODE,
   SUPPLIERS_GROUP_PRIMARY_NAME,
   SUPPLIERS_GROUP_SECONDARY_NAME,
   ITEMS_TYPE,
   ITEMS_ID,
   ITEMS_CODE,
   ITEMS_PRIMARY_NAME,
   ITEMS_SECONDARY_NAME,
   ITEMS_GROUPS_CODE,
   ITEMS_GROUPS_PRIMARY_NAME,
   ITEMS_GROUPS_SECONDARY_NAME,
   ITEM_PRICE
)
AS
   SELECT ALL
          PUR_INVOICES.BRANCH_ID,
          PUR_INVOICES.DOCUMENT_ID,
          PUR_INVOICES.DOCUMENT_NO,
          PUR_INVOICES.DOCUMENT_TYPES_ID,
          DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
          DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
          PUR_INVOICES.PAYMENT_TYPE,
          PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
          PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
          PUR_INVOICES.DEPARTMENT_ID,
          DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
          DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
          DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
          PUR_INVOICES.DOCUMENT_DATE,
          PUR_INVOICES.SUPPLIER_ID,
          SUPPLIERS.USER_CODE SUPPLIER_CODE,
          SUPPLIERS.PRIMARY_NAME SUPPLIER_PRIMARY_NAME,
          SUPPLIERS.SECONDARY_NAME SUPPLIER_SECONDARY_NAME,
          SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID SUPPLIERS_GROUP_ID,
          SUPPLIERS_GROUPS.USER_CODE SUPPLIERS_GROUP_CODE,
          SUPPLIERS_GROUPS.PRIMARY_NAME SUPPLIERS_GROUP_PRIMARY_NAME,
          SUPPLIERS_GROUPS.SECONDARY_NAME SUPPLIERS_GROUP_SECONDARY_NAME,
          ITEMS.ITEM_STOCK_TYPE ITEMS_TYPE,
          PUR_INVOICES_ITEMS.ITEMS_ID,
          ITEMS.USER_CODE ITEMS_CODE,
          ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
          ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
          ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
          ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
          ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
            NVL (PUR_INVOICES_ITEMS.ITEM_COST, 0)
          * PUR_INVOICES_ITEMS.UNIT_FACTOR
          * NVL (PUR_INVOICES_ITEMS.UNIT_QUANTITY, 0)
          * PUR_INVOICES.EXCHANGE_RATE
             ITEM_PRICE
     FROM PUR_INVOICES,
          PUR_INVOICES_ITEMS,
          DEPARTMENTS,
          SUPPLIERS,
          ITEMS,
          ITEMS_GROUPS,
          SUPPLIERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
    WHERE     PUR_INVOICES.DOCUMENT_ID = PUR_INVOICES_ITEMS.DOCUMENT_ID
          AND PUR_INVOICES.DEPARTMENT_ID = PUR_INVOICES_ITEMS.DEPARTMENT_ID
          AND PUR_INVOICES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
          AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
          AND PUR_INVOICES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
          AND PUR_INVOICES.SUPPLIER_ID = SUPPLIERS.SUPPLIER_ID
          AND SUPPLIERS.SUPPLIERS_GROUPS_ID =
                 SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID
          AND (PAYMENT_TYPES.CODES_SYS_ID = PUR_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
          AND PUR_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
          AND PUR_INVOICES.CONFIRMED = 1
          AND PUR_INVOICES.CANCELED <> 1
   UNION ALL
   SELECT ALL
          PUR_RETURNES.BRANCH_ID,
          PUR_RETURNES.DOCUMENT_ID,
          PUR_RETURNES.DOCUMENT_NO,
          PUR_RETURNES.DOCUMENT_TYPES_ID,
          DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
          DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
          PUR_RETURNES.PAYMENT_TYPE,
          PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
          PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
          PUR_RETURNES.DEPARTMENT_ID,
          DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
          DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
          DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
          PUR_RETURNES.DOCUMENT_DATE,
          PUR_RETURNES.SUPPLIER_ID,
          SUPPLIERS.USER_CODE SUPPLIER_CODE,
          SUPPLIERS.PRIMARY_NAME SUPPLIER_PRIMARY_NAME,
          SUPPLIERS.SECONDARY_NAME SUPPLIER_SECONDARY_NAME,
          SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID SUPPLIERS_GROUP_ID,
          SUPPLIERS_GROUPS.USER_CODE SUPPLIERS_GROUP_CODE,
          SUPPLIERS_GROUPS.PRIMARY_NAME SUPPLIERS_GROUP_PRIMARY_NAME,
          SUPPLIERS_GROUPS.SECONDARY_NAME SUPPLIERS_GROUP_SECONDARY_NAME,
          ITEMS.ITEM_STOCK_TYPE ITEMS_TYPE,
          PUR_RETURNES_ITEMS.ITEMS_ID,
          ITEMS.USER_CODE ITEMS_CODE,
          ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
          ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
          ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
          ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
          ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
            -1
          * (  NVL (PUR_RETURNES_ITEMS.ITEM_COST, 0)
             * PUR_RETURNES_ITEMS.UNIT_FACTOR
             * NVL (PUR_RETURNES_ITEMS.UNIT_QUANTITY, 0)
             * PUR_RETURNES.EXCHANGE_RATE)
             ITEM_PRICE
     FROM PUR_RETURNES,
          PUR_RETURNES_ITEMS,
          DEPARTMENTS,
          SUPPLIERS,
          ITEMS,
          ITEMS_GROUPS,
          SUPPLIERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
    WHERE     PUR_RETURNES.DOCUMENT_ID = PUR_RETURNES_ITEMS.DOCUMENT_ID
          AND PUR_RETURNES.DEPARTMENT_ID = PUR_RETURNES_ITEMS.DEPARTMENT_ID
          AND PUR_RETURNES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
          AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
          AND PUR_RETURNES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
          AND PUR_RETURNES.SUPPLIER_ID = SUPPLIERS.SUPPLIER_ID
          AND SUPPLIERS.SUPPLIERS_GROUPS_ID =
                 SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID
          AND (PAYMENT_TYPES.CODES_SYS_ID = PUR_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
          AND PUR_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
          AND PUR_RETURNES.CONFIRMED = 1
          AND PUR_RETURNES.CANCELED <> 1;

DROP VIEW BI_SAL_INVOICES_ITEMS_VIEW;

DROP MATERIALIZED VIEW BI_SAL_INVOICES_ITEMS_VIEW;

CREATE MATERIALIZED VIEW BI_SAL_INVOICES_ITEMS_VIEW
(BRANCH_ID, DOCUMENT_ID, DOCUMENT_NO, DOCUMENT_TYPES_ID, DOCUMENT_TYPES_PRIMARY_NAME,DOCUMENT_TYPES_SECONDARY_NAME,
DEPARTMENT_ID, DEPARTMENT_CODE, DEPARTMENT_PRIMARY_NAME, DEPARTMENT_SECONDARY_NAME, 
 DOCUMENT_DATE, CUSTOMER_ID, CUSTOMER_CODE, CUSTOMER_PRIMARY_NAME, CUSTOMER_SECONDARY_NAME, 
 CUSTOMERS_GROUP_ID, CUSTOMERS_GROUP_CODE, CUSTOMERS_GROUP_PRIMARY_NAME, CUSTOMERS_GROUP_SECONDARY_NAME, SALES_MAN_ID, 
 SALES_MAN_CODE, SALES_MAN_PRIMARY_NAME, SALES_MAN_SECONDARY_NAME, ITEMS_TYPE, ITEMS_ID, 
 ITEMS_CODE, ITEMS_PRIMARY_NAME, ITEMS_SECONDARY_NAME, ITEMS_GROUPS_CODE, ITEMS_GROUPS_PRIMARY_NAME, 
 ITEMS_GROUPS_SECONDARY_NAME, PAYMENT_TYPE, PAYMENT_TYPES_PRIMARY_NAME, PAYMENT_TYPES_SECONDARY_NAME, ITEM_PRICE, ITEM_COST)
REFRESH COMPLETE ON DEMAND AS
SELECT ALL
SAL_INVOICES.BRANCH_ID,
SAL_INVOICES.DOCUMENT_ID,
SAL_INVOICES.DOCUMENT_NO,
SAL_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_INVOICES.DOCUMENT_DATE,
SAL_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'I' ITEMS_TYPE,
SAL_INVOICES_ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
SAL_INVOICES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES_ITEMS.TOTAL_PRICE * SAL_INVOICES.EXCHANGE_RATE  
-(((SAL_INVOICES.INVOICE_DISCOUNT / SAL_INVOICES.TOTAL_PRICE * SAL_INVOICES_ITEMS.TOTAL_PRICE ) +SAL_INVOICES_ITEMS.TOTAL_DISCOUNT) * SAL_INVOICES.EXCHANGE_RATE) ITEM_PRICE,
SAL_INVOICES_ITEMS.ITEM_COST * SAL_INVOICES_ITEMS.UNIT_QUANTITY * SAL_INVOICES_ITEMS.UNIT_FACTOR ITEM_COST 
FROM SAL_INVOICES LEFT JOIN SALES_MAN ON SAL_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID  , SAL_INVOICES_ITEMS, DEPARTMENTS, CUSTOMERS, ITEMS, ITEMS_GROUPS, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_ITEMS.DOCUMENT_ID
AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_ITEMS.DEPARTMENT_ID
AND SAL_INVOICES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND SAL_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_INVOICES.CONFIRMED=1
AND SAL_INVOICES.CANCELED <> 1
AND SAL_INVOICES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_SERVICES_INVOICES.BRANCH_ID,
SAL_SERVICES_INVOICES.DOCUMENT_ID,
SAL_SERVICES_INVOICES.DOCUMENT_NO,
SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_SERVICES_INVOICES.DOCUMENT_DATE,
SAL_SERVICES_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_SERVICES_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME, 
'S' ITEMS_TYPE,
SAL_SERVICES_INVOICES_DTL.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_SERVICES_INVOICES.PAYMENT_TYPE PAYMENT_TYPES,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_INVOICES_DTL.SERVICES_VALUE * SAL_SERVICES_INVOICES.EXCHANGE_RATE 
- ( (SAL_SERVICES_INVOICES.INVOICE_DISCOUNT /  SAL_SERVICES_INVOICES.TOTAL_PRICE * SAL_SERVICES_INVOICES_DTL.SERVICES_VALUE * SAL_SERVICES_INVOICES.EXCHANGE_RATE)) ITEM_PRICE,
0 ITEM_COST
FROM SAL_SERVICES_INVOICES LEFT JOIN SALES_MAN ON SAL_SERVICES_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID   , SAL_SERVICES_INVOICES_DTL , DEPARTMENTS, CUSTOMERS, SALES_SERVICES , CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_DTL.DOCUMENT_ID
AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_DTL.DEPARTMENT_ID
AND SAL_SERVICES_INVOICES_DTL.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_SERVICES_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_SERVICES_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_SERVICES_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_SERVICES_INVOICES.CONFIRMED=1
AND SAL_SERVICES_INVOICES.CANCELED <> 1
AND SAL_SERVICES_INVOICES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_INVOICES.BRANCH_ID,
SAL_INVOICES.DOCUMENT_ID,
SAL_INVOICES.DOCUMENT_NO,
SAL_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_INVOICES.DOCUMENT_DATE,
SAL_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'S' ITEMS_TYPE,
SAL_INVOICES_SERVICES.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_INVOICES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES_SERVICES.SERVICES_VALUE * SAL_INVOICES.EXCHANGE_RATE ITEM_PRICE,
0 ITEM_COST
FROM SAL_INVOICES LEFT JOIN SALES_MAN ON SAL_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID , SAL_INVOICES_SERVICES , DEPARTMENTS, CUSTOMERS, SALES_SERVICES, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_SERVICES.DOCUMENT_ID
AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_SERVICES.DEPARTMENT_ID
AND SAL_INVOICES_SERVICES.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_INVOICES.CONFIRMED=1
AND SAL_INVOICES.CANCELED <> 1
UNION ALL
SELECT ALL
SAL_RETURNES.BRANCH_ID,
SAL_RETURNES.DOCUMENT_ID,
SAL_RETURNES.DOCUMENT_NO,
SAL_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_RETURNES.DOCUMENT_DATE,
SAL_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'I' ITEMS_TYPE,
SAL_RETURNES_ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
SAL_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_RETURNES_ITEMS.TOTAL_PRICE * SAL_RETURNES.EXCHANGE_RATE  
-(((SAL_RETURNES.INVOICE_DISCOUNT / SAL_RETURNES.TOTAL_PRICE * SAL_RETURNES_ITEMS.TOTAL_PRICE ) +SAL_RETURNES_ITEMS.TOTAL_DISCOUNT) * SAL_RETURNES.EXCHANGE_RATE)) ITEM_PRICE,
-1 * (SAL_RETURNES_ITEMS.ITEM_COST * SAL_RETURNES_ITEMS.UNIT_QUANTITY * SAL_RETURNES_ITEMS.UNIT_FACTOR) ITEM_COST 
FROM SAL_RETURNES LEFT JOIN SALES_MAN ON SAL_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID  , SAL_RETURNES_ITEMS, DEPARTMENTS, CUSTOMERS, ITEMS, ITEMS_GROUPS, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_ITEMS.DOCUMENT_ID
AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_ITEMS.DEPARTMENT_ID
AND SAL_RETURNES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND SAL_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_RETURNES.CONFIRMED=1
AND SAL_RETURNES.CANCELED <> 1
AND SAL_RETURNES.TOTAL_PRICE <>0
UNION ALL
SELECT ALL
SAL_SERVICES_RETURNES.BRANCH_ID,
SAL_SERVICES_RETURNES.DOCUMENT_ID,
SAL_SERVICES_RETURNES.DOCUMENT_NO,
SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_SERVICES_RETURNES.DOCUMENT_DATE,
SAL_SERVICES_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_SERVICES_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME, 
'S' ITEMS_TYPE,
SAL_SERVICES_RETURNES_DTL.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_SERVICES_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_SERVICES_RETURNES_DTL.SERVICES_VALUE * SAL_SERVICES_RETURNES.EXCHANGE_RATE 
- ( (SAL_SERVICES_RETURNES.INVOICE_DISCOUNT /  SAL_SERVICES_RETURNES.TOTAL_PRICE * SAL_SERVICES_RETURNES_DTL.SERVICES_VALUE * SAL_SERVICES_RETURNES.EXCHANGE_RATE))) ITEM_PRICE,
0 ITEM_COST
FROM SAL_SERVICES_RETURNES LEFT JOIN SALES_MAN ON SAL_SERVICES_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID   , SAL_SERVICES_RETURNES_DTL , DEPARTMENTS, CUSTOMERS, SALES_SERVICES , CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_DTL.DOCUMENT_ID
AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_DTL.DEPARTMENT_ID
AND SAL_SERVICES_RETURNES_DTL.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_SERVICES_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_SERVICES_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_SERVICES_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_SERVICES_RETURNES.CONFIRMED=1
AND SAL_SERVICES_RETURNES.CANCELED <> 1
AND SAL_SERVICES_RETURNES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_RETURNES.BRANCH_ID,
SAL_RETURNES.DOCUMENT_ID,
SAL_RETURNES.DOCUMENT_NO,
SAL_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_RETURNES.DOCUMENT_DATE,
SAL_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'S' ITEMS_TYPE,
SAL_RETURNES_SERVICES.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_RETURNES_SERVICES.SERVICES_VALUE * SAL_RETURNES.EXCHANGE_RATE) ITEM_PRICE,
0 ITEM_COST
FROM SAL_RETURNES LEFT JOIN SALES_MAN ON SAL_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID , SAL_RETURNES_SERVICES , DEPARTMENTS, CUSTOMERS, SALES_SERVICES, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_SERVICES.DOCUMENT_ID
AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_SERVICES.DEPARTMENT_ID
AND SAL_RETURNES_SERVICES.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_RETURNES.CONFIRMED=1
AND SAL_RETURNES.CANCELED <> 1
;

CREATE INDEX MV_SAL_001 ON BI_SAL_INVOICES_ITEMS_VIEW(DOCUMENT_DATE);
CREATE INDEX MV_SAL_002 ON BI_SAL_INVOICES_ITEMS_VIEW(TO_CHAR(DOCUMENT_DATE,'MM-RRRR'));
CREATE INDEX MV_SAL_003 ON BI_SAL_INVOICES_ITEMS_VIEW(BRANCH_ID);
CREATE INDEX MV_SAL_004 ON BI_SAL_INVOICES_ITEMS_VIEW(DEPARTMENT_CODE);
CREATE INDEX MV_SAL_005 ON BI_SAL_INVOICES_ITEMS_VIEW(CUSTOMER_CODE);
CREATE INDEX MV_SAL_006 ON BI_SAL_INVOICES_ITEMS_VIEW(CUSTOMERS_GROUP_CODE);
CREATE INDEX MV_SAL_007 ON BI_SAL_INVOICES_ITEMS_VIEW(SALES_MAN_CODE);
CREATE INDEX MV_SAL_008 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_TYPE);
CREATE INDEX MV_SAL_009 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_CODE);
CREATE INDEX MV_SAL_010 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_GROUPS_CODE);
CREATE INDEX MV_SAL_011 ON BI_SAL_INVOICES_ITEMS_VIEW(TO_CHAR(DOCUMENT_DATE,'DD-MM-RRRR'));




DROP MATERIALIZED VIEW BI_INVENTORY_ITEMS_VIEW;

CREATE MATERIALIZED VIEW BI_INVENTORY_ITEMS_VIEW (BRANCH_ID,STORES_ID,STORES_CODE,STORES_PRIMARY_NAME,STORES_SECONDARY_NAME,ITEMS_ID,ITEMS_CODE,ITEMS_PRIMARY_NAME,ITEMS_SECONDARY_NAME,ITEMS_GROUPS_ID,ITEMS_GROUPS_CODE,ITEMS_GROUPS_PRIMARY_NAME,ITEMS_GROUPS_SECONDARY_NAME, ITEMS_UNITS_PRIMARY_NAME, ITEMS_UNITS_SECONDARY_NAME,MONTH_END_DATE,TOTAL_COST, CURRENT_BALANCE,
ITEM_NATURE,
ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURE_SECONDARY_NAME
)
REFRESH COMPLETE ON DEMAND 
AS
SELECT ITEMS.BRANCH_ID,
DEPARTMENTS.DEPARTMENT_ID STORES_ID,
DEPARTMENTS.USER_CODE STORES_CODE,
DEPARTMENTS.PRIMARY_NAME STORES_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME STORES_SECONDARY_NAME,
ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.ITEMS_GROUPS_ID,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
ITEMS_UNITS.PRIMARY_NAME ITEMS_UNITS_PRIMARY_NAME,
ITEMS_UNITS.SECONDARY_NAME ITEMS_UNITS_SECONDARY_NAME,
T1.MONTH_END_DATE,
T1.TOTAL_COST,
T1.CURRENT_BALANCE,
ITEMS.ITEM_NATURE,
ITEM_NATURES.PRIMARY_NAME ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURES.SECONDARY_NAME ITEM_NATURE_SECONDARY_NAME
FROM (
WITH ITEMS_TRANSACTIONS_MAX
AS 
(  SELECT STORES_ID,
   ITEMS_ID,
   LAST_DAY (TRANSACTION_DATE) MONTH_END_DATE,
   MAX (TRANSACTION_DATE) TRANSACTION_DATE --, MAX(ITEMS_TRANSACTIONS_ID) ITEMS_TRANSACTIONS_ID
   FROM ITEMS_TRANSACTIONS
   GROUP BY STORES_ID, ITEMS_ID, LAST_DAY (TRANSACTION_DATE)
),
ITEMS_TRANSACTIONS_MAX_TR
AS 
(  SELECT ITEMS_TRANSACTIONS_MAX.STORES_ID,
   ITEMS_TRANSACTIONS_MAX.ITEMS_ID,
   ITEMS_TRANSACTIONS_MAX.MONTH_END_DATE,
   MAX (ITEMS_TRANSACTIONS.ITEMS_TRANSACTIONS_ID)
   ITEMS_TRANSACTIONS_ID
   FROM ITEMS_TRANSACTIONS_MAX, ITEMS_TRANSACTIONS
   WHERE     ITEMS_TRANSACTIONS_MAX.STORES_ID =
   ITEMS_TRANSACTIONS.STORES_ID
   AND ITEMS_TRANSACTIONS_MAX.ITEMS_ID =
   ITEMS_TRANSACTIONS.ITEMS_ID
   AND ITEMS_TRANSACTIONS_MAX.TRANSACTION_DATE =
   ITEMS_TRANSACTIONS.TRANSACTION_DATE
   GROUP BY ITEMS_TRANSACTIONS_MAX.STORES_ID,
   ITEMS_TRANSACTIONS_MAX.ITEMS_ID,
   ITEMS_TRANSACTIONS_MAX.MONTH_END_DATE
)
SELECT ITEMS_TRANSACTIONS.STORES_ID,
ITEMS_TRANSACTIONS.ITEMS_ID,
ITEMS_TRANSACTIONS.CURRENT_BALANCE,
ITEMS_TRANSACTIONS.CURRENT_BALANCE
* ITEMS_TRANSACTIONS.AVERAGE_COST
TOTAL_COST,
ITEMS_TRANSACTIONS_MAX_TR.MONTH_END_DATE
FROM ITEMS_TRANSACTIONS_MAX_TR, ITEMS_TRANSACTIONS
WHERE     ITEMS_TRANSACTIONS_MAX_TR.STORES_ID = ITEMS_TRANSACTIONS.STORES_ID
AND ITEMS_TRANSACTIONS_MAX_TR.ITEMS_ID = ITEMS_TRANSACTIONS.ITEMS_ID
AND ITEMS_TRANSACTIONS_MAX_TR.ITEMS_TRANSACTIONS_ID = ITEMS_TRANSACTIONS.ITEMS_TRANSACTIONS_ID) T1,
STORES_ITEMS ST1,
ITEMS LEFT JOIN CODES ITEMS_UNITS ON (ITEMS.UNITS_ID = ITEMS_UNITS.CODES_ID), 
ITEMS_GROUPS,
DEPARTMENTS,
CODES_SYS ITEM_NATURES 
WHERE     ST1.ITEMS_ID = ITEMS.ITEMS_ID
AND DEPARTMENTS.DEPARTMENT_ID = ST1.STORES_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND T1.STORES_ID = ST1.STORES_ID
AND T1.ITEMS_ID = ST1.ITEMS_ID
AND (ITEMS.ITEM_NATURE = ITEM_NATURES.CODES_SYS_ID AND ITEM_NATURES.CODE_TYPES_ID = 14)
;




CREATE INDEX MV_STK_001 ON BI_INVENTORY_ITEMS_VIEW(MONTH_END_DATE);
CREATE INDEX MV_STK_002 ON BI_INVENTORY_ITEMS_VIEW(TO_CHAR(MONTH_END_DATE,'MM-RRRR'));
CREATE INDEX MV_STK_003 ON BI_INVENTORY_ITEMS_VIEW(TO_CHAR(MONTH_END_DATE,'DD-MM-RRRR'));
CREATE INDEX MV_STK_004 ON BI_INVENTORY_ITEMS_VIEW(BRANCH_ID);
CREATE INDEX MV_STK_005 ON BI_INVENTORY_ITEMS_VIEW(STORES_ID);
CREATE INDEX MV_STK_006 ON BI_INVENTORY_ITEMS_VIEW(STORES_CODE);
CREATE INDEX MV_STK_007 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_ID);
CREATE INDEX MV_STK_008 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_CODE);
CREATE INDEX MV_STK_009 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_GROUPS_ID);
CREATE INDEX MV_STK_010 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_GROUPS_CODE);
CREATE UNIQUE INDEX MV_STK_011 ON BI_INVENTORY_ITEMS_VIEW(STORES_ID, ITEMS_ID, MONTH_END_DATE);
CREATE INDEX MV_STK_013 ON BI_INVENTORY_ITEMS_VIEW(BRANCH_ID,STORES_ID, ITEMS_ID, MONTH_END_DATE);

ALTER TABLE MONTH_TABLE ADD CONSTRAINT MONTH_TABLE_PK PRIMARY KEY(NONTH_NAME);


------------
DROP MATERIALIZED VIEW BI_INVENTORY_ITEMS_INOUT_VIEW;

CREATE MATERIALIZED VIEW BI_INVENTORY_ITEMS_INOUT_VIEW (BRANCH_ID,STORES_ID,STORES_CODE,STORES_PRIMARY_NAME,STORES_SECONDARY_NAME,ITEMS_ID,ITEMS_CODE,ITEMS_PRIMARY_NAME,ITEMS_SECONDARY_NAME,ITEMS_GROUPS_ID,ITEMS_GROUPS_CODE,ITEMS_GROUPS_PRIMARY_NAME,ITEMS_GROUPS_SECONDARY_NAME, ITEMS_UNITS_PRIMARY_NAME, ITEMS_UNITS_SECONDARY_NAME,
BASE_DEPARTMENT_ID,
BASE_DOCUMENT_TYPES_ID,
DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES_SECONDARY_NAME,
BASE_DOCUMENT_ID,
BASE_DOCUMENT_NO,
TRANSACTION_DATE,
CALC_TYPE,
QTY,
CURRENT_BALANCE,
QTY_COST,
AVERAGE_COST,
ITEM_NATURE,
ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURE_SECONDARY_NAME
)
AS
SELECT ITEMS.BRANCH_ID,
DEPARTMENTS.DEPARTMENT_ID STORES_ID,
DEPARTMENTS.USER_CODE STORES_CODE,
DEPARTMENTS.PRIMARY_NAME STORES_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME STORES_SECONDARY_NAME,
ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.ITEMS_GROUPS_ID,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
ITEMS_UNITS.PRIMARY_NAME ITEMS_UNITS_PRIMARY_NAME,
ITEMS_UNITS.SECONDARY_NAME ITEMS_UNITS_SECONDARY_NAME,
ITEMS_TRANSACTIONS.BASE_DEPARTMENT_ID,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_ID,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_NO,
ITEMS_TRANSACTIONS.TRANSACTION_DATE,
ITEMS_TRANSACTIONS.CALC_TYPE,
ITEMS_TRANSACTIONS.QTY,
ITEMS_TRANSACTIONS.CURRENT_BALANCE,
ITEMS_TRANSACTIONS.QTY_COST,
ITEMS_TRANSACTIONS.AVERAGE_COST,
ITEMS.ITEM_NATURE,
ITEM_NATURES.PRIMARY_NAME ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURES.SECONDARY_NAME ITEM_NATURE_SECONDARY_NAME
FROM STORES_ITEMS ST1,
ITEMS LEFT JOIN CODES ITEMS_UNITS ON (ITEMS.UNITS_ID = ITEMS_UNITS.CODES_ID), 
ITEMS_GROUPS,
DEPARTMENTS, ITEMS_TRANSACTIONS,
DOCUMENT_TYPES,
CODES_SYS ITEM_NATURES
WHERE     ST1.ITEMS_ID = ITEMS.ITEMS_ID
AND DEPARTMENTS.DEPARTMENT_ID = ST1.STORES_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND ITEMS_TRANSACTIONS.STORES_ID = ST1.STORES_ID
AND ITEMS_TRANSACTIONS.ITEMS_ID = ST1.ITEMS_ID
AND DOCUMENT_TYPES.DOCUMENT_TYPES_ID = ITEMS_TRANSACTIONS.BASE_DOCUMENT_TYPES_ID
AND (ITEMS.ITEM_NATURE = ITEM_NATURES.CODES_SYS_ID AND ITEM_NATURES.CODE_TYPES_ID = 14)
;


CREATE INDEX MV_INOUT_STK_001 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TRANSACTION_DATE);
CREATE INDEX MV_INOUT_STK_002 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TO_CHAR(TRANSACTION_DATE,'MM-RRRR'));
CREATE INDEX MV_INOUT_STK_003 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TO_CHAR(TRANSACTION_DATE,'DD-MM-RRRR'));
CREATE INDEX MV_INOUT_STK_004 ON BI_INVENTORY_ITEMS_INOUT_VIEW(BRANCH_ID);
CREATE INDEX MV_INOUT_STK_005 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_ID);
CREATE INDEX MV_INOUT_STK_006 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_CODE);
CREATE INDEX MV_INOUT_STK_007 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_ID);
CREATE INDEX MV_INOUT_STK_008 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_CODE);
CREATE INDEX MV_INOUT_STK_009 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_GROUPS_ID);
CREATE INDEX MV_INOUT_STK_010 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_GROUPS_CODE);
CREATE INDEX MV_INOUT_STK_011 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_ID, ITEMS_ID, TRANSACTION_DATE);
CREATE INDEX MV_INOUT_STK_013 ON BI_INVENTORY_ITEMS_INOUT_VIEW(BRANCH_ID,STORES_ID, ITEMS_ID, TRANSACTION_DATE);


----------


DROP MATERIALIZED VIEW BI_PAYROLL_VIEW;

CREATE MATERIALIZED VIEW BI_PAYROLL_VIEW
(
   BRANCH_ID,
   EMPLOYEE_ID,
   EMPLOYEE_TYPE,
   EMPLOYEE_TYPE_PRIMARY_NAME,
   EMPLOYEE_TYPE_SECONDARY_NAME,
   EMPLOYEE_CODE,
   EMPLOYEE_PRIMARY_NAME,
   EMPLOYEE_SECONDARY_NAME,
   EMP_DEPARTMENT_ID,
   EMP_DEPARTMENT_CODE,
   EMP_DEPARTMENT_PRIMARY_NAME,
   EMP_DEPARTMENT_SECONDARY_NAME,
   CITIZEN,
   EMP_JOB_ID,
   EMP_JOB_CODE,
   EMP_JOB_PRIMARY_NAME,
   EMP_JOB_SECONDARY_NAME,
   EMP_GRADES_ID,
   EMP_GRADES_USER_CODE,
   EMP_GRADES_PRIMARY_NAME,
   EMP_GRADES_SECONDARY_NAME,
   GENDER,
   GENDER_PRIMARY_NAME,
   GENDER_SECONDARY_NAME,
   NATIONALITY,
   NATIONALITY_PRIMARY_NAME,
   NATIONALITY_SECONDARY_NAME,
   SOCIAL_STATUS,
   SOCIAL_STATUS_PRIMARY_NAME,
   SOCIAL_STATUS_SECONDARY_NAME,
   MONTH,
   ENTITLE_DEDUCT_ID,
   ENTITLE_DEDUCT_CODE,
   ENTITLE_DEDUCT_PRIMARY_NAME,
   ENTITLE_DEDUCT_SECONDARY_NAME,
   ENTITLE_DEDUCT_FLAG,
   SALARY
)
REFRESH COMPLETE ON DEMAND AS
  SELECT ALL
          EMPLOYEES.BRANCH_ID,
          EMPLOYEES.EMPLOYEE_ID,
          EMPLOYEES.EMPLOYEE_TYPE,
          EMPLOYEE_TYPES.PRIMARY_NAME EMPLOYEE_TYPE_PRIMARY_NAME,
          EMPLOYEE_TYPES.SECONDARY_NAME EMPLOYEE_TYPE_SECONDARY_NAME,
          EMPLOYEES.USER_CODE EMPLOYEE_CODE,
          EMPLOYEES.PRIMARY_NAME EMPLOYEE_PRIMARY_NAME,
          EMPLOYEES.SECONDARY_NAME EMPLOYEE_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.EMP_DEPARTMENT_ID,
          EMP_DEPARTMENT.USER_CODE EMP_DEPARTMENT_CODE,
          EMP_DEPARTMENT.PRIMARY_NAME EMP_DEPARTMENT_PRIMARY_NAME,
          EMP_DEPARTMENT.SECONDARY_NAME EMP_DEPARTMENT_SECONDARY_NAME,
          EMPLOYEES.CITIZEN,
          EMPLOYEE_MONTH_TRANS.EMP_JOB_ID,
          EMP_JOBS.USER_CODE EMP_JOBS_CODE,
          EMP_JOBS.PRIMARY_NAME EMP_JOBS_PRIMARY_NAME,
          EMP_JOBS.SECONDARY_NAME EMP_JOBS_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.EMP_GRADES_ID,
          EMP_GRADES.USER_CODE EMP_GRADES_USER_CODE,
          EMP_GRADES.PRIMARY_NAME EMP_GRADES_PRIMARY_NAME,
          EMP_GRADES.SECONDARY_NAME EMP_GRADES_SECONDARY_NAME,
          EMPLOYEES.GENDER,
          GENDERS.PRIMARY_NAME GENDER_PRIMARY_NAME,
          GENDERS.SECONDARY_NAME GENDER_SECONDARY_NAME,
          EMPLOYEES.NATIONALITY,
          NATIONALITIES.PRIMARY_NAME NATIONALITY_PRIMARY_NAME,
          NATIONALITIES.SECONDARY_NAME NATIONALITY_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.SOCIAL_STATUS,
          SOCIAL_STATUS.PRIMARY_NAME SOCIAL_STATUS_PRIMARY_NAME,
          SOCIAL_STATUS.SECONDARY_NAME SOCIAL_STATUS_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.MONTH,
          EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_ID,
          ENTITLE_DEDUCT.USER_CODE ENTITLE_DEDUCT_CODE,
          ENTITLE_DEDUCT.PRIMARY_NAME ENTITLE_DEDUCT_PRIMARY_NAME,
          ENTITLE_DEDUCT.SECONDARY_NAME ENTITLE_DEDUCT_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG,
          DECODE (EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG, 1, EMPLOYEE_MONTH_TRANS.AMOUNT, -1 * EMPLOYEE_MONTH_TRANS.AMOUNT) SALARY
     FROM EMPLOYEES 
          LEFT JOIN CODES_SYS EMPLOYEE_TYPES ON (EMPLOYEES.EMPLOYEE_TYPE = EMPLOYEE_TYPES.CODES_SYS_ID AND EMPLOYEE_TYPES.CODE_TYPES_ID = 74)
          LEFT JOIN CODES_SYS GENDERS ON (EMPLOYEES.GENDER = GENDERS.CODES_SYS_ID AND GENDERS.CODE_TYPES_ID = 59)
          LEFT JOIN CODES NATIONALITIES ON (EMPLOYEES.NATIONALITY = NATIONALITIES.CODES_ID),
          EMP_DEPARTMENT,
          EMP_JOBS,
          EMPLOYEE_MONTH_TRANS
          LEFT JOIN EMP_GRADES ON (EMP_GRADES.EMP_GRADES_ID = EMPLOYEE_MONTH_TRANS.EMP_GRADES_ID )
          LEFT JOIN CODES SOCIAL_STATUS ON (EMPLOYEE_MONTH_TRANS.SOCIAL_STATUS = SOCIAL_STATUS.CODES_ID),
          ENTITLE_DEDUCT
    WHERE     EMPLOYEES.EMPLOYEE_ID = EMPLOYEE_MONTH_TRANS.EMPLOYEE_ID
          AND EMPLOYEE_MONTH_TRANS.EMP_DEPARTMENT_ID =
                 EMP_DEPARTMENT.EMP_DEPARTMENT_ID
          AND EMPLOYEE_MONTH_TRANS.EMP_JOB_ID = EMP_JOBS.EMP_JOB_ID
          AND EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_ID =
                 ENTITLE_DEDUCT.ENTITLE_DEDUCT_ID
          AND EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG =
                 ENTITLE_DEDUCT.ENTITLE_DEDUCT_FLAG;


CREATE INDEX MV_PAY_001 ON BI_PAYROLL_VIEW(MONTH);
CREATE INDEX MV_PAY_002 ON BI_PAYROLL_VIEW(TO_CHAR(MONTH,'RRRR'));
CREATE INDEX MV_PAY_003 ON BI_PAYROLL_VIEW(BRANCH_ID);
CREATE INDEX MV_PAY_004 ON BI_PAYROLL_VIEW(EMPLOYEE_ID);
CREATE INDEX MV_PAY_005 ON BI_PAYROLL_VIEW(EMPLOYEE_CODE);


DROP MATERIALIZED VIEW BI_EMPLOYEES_VIEW;

CREATE MATERIALIZED VIEW BI_EMPLOYEES_VIEW
(
   BRANCH_ID,
   EMPLOYEE_ID,
   EMPLOYEE_TYPE,
   EMPLOYEE_TYPE_PRIMARY_NAME,
   EMPLOYEE_TYPE_SECONDARY_NAME,
   EMPLOYEE_CODE,
   EMPLOYEE_PRIMARY_NAME,
   EMPLOYEE_SECONDARY_NAME,
   EMP_DEPARTMENT_ID,
   EMP_DEPARTMENT_CODE,
   EMP_DEPARTMENT_PRIMARY_NAME,
   EMP_DEPARTMENT_SECONDARY_NAME,
   CITIZEN,
   EMP_JOB_ID,
   EMP_JOB_CODE,
   EMP_JOB_PRIMARY_NAME,
   EMP_JOB_SECONDARY_NAME,
   EMP_GRADES_ID,
   EMP_GRADES_USER_CODE,
   EMP_GRADES_PRIMARY_NAME,
   EMP_GRADES_SECONDARY_NAME,
   GENDER,
   GENDER_PRIMARY_NAME,
   GENDER_SECONDARY_NAME,
   NATIONALITY,
   NATIONALITY_PRIMARY_NAME,
   NATIONALITY_SECONDARY_NAME,
   SOCIAL_STATUS,
   SOCIAL_STATUS_PRIMARY_NAME,
   SOCIAL_STATUS_SECONDARY_NAME,
   TERMINATION_DATE,
   BIRTHDATE,
   EMP_STATUS,
   PASSPORT_NO,
   PASSPORT_ISSUE_DATE,
   PASSPORT_END_DATE,
   DRIVE_LICENSE_NO,
   DRIVE_LICENSE_ISSUE_DATE,
   DRIVE_LICENSE_END_DATE,
   RESIDENCE_NO,
   RESIDENCE_ISSUE_DATE,
   RESIDENCE_END_DATE,
   HEALTH_NO,
   HEALTH_ISSUE_DATE,
   HEALTH_END_DATE,
   INSURANCE_NO,
   INSURANCE_ISSUE_DATE,
   INSURANCE_END_DATE,
   EMP_NATIONAL_NO,
   EMP_NATIONAL_ISSUE_DATE,
   EMP_NATIONAL_END_DATE,
   EMP_CONTRACT,
   EMP_CONTRACT_ISSUE_DATE,
   EMP_CONTRACT_END_DATE,
   HEALTH_CERTIFICATE,
   HEALTH_CERTIFICATE_ISSUE_DATE,
   HEALTH_CERTIFICATE_END_DATE,
   VISA_CARD_NO,
   VISA_CARD_ISSUE_DATE,
   VISA_CARD_END_DATE,
   LOAN_NUMBER,
   LOAN_START_DATE,
   LOAN_END_DATE,
   HIREDATE,
   MOBILE
)
REFRESH COMPLETE ON DEMAND AS
  SELECT ALL
          EMPLOYEES.BRANCH_ID,
          EMPLOYEES.EMPLOYEE_ID,
          EMPLOYEES.EMPLOYEE_TYPE,
          EMPLOYEE_TYPES.PRIMARY_NAME EMPLOYEE_TYPE_PRIMARY_NAME,
          EMPLOYEE_TYPES.SECONDARY_NAME EMPLOYEE_TYPE_SECONDARY_NAME,
          EMPLOYEES.USER_CODE EMPLOYEE_CODE,
          EMPLOYEES.PRIMARY_NAME EMPLOYEE_PRIMARY_NAME,
          EMPLOYEES.SECONDARY_NAME EMPLOYEE_SECONDARY_NAME,
          EMPLOYEES.EMP_DEPARTMENT_ID,
          EMP_DEPARTMENT.USER_CODE EMP_DEPARTMENT_CODE,
          EMP_DEPARTMENT.PRIMARY_NAME EMP_DEPARTMENT_PRIMARY_NAME,
          EMP_DEPARTMENT.SECONDARY_NAME EMP_DEPARTMENT_SECONDARY_NAME,
          EMPLOYEES.CITIZEN,
          EMPLOYEES.EMP_JOB_ID,
          EMP_JOBS.USER_CODE EMP_JOBS_CODE,
          EMP_JOBS.PRIMARY_NAME EMP_JOBS_PRIMARY_NAME,
          EMP_JOBS.SECONDARY_NAME EMP_JOBS_SECONDARY_NAME,
          EMPLOYEES.EMP_GRADES_ID,
          EMP_GRADES.USER_CODE EMP_GRADES_USER_CODE,
          EMP_GRADES.PRIMARY_NAME EMP_GRADES_PRIMARY_NAME,
          EMP_GRADES.SECONDARY_NAME EMP_GRADES_SECONDARY_NAME,
          EMPLOYEES.GENDER,
          GENDERS.PRIMARY_NAME GENDER_PRIMARY_NAME,
          GENDERS.SECONDARY_NAME GENDER_SECONDARY_NAME,
          EMPLOYEES.NATIONALITY,
          NATIONALITIES.PRIMARY_NAME NATIONALITY_PRIMARY_NAME,
          NATIONALITIES.SECONDARY_NAME NATIONALITY_SECONDARY_NAME,
          EMPLOYEES.SOCIAL_STATUS,
          SOCIAL_STATUS.PRIMARY_NAME SOCIAL_STATUS_PRIMARY_NAME,
          SOCIAL_STATUS.SECONDARY_NAME SOCIAL_STATUS_SECONDARY_NAME,
          EMPLOYEES.TERMINATION_DATE,
          EMPLOYEES.BIRTHDATE,
          EMPLOYEES.EMP_STATUS,
          EMPLOYEES.PASSPORT_NO,
          EMPLOYEES.PASSPORT_ISSUE_DATE,
          EMPLOYEES.PASSPORT_END_DATE,
          EMPLOYEES.DRIVE_LICENSE_NO,
          EMPLOYEES.DRIVE_LICENSE_ISSUE_DATE,
          EMPLOYEES.DRIVE_LICENSE_END_DATE,
          EMPLOYEES.RESIDENCE_NO,
          EMPLOYEES.RESIDENCE_ISSUE_DATE,
          EMPLOYEES.RESIDENCE_END_DATE,
          EMPLOYEES.HEALTH_NO,
          EMPLOYEES.HEALTH_ISSUE_DATE,
          EMPLOYEES.HEALTH_END_DATE,
          EMPLOYEES.INSURANCE_NO,
          EMPLOYEES.INSURANCE_ISSUE_DATE,
          EMPLOYEES.INSURANCE_END_DATE,
          EMPLOYEES.EMP_NATIONAL_NO,
          EMPLOYEES.EMP_NATIONAL_ISSUE_DATE,
          EMPLOYEES.EMP_NATIONAL_END_DATE,
          EMPLOYEES.EMP_CONTRACT,
          EMPLOYEES.EMP_CONTRACT_ISSUE_DATE,
          EMPLOYEES.EMP_CONTRACT_END_DATE,
          EMPLOYEES.HEALTH_CERTIFICATE,
          EMPLOYEES.HEALTH_CERTIFICATE_ISSUE_DATE,
          EMPLOYEES.HEALTH_CERTIFICATE_END_DATE,
          EMPLOYEES.VISA_CARD_NO,
          EMPLOYEES.VISA_CARD_ISSUE_DATE,
          EMPLOYEES.VISA_CARD_END_DATE,
          EMPLOYEES.LOAN_NUMBER,
          EMPLOYEES.LOAN_START_DATE,
          EMPLOYEES.LOAN_END_DATE,
          EMPLOYEES.HIREDATE,
          NVL(EMPLOYEES.BUSINESS_MOBILE, EMPLOYEES.PERSONAL_PHONE) MOBILE
     FROM EMPLOYEES 
          LEFT JOIN CODES_SYS EMPLOYEE_TYPES ON (EMPLOYEES.EMPLOYEE_TYPE = EMPLOYEE_TYPES.CODES_SYS_ID AND EMPLOYEE_TYPES.CODE_TYPES_ID = 74)
          LEFT JOIN CODES_SYS GENDERS ON (EMPLOYEES.GENDER = GENDERS.CODES_SYS_ID AND GENDERS.CODE_TYPES_ID = 59)
          LEFT JOIN CODES NATIONALITIES ON (EMPLOYEES.NATIONALITY = NATIONALITIES.CODES_ID)
          LEFT JOIN EMP_GRADES ON (EMP_GRADES.EMP_GRADES_ID = EMPLOYEES.EMP_GRADES_ID )
          LEFT JOIN CODES SOCIAL_STATUS ON (EMPLOYEES.SOCIAL_STATUS = SOCIAL_STATUS.CODES_ID),
          EMP_DEPARTMENT,
          EMP_JOBS          
    WHERE EMPLOYEES.EMP_DEPARTMENT_ID = EMP_DEPARTMENT.EMP_DEPARTMENT_ID
    AND EMPLOYEES.EMP_JOB_ID = EMP_JOBS.EMP_JOB_ID;


CREATE INDEX MV_EMP_001 ON BI_EMPLOYEES_VIEW(BRANCH_ID);
CREATE INDEX MV_EMP_002 ON BI_EMPLOYEES_VIEW(EMPLOYEE_ID);
CREATE INDEX MV_EMP_003 ON BI_EMPLOYEES_VIEW(EMPLOYEE_CODE);
CREATE INDEX MV_EMP_004 ON BI_EMPLOYEES_VIEW(EMPLOYEE_TYPE);
CREATE INDEX MV_EMP_005 ON BI_EMPLOYEES_VIEW(EMP_DEPARTMENT_CODE);
CREATE INDEX MV_EMP_006 ON BI_EMPLOYEES_VIEW(EMP_JOB_CODE);
CREATE INDEX MV_EMP_007 ON BI_EMPLOYEES_VIEW(EMP_STATUS);


CREATE OR REPLACE FUNCTION DECR (INPUT_STR IN VARCHAR2)RETURN VARCHAR2 IS
 CRNT_CHR   VARCHAR2(2) ;                             -- CONCURRENT CHARACTER .
 REVRS_STR  VARCHAR2(2000);
 TEMPSTR    VARCHAR2(2000) := NULL;
 OUTPUT_STR VARCHAR2(2000);
 EN_KEY     NUMBER(1) := 1;
 RSLT       VARCHAR2(2000);
 INPUT      VARCHAR2(2000);
BEGIN
  INPUT := INPUT_STR;

 IF INPUT_STR IS NULL THEN
   RETURN(NULL);
 END IF;

 TEMPSTR := NULL;
 REVRS_STR := NULL;

   FOR I IN  1..LENGTH(INPUT_STR)
  LOOP
    CRNT_CHR := SUBSTR(INPUT_STR,I,1);
   TEMPSTR := TEMPSTR||CHR((ASCII(CRNT_CHR))-I);
  END LOOP;

 FOR I IN REVERSE 1..LENGTH(TEMPSTR)
 LOOP
  CRNT_CHR := SUBSTR(TEMPSTR,I,1);
  IF ASCII(CRNT_CHR) = 32 THEN CRNT_CHR := '}{'; END IF;
  REVRS_STR := REVRS_STR||CRNT_CHR;
  END LOOP;

   FOR I IN  1..LENGTH(REVRS_STR)
  LOOP
    CRNT_CHR := SUBSTR(REVRS_STR,I,1);
    IF CRNT_CHR = '{' THEN
      IF  SUBSTR(REVRS_STR,I+1,1) = '}' THEN CRNT_CHR := NULL;
      END IF;
    END IF;

    IF CRNT_CHR = '}' THEN
      IF  SUBSTR(REVRS_STR,I-1,1) = '{' THEN CRNT_CHR := ' ';
      END IF;
    END IF;

   RSLT := RSLT||CRNT_CHR;
  END LOOP;

    RSLT := SUBSTR(RSLT,1,LENGTH(RSLT));
 RETURN(RSLT);
END;
/



CREATE OR REPLACE FUNCTION AUTHENTICATE_USER
  (p_username in varchar2,
   p_password in varchar2)
return boolean
is
CURSOR C1 IS
	SELECT COUNT(1)
	FROM USERS
	WHERE UPPER(USER_NAME) = UPPER(p_username);
V_COUNT NUMBER;

CURSOR C2 IS
	SELECT USER_PASSWORD, USER_PASSWORD_EXPIRY_DATE, ACTIVE, JOB_ID
	FROM USERS
	WHERE UPPER(USER_NAME) = UPPER(p_username);
V_C2 C2%ROWTYPE;
begin
  v_count := 0;

  OPEN C1;
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT <> 1 THEN
        apex_error.add_error(
            p_message          =>  'Invalid user name',
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

  END IF;


  OPEN C2;
  FETCH C2 INTO V_C2;
  CLOSE C2;

  IF UPPER(p_password) <> UPPER(DECR(V_C2.USER_PASSWORD)) THEN
        apex_error.add_error(
            p_message          => 'Invalid Password',
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

  END IF;

 return(true);
end;
/




  CREATE TABLE "NAMES_ENGLISH_ARABIC" 
   (	"NAME_ID" NUMBER, 
	"PRIMARY_NAME" VARCHAR2(100), 
	"SECONDARY_NAME" VARCHAR2(100), 
	 PRIMARY KEY ("NAME_ID")
  USING INDEX  ENABLE
   ) ;




  CREATE TABLE "JOURNALS_ENTRIES_BALANCE_G" 
   (	"BASE_DOCUMENT_TYPES_ID" NUMBER(15,0), 
	"DOCUMENT_DATE" DATE NOT NULL ENABLE, 
	"JOURNAL_TYPES_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"BRANCH_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"ACCOUNT_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"CURRENCIES_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"EXCHANGE_RATE" NUMBER(17,5) NOT NULL ENABLE, 
	"CR_DEBIT" NUMBER(17,5) NOT NULL ENABLE, 
	"CR_CREDIT" NUMBER(17,5) NOT NULL ENABLE, 
	"COST_CENTER_ID" NUMBER(15,0), 
	"ACTIVITY_ID" NUMBER(15,0), 
	"CONFIRMED" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"CANCELED" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"SETL_FOR" NUMBER(15,0), 
	"SETL_REF" NUMBER(15,0), 
	"DOCUMENT_MONTH" VARCHAR2(25), 
	"DOCUMENT_YEAR" VARCHAR2(25)
   ) ;

  CREATE INDEX "ACT_JOUR_ENT_BALG_IDX1" ON "JOURNALS_ENTRIES_BALANCE_G" ("ACTIVITY_ID") 
  ;

  CREATE INDEX "JECB_IDX_01" ON "JOURNALS_ENTRIES_BALANCE_G" ("ACCOUNT_ID") 
  ;

  CREATE INDEX "JECB_IDX_02" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_DATE") 
  ;

  CREATE INDEX "JECB_IDX_03" ON "JOURNALS_ENTRIES_BALANCE_G" ("JOURNAL_TYPES_ID") 
  ;

  CREATE INDEX "JECB_IDX_04" ON "JOURNALS_ENTRIES_BALANCE_G" ("COST_CENTER_ID") 
  ;

  CREATE UNIQUE INDEX "JECB_MAIN_IDX_01" ON "JOURNALS_ENTRIES_BALANCE_G" ("BASE_DOCUMENT_TYPES_ID", "DOCUMENT_DATE", "JOURNAL_TYPES_ID", "BRANCH_ID", "ACCOUNT_ID", "CURRENCIES_ID", "EXCHANGE_RATE", "COST_CENTER_ID", "ACTIVITY_ID", "CONFIRMED", "CANCELED", "SETL_FOR", "SETL_REF", "DOCUMENT_MONTH", "DOCUMENT_YEAR") 
  ;

  CREATE INDEX "SETL_REF_JECG_IDX1" ON "JOURNALS_ENTRIES_BALANCE_G" ("SETL_REF") 
  ;


  CREATE INDEX "ACT_JOUR_ENT_BAL_IDX1" ON "JOURNALS_ENTRIES_BALANCE" ("ACTIVITY_ID") 
  ;

  CREATE INDEX "JEB_MONTH01" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_MONTH") 
  ;

  CREATE INDEX "JEB_YEAR01" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_YEAR") 
  ;

  CREATE INDEX "JEC_IDX_01" ON "JOURNALS_ENTRIES_BALANCE" ("ACCOUNT_ID") 
  ;

  CREATE INDEX "JEC_IDX_02" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_DATE") 
  ;

  CREATE INDEX "JEC_IDX_03" ON "JOURNALS_ENTRIES_BALANCE" ("JOURNAL_TYPES_ID") 
  ;

  CREATE INDEX "JEC_IDX_04" ON "JOURNALS_ENTRIES_BALANCE" ("COST_CENTER_ID") 
  ;

  CREATE INDEX "SETL_REF_IDX1" ON "JOURNALS_ENTRIES_BALANCE" ("SETL_REF") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "JOURNALS_ENTRIES_BALANCE_TRI" 
AFTER INSERT OR UPDATE OR DELETE ON JOURNALS_ENTRIES_BALANCE
FOR EACH ROW
DECLARE
V_JOURNAL_TYPES_ID NUMBER;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;
V_COUNT NUMBER;
BEGIN
    IF INSERTING THEN
        
        V_COUNT := 0;
        
        SELECT COUNT(*)
        INTO V_COUNT
        FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :NEW.BRANCH_ID              
        AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
        AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :NEW.CONFIRMED              
        AND     CANCELED = :NEW.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
                
        
        IF V_COUNT = 0 THEN
            INSERT INTO JOURNALS_ENTRIES_BALANCE_G
                (
                BASE_DOCUMENT_TYPES_ID,  
                DOCUMENT_DATE         ,  
                JOURNAL_TYPES_ID      , 
                BRANCH_ID             ,  
                ACCOUNT_ID            ,  
                CURRENCIES_ID         ,  
                EXCHANGE_RATE         ,  
                CR_DEBIT              ,  
                CR_CREDIT             ,  
                COST_CENTER_ID        ,  
                ACTIVITY_ID           , 
                CONFIRMED             ,
                CANCELED              ,
                SETL_FOR              , 
                SETL_REF              ,
                DOCUMENT_MONTH        ,
                DOCUMENT_YEAR        
                )
            VALUES                    
                (
                :NEW.BASE_DOCUMENT_TYPES_ID,  
                :NEW.DOCUMENT_DATE         ,  
                :NEW.JOURNAL_TYPES_ID      , 
                :NEW.BRANCH_ID             ,  
                :NEW.ACCOUNT_ID            ,  
                :NEW.CURRENCIES_ID         ,  
                :NEW.EXCHANGE_RATE         ,  
                :NEW.CR_DEBIT              ,  
                :NEW.CR_CREDIT             ,  
                :NEW.COST_CENTER_ID        ,  
                :NEW.ACTIVITY_ID           , 
                :NEW.CONFIRMED             ,
                :NEW.CANCELED              ,
                :NEW.SETL_FOR              , 
                :NEW.SETL_REF              ,
                :NEW.DOCUMENT_MONTH        ,
                :NEW.DOCUMENT_YEAR        
                );
        ELSE
            UPDATE JOURNALS_ENTRIES_BALANCE_G
            SET     CR_DEBIT = NVL(CR_DEBIT,0) + NVL(:NEW.CR_DEBIT,0),
                    CR_CREDIT = NVL(CR_CREDIT,0) + NVL(:NEW.CR_CREDIT,0)
            WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
            AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
            AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
            AND     BRANCH_ID = :NEW.BRANCH_ID              
            AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
            AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
            AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
            AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
            AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
            AND     CONFIRMED = :NEW.CONFIRMED              
            AND     CANCELED = :NEW.CANCELED               
            AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
            AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
            AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
            AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
        END IF;


    ELSIF UPDATING THEN
        UPDATE JOURNALS_ENTRIES_BALANCE_G
        SET     CR_DEBIT = NVL(CR_DEBIT,0) - NVL(:OLD.CR_DEBIT,0),
                CR_CREDIT = NVL(CR_CREDIT,0) - NVL(:OLD.CR_CREDIT,0)
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10);

        DELETE FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10)
        AND     CR_DEBIT = 0
        AND     CR_CREDIT = 0;

        
        V_COUNT := 0;
        
        SELECT COUNT(*)
        INTO V_COUNT
        FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :NEW.BRANCH_ID              
        AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
        AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :NEW.CONFIRMED              
        AND     CANCELED = :NEW.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
                
        
        IF V_COUNT = 0 THEN
            INSERT INTO JOURNALS_ENTRIES_BALANCE_G
                (
                BASE_DOCUMENT_TYPES_ID,  
                DOCUMENT_DATE         ,  
                JOURNAL_TYPES_ID      , 
                BRANCH_ID             ,  
                ACCOUNT_ID            ,  
                CURRENCIES_ID         ,  
                EXCHANGE_RATE         ,  
                CR_DEBIT              ,  
                CR_CREDIT             ,  
                COST_CENTER_ID        ,  
                ACTIVITY_ID           , 
                CONFIRMED             ,
                CANCELED              ,
                SETL_FOR              , 
                SETL_REF              ,
                DOCUMENT_MONTH        ,
                DOCUMENT_YEAR        
                )
            VALUES                    
                (
                :NEW.BASE_DOCUMENT_TYPES_ID,  
                :NEW.DOCUMENT_DATE         ,  
                :NEW.JOURNAL_TYPES_ID      , 
                :NEW.BRANCH_ID             ,  
                :NEW.ACCOUNT_ID            ,  
                :NEW.CURRENCIES_ID         ,  
                :NEW.EXCHANGE_RATE         ,  
                :NEW.CR_DEBIT              ,  
                :NEW.CR_CREDIT             ,  
                :NEW.COST_CENTER_ID        ,  
                :NEW.ACTIVITY_ID           , 
                :NEW.CONFIRMED             ,
                :NEW.CANCELED              ,
                :NEW.SETL_FOR              , 
                :NEW.SETL_REF              ,
                :NEW.DOCUMENT_MONTH        ,
                :NEW.DOCUMENT_YEAR        
                );
        ELSE
            UPDATE JOURNALS_ENTRIES_BALANCE_G
            SET     CR_DEBIT = NVL(CR_DEBIT,0) + NVL(:NEW.CR_DEBIT,0),
                    CR_CREDIT = NVL(CR_CREDIT,0) + NVL(:NEW.CR_CREDIT,0)
            WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
            AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
            AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
            AND     BRANCH_ID = :NEW.BRANCH_ID              
            AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
            AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
            AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
            AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
            AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
            AND     CONFIRMED = :NEW.CONFIRMED              
            AND     CANCELED = :NEW.CANCELED               
            AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
            AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
            AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
            AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
        END IF;
        
        
    ELSIF DELETING THEN
        UPDATE JOURNALS_ENTRIES_BALANCE_G
        SET     CR_DEBIT = NVL(CR_DEBIT,0) - NVL(:OLD.CR_DEBIT,0),
                CR_CREDIT = NVL(CR_CREDIT,0) - NVL(:OLD.CR_CREDIT,0)
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10);
        
        DELETE FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10)
        AND     CR_DEBIT = 0
        AND     CR_CREDIT = 0;
        
  END IF;
END;
/

CREATE INDEX "JEBG_MONTH05" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_MONTH"); 
 
CREATE INDEX "JEBG_YEAR05" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_YEAR"); 

=======
ALTER TABLE JOURNALS_ENTRIES_BALANCE ADD (DOCUMENT_MONTH VARCHAR2(25), DOCUMENT_YEAR VARCHAR2(25));

  

/*
UPDATE JOURNALS_ENTRIES_BALANCE
SET DOCUMENT_MONTH = TO_CHAR(DOCUMENT_DATE, 'MM-RRRR'),
    DOCUMENT_YEAR = TO_CHAR(DOCUMENT_YEAR,'RRRR');

COMMIT;
*/

CREATE OR REPLACE TRIGGER ACCOUNT_BALANCE_TRI
AFTER INSERT OR UPDATE OR DELETE ON JOURNALS_ENTRIES
FOR EACH ROW
DECLARE
CURSOR C1(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
  SELECT DOCUMENT_DATE, JOURNAL_TYPES_ID, BRANCH_ID, CONFIRMED, CANCELED, DOCUMENT_TYPES_ID, BASE_DOCUMENT_TYPES_ID
  FROM JOURNALS
  WHERE DOCUMENT_ID = V_DOCUMENT_ID
  AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
V_JOURNAL_TYPES_ID NUMBER;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;
BEGIN
  IF INSERTING THEN
      OPEN C1(:NEW.DOCUMENT_ID, :NEW.DEPARTMENT_ID);
      FETCH C1 INTO V_C1;
      CLOSE C1;

      IF :NEW.SETL_FOR IN (5,6,7,9,10) THEN
	V_SETL_FOR :='';
	V_SETL_REF :='';
      ELSE
	V_SETL_FOR :=:NEW.SETL_FOR;
	V_SETL_REF :=:NEW.SETL_REF;
      END IF;

      INSERT INTO JOURNALS_ENTRIES_BALANCE
		(
			DOCUMENT_ID            ,
			DEPARTMENT_ID          ,
			ARRANGMENT_NO          ,
			DOCUMENT_TYPES_ID      ,
			BASE_DOCUMENT_TYPES_ID,
			DOCUMENT_DATE          ,
			JOURNAL_TYPES_ID       ,
			BRANCH_ID              ,
			ACCOUNT_ID             ,
			CURRENCIES_ID          ,
			EXCHANGE_RATE          ,
			CR_DEBIT               ,
			CR_CREDIT              ,
			COST_CENTER_ID         ,
			ACTIVITY_ID            ,
			SETL_FOR		,
			SETL_REF		,
			CONFIRMED              ,
			CANCELED,
                        DOCUMENT_MONTH,
                        DOCUMENT_YEAR
		)
	VALUES
		(
			:NEW.DOCUMENT_ID            ,
			:NEW.DEPARTMENT_ID          ,
			:NEW.ARRANGMENT_NO          ,
			V_C1.DOCUMENT_TYPES_ID      ,
			V_C1.BASE_DOCUMENT_TYPES_ID,
			V_C1.DOCUMENT_DATE          ,
			V_C1.JOURNAL_TYPES_ID       ,
			V_C1.BRANCH_ID              ,
			:NEW.ACCOUNT_ID             ,
			:NEW.CURRENCIES_ID          ,
			:NEW.EXCHANGE_RATE          ,
			:NEW.CR_DEBIT               ,
			:NEW.CR_CREDIT              ,
			:NEW.COST_CENTER_ID         ,
			:NEW.ACTIVITY_ID            ,
			V_SETL_FOR			,
			V_SETL_REF			,
			V_C1.CONFIRMED              ,
			V_C1.CANCELED,
                        TO_CHAR(V_C1.DOCUMENT_DATE, 'MM-RRRR'),
                        TO_CHAR(V_C1.DOCUMENT_DATE,'RRRR')
		);

  ELSIF UPDATING THEN
--      IF (:OLD.ACCOUNT_ID <> :NEW.ACCOUNT_ID) OR (:OLD.CR_DEBIT <> :NEW.CR_DEBIT) OR (:OLD.CR_CREDIT <> :NEW.CR_CREDIT) OR (:OLD.EXCHANGE_RATE <> :NEW.EXCHANGE_RATE) OR (:OLD.CURRENCIES_ID <> :NEW.CURRENCIES_ID) OR (:OLD.COST_CENTER_ID <> :NEW.COST_CENTER_ID) OR (:OLD.ACTIVITY_ID <> :NEW.ACTIVITY_ID) THEN
      IF :NEW.SETL_FOR IN (5,6,7,9,10) THEN
	V_SETL_FOR :='';
	V_SETL_REF :='';
      ELSE
	V_SETL_FOR :=:NEW.SETL_FOR;
	V_SETL_REF :=:NEW.SETL_REF;
      END IF;

          UPDATE JOURNALS_ENTRIES_BALANCE
          SET ACCOUNT_ID = :NEW.ACCOUNT_ID,
              CURRENCIES_ID = :NEW.CURRENCIES_ID,
              EXCHANGE_RATE = :NEW.EXCHANGE_RATE,
              CR_DEBIT = :NEW.CR_DEBIT,
              CR_CREDIT = :NEW.CR_CREDIT,
              COST_CENTER_ID = :NEW.COST_CENTER_ID,
              ACTIVITY_ID = :NEW.ACTIVITY_ID,
	      SETL_FOR = V_SETL_FOR,
	      SETL_REF = V_SETL_REF
          WHERE DOCUMENT_ID = :NEW.DOCUMENT_ID
          AND DEPARTMENT_ID = :NEW.DEPARTMENT_ID
          AND ARRANGMENT_NO = :NEW.ARRANGMENT_NO;
--      END IF;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER ACCOUNT_BALANCE_JOURNAL_TRI
AFTER UPDATE ON JOURNALS
FOR EACH ROW
DECLARE
BEGIN
  IF (:OLD.DOCUMENT_DATE <> :NEW.DOCUMENT_DATE) OR (:OLD.DOCUMENT_TYPES_ID <> :NEW.DOCUMENT_TYPES_ID) OR (:OLD.BASE_DOCUMENT_TYPES_ID <> :NEW.BASE_DOCUMENT_TYPES_ID) OR (:OLD.JOURNAL_TYPES_ID <> :NEW.JOURNAL_TYPES_ID) OR (:OLD.CONFIRMED <> :NEW.CONFIRMED) OR (:OLD.CANCELED <> :NEW.CANCELED) THEN
      UPDATE JOURNALS_ENTRIES_BALANCE
      SET DOCUMENT_DATE = :NEW.DOCUMENT_DATE,
          DOCUMENT_TYPES_ID = :NEW.DOCUMENT_TYPES_ID,
          BASE_DOCUMENT_TYPES_ID = :NEW.BASE_DOCUMENT_TYPES_ID,
          JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID,
          CONFIRMED = :NEW.CONFIRMED,
          CANCELED = :NEW.CANCELED,
          DOCUMENT_MONTH =   TO_CHAR(:NEW.DOCUMENT_DATE, 'MM-RRRR'),
          DOCUMENT_YEAR = TO_CHAR(:NEW.DOCUMENT_DATE,'RRRR')
      WHERE DOCUMENT_ID = :NEW.DOCUMENT_ID
      AND DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
   END IF;
END;
/


CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_NEW_DB( V_BRANCH_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER,V_PREFIX VARCHAR2 DEFAULT NULL, V_SUFFIX VARCHAR2 DEFAULT NULL, V_SEQUENCE_LENGTH NUMBER DEFAULT NULL, V_DETAIL_ID NUMBER DEFAULT NULL, V_DATE DATE DEFAULT NULL, V_DOCUMENT_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT MAX(DOCUMENT_NO)
	FROM JOURNALS_NO_VIEW
	WHERE BRANCH_ID = V_BRANCH_ID
	AND JOURNAL_TYPES_ID = NVL(V_DETAIL_ID, JOURNAL_TYPES_ID)
	AND TO_CHAR(DOCUMENT_DATE,'MM-YYYY') = NVL(TO_CHAR(V_DATE,'MM-YYYY'), TO_CHAR(DOCUMENT_DATE,'MM-YYYY'))
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND NVL(DOCUMENT_ID,1) <> NVL(V_DOCUMENT_ID,-1);

V_MAX VARCHAR2(50);
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_MAX :='';

	OPEN C1(V_BRANCH_ID);
	FETCH C1 INTO V_MAX;
	CLOSE C1;

  V_NUMBER := NVL(SUBSTR(V_MAX, NVL(LENGTH(V_PREFIX), 0) + 1 , V_SEQUENCE_LENGTH) + 1,1);
  IF V_DATE IS NULL THEN
  		V_LAST_SEQUENCE := V_PREFIX || LPAD(V_NUMBER,V_SEQUENCE_LENGTH, '0') || V_SUFFIX;
  ELSE
  		V_LAST_SEQUENCE := V_PREFIX || LPAD(V_NUMBER,V_SEQUENCE_LENGTH, '0') || V_SUFFIX||'/'||TO_CHAR(V_DATE,'MM');
  END IF;
	RETURN(V_LAST_SEQUENCE);
END;
/

CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_DETAIL_ID NUMBER DEFAULT NULL) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOC_NO_SETUP_DEPT
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
CURSOR C2(V_BRANCH_ID NUMBER) IS
	SELECT MASTER_DETIAL_TYPE, AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOC_NO_SETUP_DEPT
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	FOR UPDATE;
V_C2 C2%ROWTYPE;
CURSOR C3(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOC_NO_SETUP_DEPT_DETAIL
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID;
V_C3 C3%ROWTYPE;
CURSOR C4(V_BRANCH_ID NUMBER) IS
	SELECT  AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOC_NO_SETUP_DEPT_DETAIL
	WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID
	FOR UPDATE;
V_C4 C4%ROWTYPE;
V_COUNT NUMBER;
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_COUNT :=0;
  OPEN C1(V_BRANCH_ID);
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT = 0 THEN
  		RETURN('ERROR');
  END IF;
  OPEN C2(V_BRANCH_ID);
  FETCH C2 INTO V_C2;
  CLOSE C2;
  IF V_C2.MASTER_DETIAL_TYPE = 2 THEN
		  OPEN C3(V_BRANCH_ID);
		  FETCH C3 INTO V_COUNT;
		  CLOSE C3;
		  IF V_COUNT = 0 THEN
		  		RETURN('ERROR');
		  END IF;

		  OPEN C4(V_BRANCH_ID);
		  FETCH C4 INTO V_C4;
		  CLOSE C4;
		  IF V_C4.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;

		  V_NUMBER := SUBSTR(V_C4.LAST_SEQUENCE, NVL(LENGTH(V_C4.PREFIX), 0) + 1 , V_C4.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C4.PREFIX || LPAD(V_NUMBER,V_C4.SEQUENCE_LENGTH, '0') || V_C4.SUFFIX;
		  UPDATE DOC_NO_SETUP_DEPT_DETAIL
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
			AND DETAIL_ID = V_DETAIL_ID;
			RETURN(V_LAST_SEQUENCE);
  ELSE
		  IF V_C2.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;
		  V_NUMBER := SUBSTR(V_C2.LAST_SEQUENCE, NVL(LENGTH(V_C2.PREFIX), 0) + 1 , V_C2.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C2.PREFIX || LPAD(V_NUMBER,V_C2.SEQUENCE_LENGTH, '0') || V_C2.SUFFIX;
		  UPDATE DOC_NO_SETUP_DEPT
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE DEPARTMENT_ID = V_DEPARTMENT_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
			RETURN(V_LAST_SEQUENCE);
	END IF;
END;
/



CREATE OR REPLACE FUNCTION GET_DOCUMENT_NO_DB(V_BRANCH_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_DETAIL_ID NUMBER DEFAULT NULL, V_DATE DATE DEFAULT NULL, V_DOCUMENT_ID NUMBER DEFAULT NULL) RETURN VARCHAR2 IS
CURSOR C1(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOCUMENT_NO_SETUP
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
CURSOR C2(V_BRANCH_ID NUMBER) IS
	SELECT MASTER_DETIAL_TYPE, AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOCUMENT_NO_SETUP
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	FOR UPDATE;
V_C2 C2%ROWTYPE;
CURSOR C3(V_BRANCH_ID NUMBER) IS
	SELECT COUNT(1)
	FROM DOCUMENT_NO_SETUP_DETAIL
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID;
V_C3 C3%ROWTYPE;
CURSOR C4(V_BRANCH_ID NUMBER) IS
	SELECT  AUTO_USER_CHOICE, LAST_SEQUENCE, PREFIX, SEQUENCE_LENGTH, SUFFIX
	FROM DOCUMENT_NO_SETUP_DETAIL
	WHERE BRANCH_ID = V_BRANCH_ID
	AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
	AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
	AND DETAIL_ID = V_DETAIL_ID
	FOR UPDATE;
V_C4 C4%ROWTYPE;
CURSOR C5 IS
	SELECT YEARLY_MONTHLY_FLAG
	FROM GL_DOC_NO_SETUP;
V_C5 C5%ROWTYPE;


V_COUNT NUMBER;
V_NUMBER NUMBER;
V_LAST_SEQUENCE VARCHAR2(25);
BEGIN
	V_COUNT :=0;
  OPEN C5;
  FETCH C5 INTO V_C5;
  CLOSE C5;

  OPEN C1(V_BRANCH_ID);
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT = 0 THEN
  		RETURN('ERROR');
  END IF;
  OPEN C2(V_BRANCH_ID);
  FETCH C2 INTO V_C2;
  CLOSE C2;
  IF V_C2.MASTER_DETIAL_TYPE = 2 THEN
		  OPEN C3(V_BRANCH_ID);
		  FETCH C3 INTO V_COUNT;
		  CLOSE C3;
		  IF V_COUNT = 0 THEN
		  		RETURN('ERROR');
		  END IF;

		  OPEN C4(V_BRANCH_ID);
		  FETCH C4 INTO V_C4;
		  CLOSE C4;
		  IF V_C4.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;
		  IF V_DOCUMENT_TYPES_ID = 28 AND GET_USER_PARAMETER(58, V_BRANCH_ID) = 2 THEN
		  		IF V_C5.YEARLY_MONTHLY_FLAG = 1 THEN
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID, V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C4.PREFIX,V_C4.SUFFIX,V_C4.SEQUENCE_LENGTH,V_DETAIL_ID, NULL,V_DOCUMENT_ID));
		  		ELSE
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID, V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C4.PREFIX,V_C4.SUFFIX,V_C4.SEQUENCE_LENGTH,V_DETAIL_ID, V_DATE,V_DOCUMENT_ID));
		  		END IF;
		  END IF;

		  V_NUMBER := SUBSTR(V_C4.LAST_SEQUENCE, NVL(LENGTH(V_C4.PREFIX), 0) + 1 , V_C4.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C4.PREFIX || LPAD(V_NUMBER,V_C4.SEQUENCE_LENGTH, '0') || V_C4.SUFFIX;
		  UPDATE DOCUMENT_NO_SETUP_DETAIL
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE BRANCH_ID = V_BRANCH_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID
			AND DETAIL_ID = V_DETAIL_ID;
			RETURN(V_LAST_SEQUENCE);
  ELSE
		  IF V_C2.AUTO_USER_CHOICE = 2 THEN
		  		RETURN('USER');
		  END IF;

		  IF V_DOCUMENT_TYPES_ID = 28 AND GET_USER_PARAMETER(58, V_BRANCH_ID) = 2 THEN
		  		IF V_C5.YEARLY_MONTHLY_FLAG = 1 THEN
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID,V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C2.PREFIX,V_C2.SUFFIX,V_C2.SEQUENCE_LENGTH,NULL, NULL,V_DOCUMENT_ID));
		  		ELSE
		  				RETURN(GET_DOCUMENT_NO_NEW_DB(V_BRANCH_ID,V_DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C2.PREFIX,V_C2.SUFFIX,V_C2.SEQUENCE_LENGTH,NULL, V_DATE,V_DOCUMENT_ID));
		  		END IF;
		  END IF;

		  V_NUMBER := SUBSTR(V_C2.LAST_SEQUENCE, NVL(LENGTH(V_C2.PREFIX), 0) + 1 , V_C2.SEQUENCE_LENGTH) + 1;
		  V_LAST_SEQUENCE := V_C2.PREFIX || LPAD(V_NUMBER,V_C2.SEQUENCE_LENGTH, '0') || V_C2.SUFFIX;
		  UPDATE DOCUMENT_NO_SETUP
		  SET LAST_SEQUENCE = V_LAST_SEQUENCE
			WHERE BRANCH_ID = V_BRANCH_ID
			AND DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID
			AND FINANCIAL_YEARS_ID = V_FINANCIAL_YEARS_ID;
			RETURN(V_LAST_SEQUENCE);
	END IF;
END;
/


CREATE SEQUENCE COST_CODES_SEQ;


/*==============================================================*/
/* Table: COST_CODES                                            */
/*==============================================================*/
create table COST_CODES  (
   COST_CODE_ID         NUMBER (15)                     not null,
   PARENT_COST_CODE_ID  NUMBER (15),
   BRANCH_ID            NUMBER (15)                     not null,
   USER_CODE            VARCHAR2 (25)                   not null,
   PRIMARY_NAME         VARCHAR2 (60)                   not null,
   SECONDARY_NAME       VARCHAR2 (60),
   MAIN_SUB_TYPE        NUMBER (15)                     not null,
   TREE_LEVEL           NUMBER (5)                      not null,
   ACTIVE               NUMBER (1)                      not null,
   CREATED_BY           VARCHAR2(25),
   CREATION_DATE        DATE,
   CREATION_MACHINE     VARCHAR2(25),
   UPDATED_BY           VARCHAR2(25),
   UPDATED_DATE         DATE,
   UPDATED_MACHINE      VARCHAR2(25),
   constraint PK_ACC_0070 primary key (COST_CODE_ID),
   constraint UK_ACC_0040 unique (USER_CODE, BRANCH_ID)
);

comment on table COST_CODES is
'Created By Sameh Noshi';

comment on column COST_CODES.MAIN_SUB_TYPE is
'1- MAIN
2- SUB';

alter table COST_CODES
   add constraint FK_ACC_0181 foreign key (PARENT_COST_CODE_ID)
      references COST_CODES (COST_CODE_ID);

alter table COST_CODES
   add constraint FK_ACC_0182 foreign key (BRANCH_ID)
      references BRANCHES (BRANCH_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD                                      */
/*==============================================================*/
create table COST_CENTERS_BUD  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   DOCUMENT_DATE        DATE                            not null,
   NOTES                VARCHAR2 (500),
   constraint PK_ACC_0073 primary key (COST_CENTER_ID, ARRANGMENT_NO)
);

alter table COST_CENTERS_BUD
   add constraint FK_ACC_0183 foreign key (COST_CENTER_ID)
      references COST_CENTERS (COST_CENTER_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD_COST                                 */
/*==============================================================*/
create table COST_CENTERS_BUD_COST  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   COST_CODE_ID         NUMBER (15)                     not null,
   constraint PK_ACC_0072 primary key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
);

alter table COST_CENTERS_BUD_COST
   add constraint FK_ACC_0184 foreign key (COST_CENTER_ID, ARRANGMENT_NO)
      references COST_CENTERS_BUD (COST_CENTER_ID, ARRANGMENT_NO)
      on delete cascade;

alter table COST_CENTERS_BUD_COST
   add constraint FK_ACC_0185 foreign key (COST_CODE_ID)
      references COST_CODES (COST_CODE_ID);


/*==============================================================*/
/* Table: COST_CENTERS_BUD_COST_ITM                             */
/*==============================================================*/
create table COST_CENTERS_BUD_COST_ITM  (
   COST_CENTER_ID       NUMBER (15)                     not null,
   ARRANGMENT_NO        NUMBER (15)                     not null,
   COST_CODE_ID         NUMBER (15)                     not null,
   ITEMS_ID             NUMBER (15)                     not null,
   UNIT_QUANTITY        NUMBER (17,5)                  default 0 not null,
   UNIT_FACTOR          NUMBER (17,5)                  default 0 not null,
   UNIT_COST            NUMBER (17,5)                  default 0 not null,
   ACTUAL_VALUE         NUMBER (17,5)                  default 0,
   constraint PK_ACC_0071 primary key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID, ITEMS_ID)
);

alter table COST_CENTERS_BUD_COST_ITM
   add constraint FK_ACC_0186 foreign key (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
      references COST_CENTERS_BUD_COST (COST_CENTER_ID, ARRANGMENT_NO, COST_CODE_ID)
      on delete cascade;

alter table COST_CENTERS_BUD_COST_ITM
   add constraint FK_ACC_0187 foreign key (ITEMS_ID)
      references ITEMS (ITEMS_ID);

/*==============================================================*/
/* View: COST_CODES_TRANS_VIEW                                  */
/*==============================================================*/
create or replace view COST_CODES_TRANS_VIEW as
SELECT DISTINCT COST_CODE_ID
FROM PUR_INVOICES_ITEMS
UNION
SELECT DISTINCT  COST_CODE_ID
FROM PUR_ORDERS_ITEMS
UNION
SELECT DISTINCT  COST_CODE_ID
FROM STOCK_OUT_DOCUMENTS_ITEMS;

comment on table COST_CODES_TRANS_VIEW is
'Created By Sameh Noshi';



CREATE OR REPLACE PACKAGE PCK_ACCOUNTS_OPEN_BALANCE IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE ACCOUNTS_OPEN_BALANCE_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE ACCOUNTS_OPEN_BALANCE_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE V_MAKE_ACCOUNT_TRANSACTION;
    PROCEDURE MAKE_ACCOUNT_TRANSACTION;
END;
/

CREATE OR REPLACE PACKAGE BODY PCK_ACCOUNTS_OPEN_BALANCE IS
CURSOR ACCOUNTS_OPEN_BALANCE_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            BASE_DOCUMENT_ID    ,
            BASE_DEPARTMENT_ID  ,
            FINANCIAL_YEARS_ID  ,
            FINANCIAL_PERIODS_ID,
            DESCRIPTION         ,
            TOTAL_ACTUAL_DEBIT  ,
            TOTAL_ACTUAL_CREDIT ,
            CONFIRMED           ,
            CANCELED            ,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_ACCOUNTS_OPEN_BALANCE_CUR ACCOUNTS_OPEN_BALANCE_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN ACCOUNTS_OPEN_BALANCE_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH ACCOUNTS_OPEN_BALANCE_CUR INTO V_ACCOUNTS_OPEN_BALANCE_CUR;
    CLOSE ACCOUNTS_OPEN_BALANCE_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE ACCOUNTS_OPEN_BALANCE_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
CURSOR C10 IS
    SELECT ACCOUNTS.SALARY_ACCOUNT, ACCOUNTS_OPEN_BALANCE_DTL_TREC.NOTES, ACCOUNTS_OPEN_BALANCE_DTL_TREC.CHECK_NO, ACCOUNTS_OPEN_BALANCE_DTL_TREC.BANK_ID, ACCOUNTS_OPEN_BALANCE_DTL_TREC.TREASURIES_ID, ACCOUNTS_OPEN_BALANCE_DTL_TREC.CHECK_STATUS,ACCOUNTS_OPEN_BALANCE_DTL_TREC.SETL_FOR,ACCOUNTS_OPEN_BALANCE_DTL_TREC.SETL_REF
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC, ACCOUNTS_OPEN_BALANCE_DTL, ACCOUNTS
    WHERE ACCOUNTS_OPEN_BALANCE_DTL_TREC.DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DOCUMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.DEPARTMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_TREC.ARRANGMENT_NO = ACCOUNTS_OPEN_BALANCE_DTL.ARRANGMENT_NO
    AND ACCOUNTS_OPEN_BALANCE_DTL.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID;
V_C10 C10%ROWTYPE;

CURSOR C11(V_CHECK_NO VARCHAR2, V_BANK_ID NUMBER,V_SETL_FOR NUMBER ,V_SETL_REF NUMBER) IS
    SELECT
        CHECK_ID               ,
        BRANCH_ID              ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        CHECK_AMOUNT           ,
        CURRENCIES_ID          ,
        SETL_FOR               ,
        SETL_REF               ,
        ACCOUNT_ID             ,
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        DOCUMENT_TYPES_ID      ,
        PAYMENT_RECEIPT_FALG,
        CREATED_BY           ,
        CREATION_DATE         ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE        ,
        CONT_NO                ,
        ADVANCE_CHECK
    FROM CHECKS
    WHERE BANK_ID = V_BANK_ID
    AND CHECK_NO = V_CHECK_NO
    AND BRANCH_ID=V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID
    AND SETL_FOR=V_SETL_FOR
    AND SETL_REF=V_SETL_REF
    ;
V_C11 C11%ROWTYPE;

CURSOR C12 IS
    SELECT ACCOUNTS.SALARY_ACCOUNT, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.NOTES, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.CHECK_NO, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.BANK_ID, ACCOUNTS_OPEN_BALANCE_DTL_BNKC.BANK_ACC_ID,ACCOUNTS_OPEN_BALANCE_DTL_BNKC.SETL_FOR,ACCOUNTS_OPEN_BALANCE_DTL_BNKC.SETL_REF
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC, ACCOUNTS_OPEN_BALANCE_DTL, ACCOUNTS
    WHERE ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DOCUMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DOCUMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.DEPARTMENT_ID = ACCOUNTS_OPEN_BALANCE_DTL.DEPARTMENT_ID
    AND ACCOUNTS_OPEN_BALANCE_DTL_BNKC.ARRANGMENT_NO = ACCOUNTS_OPEN_BALANCE_DTL.ARRANGMENT_NO
    AND ACCOUNTS_OPEN_BALANCE_DTL.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID;
V_C12 C12%ROWTYPE;
V_CHECK_STATUS NUMBER;

V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN
    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID ,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.CONFIRMED) THEN

        V_MAKE_ACCOUNT_TRANSACTION;
        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,NULL);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE ACCOUNTS_OPEN_BALANCE
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM ACCOUNTS_OPEN_BALANCE
        WHERE DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND DOCUMENT_ID <>  V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        MAKE_ACCOUNT_TRANSACTION;


        OPEN C10;
        LOOP
                FETCH C10 INTO V_C10;
                EXIT WHEN C10%NOTFOUND;
                OPEN C11(V_C10.CHECK_NO, V_C10.BANK_ID,V_C10.SETL_FOR ,V_C10.SETL_REF);
                FETCH C11 INTO V_C11;
                CLOSE C11;

                PCK_GENERAL_LEDGER.MAKE_CHECK_TRANSACTION(V_C11.CHECK_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE,V_DOCUMENT_NO,V_C10.CHECK_STATUS, 3, V_C10.TREASURIES_ID, V_C10.NOTES, V_BRANCH_ID, V_USER_NAME, V_USER_COMPUTER);
        END LOOP;
        CLOSE C10;

        OPEN C12;
        LOOP
                FETCH C12 INTO V_C12;
                EXIT WHEN C12%NOTFOUND;
                OPEN C11(V_C12.CHECK_NO, V_C12.BANK_ID,V_C12.SETL_FOR ,V_C12.SETL_REF);
                FETCH C11 INTO V_C11;
                CLOSE C11;
                IF V_C12.SALARY_ACCOUNT = 9 THEN
                        V_CHECK_STATUS := 3;
                ELSIF V_C12.SALARY_ACCOUNT = 11 THEN
                        V_CHECK_STATUS := 1;
                ELSIF V_C12.SALARY_ACCOUNT = 12 THEN
                        V_CHECK_STATUS := 2;
                END IF;

                PCK_GENERAL_LEDGER.MAKE_CHECK_TRANSACTION(V_C11.CHECK_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE,V_DOCUMENT_NO,V_CHECK_STATUS, 11, V_C12.BANK_ACC_ID, V_C10.NOTES, V_BRANCH_ID, V_USER_NAME, V_USER_COMPUTER);
        END LOOP;
        CLOSE C12;

        UPDATE ACCOUNTS_OPEN_BALANCE
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;


    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE ACCOUNTS_OPEN_BALANCE_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID ,V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID,V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.CONFIRMED) THEN
        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID, V_BRANCH_ID, V_LANGUAGE_ID);
        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID, V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID);

        UPDATE ACCOUNTS_OPEN_BALANCE
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------


PROCEDURE V_MAKE_ACCOUNT_TRANSACTION IS
CURSOR C2 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        ARRANGMENT_NO                  ,
        ACCOUNT_ID                     ,
        CURRENCIES_ID                  ,
        EXCHANGE_RATE                  ,
        CR_DEBIT                       ,
        CR_CREDIT                      ,
        BANK_ID                        ,
        CHECK_NO                       ,
        CHECK_DATE                     ,
        COST_CENTER_ID                 ,
        DESCRIPTION                    ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        ACTIVITY_ID                    ,
        ACTUAL_DEBIT                   ,
        ACTUAL_CREDIT
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    ORDER BY ARRANGMENT_NO;
V_C2 C2%ROWTYPE;
CURSOR C3(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID            ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

CURSOR C4(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID            ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C4 C4%ROWTYPE;

CURSOR C5(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        LEGAL_PERSON_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C5 C5%ROWTYPE;

CURSOR C6(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        SUPPLIER_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C6 C6%ROWTYPE;

CURSOR C7(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CUSTOMER_ID        ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C7 C7%ROWTYPE;

CURSOR C8(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        TREASURIES_ID    ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C8 C8%ROWTYPE;

CURSOR C9(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        BANK_ACC_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C9 C9%ROWTYPE;

CURSOR C10(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TEN
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C10 C10%ROWTYPE;

CURSOR C11(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_OWN
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C11 C11%ROWTYPE;

V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_DOCUMENT_NO VARCHAR2(50);
V_ARRANGMENT_NO NUMBER;
V_COUNT NUMBER;
V_TOTAL_EMP NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
V_COUNT2 NUMBER :=0;
V_COUNT3 NUMBER :=0;
V_COUNT4 NUMBER :=0;
V_COUNT5 NUMBER :=0;
V_COUNT8 NUMBER :=0;
V_COUNT9 NUMBER :=0;
V_COUNT10 NUMBER :=0;
V_COUNT11 NUMBER :=0;
V_COUNT15 NUMBER:=0;
V_COUNT16 NUMBER:=0;
V_FINANCIAL_YEARS_ID NUMBER;
BEGIN

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


  V_ARRANGMENT_NO :=0;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            V_COUNT := 0;
            SELECT COUNT(1)
            INTO V_COUNT
            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT2 := 0;
            SELECT COUNT(1)
            INTO V_COUNT2
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT3 := 0;
            SELECT COUNT(1)
            INTO V_COUNT3
            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT4 := 0;
            SELECT COUNT(1)
            INTO V_COUNT4
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT5 := 0;
            SELECT COUNT(1)
            INTO V_COUNT5
            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT8 := 0;
            SELECT COUNT(1)
            INTO V_COUNT8
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT9 := 0;
            SELECT COUNT(1)
            INTO V_COUNT9
            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


             IF V_COUNT > 0 OR V_COUNT2 > 0 OR V_COUNT3 > 0 OR V_COUNT4 > 0 OR V_COUNT5 > 0 OR V_COUNT8 > 0 OR V_COUNT9 > 0  THEN
                    IF V_COUNT > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000166',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                    ELSIF V_COUNT2 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000141',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                    ELSIF V_COUNT3 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000165',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                    ELSIF V_COUNT4 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000242',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                    ELSIF V_COUNT5 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000243',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );

                            END IF;

                    ELSIF V_COUNT8 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000244',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                            OPEN C8(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C8 INTO V_C8;
                                    EXIT WHEN C8%NOTFOUND;

                                    V_COUNT10 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT10
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                    IF V_COUNT10 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C8.CR_DEBIT - V_C8.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000246',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                            END LOOP;
                            CLOSE C8;

                    ELSIF V_COUNT9 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000245',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C9(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C9 INTO V_C9;
                                    EXIT WHEN C9%NOTFOUND;

                                    V_COUNT11 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT11
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                    IF V_COUNT11 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C9.CR_DEBIT - V_C9.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000247',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                            END LOOP;
                            CLOSE C9;

------end new ------


                    END IF;
            ELSE
                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
            END IF;
    END LOOP;
    CLOSE C2;
END;

-------------------------------------------------

PROCEDURE MAKE_ACCOUNT_TRANSACTION IS
CURSOR C2 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        ARRANGMENT_NO                  ,
        ACCOUNT_ID                     ,
        CURRENCIES_ID                  ,
        EXCHANGE_RATE                  ,
        CR_DEBIT                       ,
        CR_CREDIT                      ,
        BANK_ID                        ,
        CHECK_NO                       ,
        CHECK_DATE                     ,
        COST_CENTER_ID                 ,
        DESCRIPTION                    ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        ACTIVITY_ID                    ,
        ACTUAL_DEBIT                   ,
        ACTUAL_CREDIT
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    ORDER BY ARRANGMENT_NO;
V_C2 C2%ROWTYPE;
CURSOR C3(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

CURSOR C4(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        EMPLOYEE_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C4 C4%ROWTYPE;

CURSOR C5(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        LEGAL_PERSON_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION            ,
        CON_CONTRACT_ID
    FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C5 C5%ROWTYPE;

CURSOR C6(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        SUPPLIER_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C6 C6%ROWTYPE;

CURSOR C7(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        CUSTOMER_ID,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C7 C7%ROWTYPE;

CURSOR C8(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        TREASURIES_ID ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C8 C8%ROWTYPE;

CURSOR C9(V_ARRANGMENT_NO NUMBER) IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        BANK_ACC_ID ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        DESCRIPTION
    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
    AND ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C9 C9%ROWTYPE;

V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_DOCUMENT_NO VARCHAR2(50);
V_ARRANGMENT_NO NUMBER;
V_COUNT NUMBER;
V_TOTAL_EMP NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
V_COUNT2 NUMBER :=0;
V_COUNT3 NUMBER :=0;
V_COUNT4 NUMBER :=0;
V_COUNT5 NUMBER :=0;
V_COUNT8 NUMBER :=0;
V_COUNT9 NUMBER :=0;
V_COUNT10 NUMBER :=0;
V_COUNT11 NUMBER :=0;
V_COUNT15 NUMBER :=0;
V_COUNT16 NUMBER :=0;

CURSOR C20 IS
    SELECT DOCUMENT_NO
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID;
V_C20 C20%ROWTYPE;

BEGIN
  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;

    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;



    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,28,V_FINANCIAL_YEARS_ID,0,NULL,NULL);

    IF V_DOCUMENT_NO = 'ERROR' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000099',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    ELSIF V_DOCUMENT_NO = 'USER' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000098',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    OPEN C20;
    FETCH C20 INTO V_C20;
    CLOSE C20;


  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE, 0 , V_FINANCIAL_YEARS_ID, V_BRANCH_ID);
  INSERT INTO JOURNALS
            (   DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                BASE_DOCUMENT_TYPES_ID ,
                BASE_DOCUMENT_NO             ,
                JOURNAL_TYPES_ID             ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL                 ,
                COMPUTER_SERIAL_FIRST                 ,
                COMPUTER_SERIAL_LAST                 ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (   V_TRANSACTIONS_ID                  ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID          ,
                28                                              ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID                     ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_TYPES_ID             ,
                V_C20.DOCUMENT_NO,
                0                                                        ,
                V_DOCUMENT_NO,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_DATE          ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.BRANCH_ID              ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.FINANCIAL_YEARS_ID     ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.FINANCIAL_PERIODS_ID         ,
                V_ACCOUNTS_OPEN_BALANCE_CUR.DESCRIPTION            ,
                0     ,
                0    ,
                1                                          ,
                2                                       ,
                V_COMPUTER_SERIAL                 ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
  V_ARRANGMENT_NO :=0;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            V_COUNT := 0;
            SELECT COUNT(1)
            INTO V_COUNT
            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT2 := 0;
            SELECT COUNT(1)
            INTO V_COUNT2
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT3 := 0;
            SELECT COUNT(1)
            INTO V_COUNT3
            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT4 := 0;
            SELECT COUNT(1)
            INTO V_COUNT4
            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT5 := 0;
            SELECT COUNT(1)
            INTO V_COUNT5
            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT15 := 0;
            SELECT COUNT(1)
            INTO V_COUNT15
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TEN
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT16 := 0;
            SELECT COUNT(1)
            INTO V_COUNT16
            FROM ACCOUNTS_OPEN_BALANCE_DTL_OWN
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            V_COUNT8 := 0;
            SELECT COUNT(1)
            INTO V_COUNT8
            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;


            V_COUNT9 := 0;
            SELECT COUNT(1)
            INTO V_COUNT9
            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

            IF V_COUNT > 0 OR V_COUNT2 > 0 OR V_COUNT3 > 0 OR V_COUNT4 > 0 OR V_COUNT5 > 0 OR V_COUNT8 > 0 OR V_COUNT9 > 0  OR V_COUNT15 > 0 OR V_COUNT16 > 0 THEN
                    IF V_COUNT > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_EMP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000166',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );

                            END IF;


                            OPEN C3(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C3 INTO V_C3;
                                    EXIT WHEN C3%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C3.CR_DEBIT               ,
                                                V_C3.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                4,
                                                V_C3.EMPLOYEE_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C3;
                    ELSIF V_COUNT2 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SAL
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000141',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C4(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C4 INTO V_C4;
                                    EXIT WHEN C4%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C4.CR_DEBIT               ,
                                                V_C4.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                4,
                                                V_C4.EMPLOYEE_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C4;
                    ELSIF V_COUNT3 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_LEG
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000165',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C5(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C5 INTO V_C5;
                                    EXIT WHEN C5%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                CON_CONTRACT_ID,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C5.CR_DEBIT               ,
                                                V_C5.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                8,
                                                V_C5.LEGAL_PERSON_ID,
                                                V_C5.CON_CONTRACT_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C5;

                    ELSIF V_COUNT4 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_SUP
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000242',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C6(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C6 INTO V_C6;
                                    EXIT WHEN C6%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C6.CR_DEBIT               ,
                                                V_C6.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                2,
                                                V_C6.SUPPLIER_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C6;


                    ELSIF V_COUNT5 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_CUS
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000243',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C7(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C7 INTO V_C7;
                                    EXIT WHEN C7%NOTFOUND;
                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C7.CR_DEBIT               ,
                                                V_C7.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                1,
                                                V_C7.CUSTOMER_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C7;
------new ------

                    ELSIF V_COUNT8 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TRE
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000244',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;

                            OPEN C8(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C8 INTO V_C8;
                                    EXIT WHEN C8%NOTFOUND;

                                    V_COUNT10 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT10
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                    IF V_COUNT10 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_TREC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND TREASURIES_ID = V_C8.TREASURIES_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C8.CR_DEBIT - V_C8.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000246',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C8.CR_DEBIT               ,
                                                V_C8.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                3,
                                                V_C8.TREASURIES_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C8;

                    ELSIF V_COUNT9 > 0 THEN
                            V_TOTAL_EMP :=0;
                            SELECT SUM(CR_DEBIT - CR_CREDIT)
                            INTO V_TOTAL_EMP
                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNK
                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO;

                            IF V_TOTAL_EMP <> (V_C2.CR_DEBIT - V_C2.CR_CREDIT) THEN
                                apex_error.add_error(
                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000245',V_LANGUAGE_ID),
                                    p_additional_info  => null,
                                    p_display_location => apex_error.c_inline_in_notification
                                );
                            END IF;


                            OPEN C9(V_C2.ARRANGMENT_NO);
                            LOOP
                                    FETCH C9 INTO V_C9;
                                    EXIT WHEN C9%NOTFOUND;

                                    V_COUNT11 := 0;
                                    SELECT COUNT(1)
                                    INTO V_COUNT11
                                    FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                    WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                    AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                    AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                    IF V_COUNT11 > 0 THEN
                                            V_TOTAL_EMP :=0;
                                            SELECT SUM(CHECK_AMOUNT)
                                            INTO V_TOTAL_EMP
                                            FROM ACCOUNTS_OPEN_BALANCE_DTL_BNKC
                                            WHERE DOCUMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DOCUMENT_ID
                                            AND DEPARTMENT_ID = V_ACCOUNTS_OPEN_BALANCE_CUR.DEPARTMENT_ID
                                            AND ARRANGMENT_NO = V_C2.ARRANGMENT_NO
                                            AND BANK_ACC_ID = V_C9.BANK_ACC_ID;

                                            IF V_TOTAL_EMP <> ABS(V_C9.CR_DEBIT - V_C9.CR_CREDIT) THEN
                                                apex_error.add_error(
                                                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000247',V_LANGUAGE_ID),
                                                    p_additional_info  => null,
                                                    p_display_location => apex_error.c_inline_in_notification
                                                );
                                            END IF;
                                    END IF;

                                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                                    INSERT INTO JOURNALS_ENTRIES
                                            (    DOCUMENT_ID            ,
                                                DEPARTMENT_ID          ,
                                                ARRANGMENT_NO          ,
                                                ACCOUNT_ID             ,
                                                CURRENCIES_ID          ,
                                                EXCHANGE_RATE          ,
                                                CR_DEBIT               ,
                                                CR_CREDIT              ,
                                                BANK_ID                ,
                                                CHECK_NO               ,
                                                CHECK_DATE             ,
                                                COST_CENTER_ID         ,
                                                SETL_FOR,
                                                SETL_REF,
                                                DESCRIPTION            ,
                                                CREATED_BY             ,
                                                CREATION_DATE          ,
                                                CREATION_MACHINE             ,
                                                UPDATED_BY             ,
                                                UPDATED_DATE           ,
                                                UPDATED_MACHINE
                                          )
                                  VALUES
                                            (    V_TRANSACTIONS_ID           ,
                                                V_C2.DEPARTMENT_ID          ,
                                                V_ARRANGMENT_NO          ,
                                                V_C2.ACCOUNT_ID             ,
                                                V_C2.CURRENCIES_ID          ,
                                                V_C2.EXCHANGE_RATE          ,
                                                V_C9.CR_DEBIT               ,
                                                V_C9.CR_CREDIT              ,
                                                V_C2.BANK_ID                ,
                                                V_C2.CHECK_NO               ,
                                                V_C2.CHECK_DATE             ,
                                                V_C2.COST_CENTER_ID         ,
                                                11,
                                                V_C9.BANK_ACC_ID,
                                                V_C2.DESCRIPTION            ,
                                                V_USER_NAME                        ,
                                                V_SYSDATE                                        ,
                                                V_USER_COMPUTER                ,
                                                NULL                                                ,
                                                NULL                                                ,
                                                NULL
                                          );
                            END LOOP;
                            CLOSE C9;

------end new ------


                    END IF;
            ELSE
                    V_ARRANGMENT_NO := V_ARRANGMENT_NO +1;
                    INSERT INTO JOURNALS_ENTRIES
                            (    DOCUMENT_ID            ,
                                DEPARTMENT_ID          ,
                                ARRANGMENT_NO          ,
                                ACCOUNT_ID             ,
                                CURRENCIES_ID          ,
                                EXCHANGE_RATE          ,
                                CR_DEBIT               ,
                                CR_CREDIT              ,
                                BANK_ID                ,
                                CHECK_NO               ,
                                CHECK_DATE             ,
                                COST_CENTER_ID         ,
                                ACTIVITY_ID,
                                DESCRIPTION            ,
                                CREATED_BY             ,
                                CREATION_DATE          ,
                                CREATION_MACHINE             ,
                                UPDATED_BY             ,
                                UPDATED_DATE           ,
                                UPDATED_MACHINE
                          )
                  VALUES
                            (    V_TRANSACTIONS_ID           ,
                                V_C2.DEPARTMENT_ID          ,
                                V_ARRANGMENT_NO          ,
                                V_C2.ACCOUNT_ID             ,
                                V_C2.CURRENCIES_ID          ,
                                V_C2.EXCHANGE_RATE          ,
                                V_C2.CR_DEBIT               ,
                                V_C2.CR_CREDIT              ,
                                V_C2.BANK_ID                ,
                                V_C2.CHECK_NO               ,
                                V_C2.CHECK_DATE             ,
                                V_C2.COST_CENTER_ID         ,
                                V_C2.ACTIVITY_ID,
                                V_C2.DESCRIPTION            ,
                                V_USER_NAME                        ,
                                V_SYSDATE                                        ,
                                V_USER_COMPUTER                ,
                                NULL                                                ,
                                NULL                                                ,
                                NULL
                          );
            END IF;
    END LOOP;
    CLOSE C2;
END;




END;
/

CREATE OR REPLACE PACKAGE PCK_CLOSING_FINANCIAL_YEARS IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CLOSING_FINANCIAL_YEARS_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CLOSING_FINANCIAL_YEARS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CHECK_DOCUMENTS;
    PROCEDURE MAKE_PROFIT_AND_LOSE;
    PROCEDURE MAKE_NEW_OPEN_BALANCE;
    PROCEDURE CLOSE_FINANCIAL_YEAR;
    PROCEDURE CLOSE_FINANCIAL_YEAR_C;
END;
/


CREATE OR REPLACE PACKAGE BODY PCK_CLOSING_FINANCIAL_YEARS IS
CURSOR CLOSING_FINANCIAL_YEARS_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            FINANCIAL_YEARS_ID,
            NEW_FINANCIAL_YEARS_ID,
            CONFIRMED           ,
            CANCELED            ,
            DESCRIPTION,
            ACCOUNT_ID,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM CLOSING_FINANCIAL_YEARS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_CLOSING_FINANCIAL_YEARS_CUR CLOSING_FINANCIAL_YEARS_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN CLOSING_FINANCIAL_YEARS_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH CLOSING_FINANCIAL_YEARS_CUR INTO V_CLOSING_FINANCIAL_YEARS_CUR;
    CLOSE CLOSING_FINANCIAL_YEARS_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE CLOSING_FINANCIAL_YEARS_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN



    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);
/*
    IF PCK_BRIGHT.ABLE_TO_CONFIRM('ACC_F_009','BRIGHT')= FALSE THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000045',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;
*/


    IF GET_DB_CONFIRM_VALUE(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID ,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_CLOSING_FINANCIAL_YEARS_CUR.CONFIRMED) THEN

        CHECK_DOCUMENTS;


        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID,NULL);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE CLOSING_FINANCIAL_YEARS
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM CLOSING_FINANCIAL_YEARS
        WHERE DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND DOCUMENT_ID <>  V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        MAKE_PROFIT_AND_LOSE;
        MAKE_NEW_OPEN_BALANCE;
        CLOSE_FINANCIAL_YEAR;

        UPDATE CLOSING_FINANCIAL_YEARS
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;


    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE CLOSING_FINANCIAL_YEARS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID ,V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_CLOSING_FINANCIAL_YEARS_CUR.CONFIRMED) THEN

        DELETE FROM ACCOUNTS_OPEN_BALANCE_DTL
        WHERE (DOCUMENT_ID, DEPARTMENT_ID) IN
                            (    SELECT  DOCUMENT_ID, DEPARTMENT_ID
                                FROM ACCOUNTS_OPEN_BALANCE
                                WHERE BASE_DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
                                AND BASE_DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID);

        DELETE FROM ACCOUNTS_OPEN_BALANCE
        WHERE BASE_DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND BASE_DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;


        PCK_BRIGHT.MAKE_ACCOUNT_TRANSACTION_C(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID, V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID, V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID, V_BRANCH_ID, V_LANGUAGE_ID);

        CLOSE_FINANCIAL_YEAR_C;

        UPDATE CLOSING_FINANCIAL_YEARS
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------




PROCEDURE CHECK_DOCUMENTS IS
CURSOR C1 IS
    SELECT START_DATE, END_DATE
    FROM FINANCIAL_YEARS
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
V_C1 C1%ROWTYPE;
V_COUNT NUMBER;
CURSOR CUR_JOURNALS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM JOURNALS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_JOURNALS CUR_JOURNALS%ROWTYPE;

CURSOR CUR_ACCOUNTS_OPEN_BALANCE(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM ACCOUNTS_OPEN_BALANCE
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_ACCOUNTS_OPEN_BALANCE CUR_ACCOUNTS_OPEN_BALANCE%ROWTYPE;

CURSOR CUR_SAL_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_INVOICES CUR_SAL_INVOICES%ROWTYPE;

CURSOR CUR_SAL_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_RETURNES CUR_SAL_RETURNES%ROWTYPE;

CURSOR CUR_SAL_SERVICES_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_SERVICES_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_SERVICES_INVOICES CUR_SAL_SERVICES_INVOICES%ROWTYPE;

CURSOR CUR_SAL_SERVICES_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM SAL_SERVICES_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_SAL_SERVICES_RETURNES CUR_SAL_SERVICES_RETURNES%ROWTYPE;

CURSOR CUR_PUR_INVOICES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PUR_INVOICES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PUR_INVOICES CUR_PUR_INVOICES%ROWTYPE;

CURSOR CUR_PUR_RETURNES(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PUR_RETURNES
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PUR_RETURNES CUR_PUR_RETURNES%ROWTYPE;

CURSOR CUR_STOCK_IN_DOCUMENTS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCK_IN_DOCUMENTS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCK_IN_DOCUMENTS CUR_STOCK_IN_DOCUMENTS%ROWTYPE;

CURSOR CUR_STOCK_OUT_DOCUMENTS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCK_OUT_DOCUMENTS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCK_OUT_DOCUMENTS CUR_STOCK_OUT_DOCUMENTS%ROWTYPE;

CURSOR CUR_STORE_TRANSFERS(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORE_TRANSFERS
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORE_TRANSFERS CUR_STORE_TRANSFERS%ROWTYPE;

CURSOR CUR_STORES_DISPOSE(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORES_DISPOSE
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORES_DISPOSE CUR_STORES_DISPOSE%ROWTYPE;

CURSOR CUR_STOCKTAKING(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STOCKTAKING
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STOCKTAKING CUR_STOCKTAKING%ROWTYPE;

CURSOR CUR_STORES_ASSEMBLY(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM STORES_ASSEMBLY
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_STORES_ASSEMBLY CUR_STORES_ASSEMBLY%ROWTYPE;

CURSOR CUR_PAYMENT_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAYMENT_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAYMENT_VOUCHER CUR_PAYMENT_VOUCHER%ROWTYPE;

CURSOR CUR_RECEIVE_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM RECEIVE_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_RECEIVE_VOUCHER CUR_RECEIVE_VOUCHER%ROWTYPE;



CURSOR CUR_RECEIPT_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM RECEIPT_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_RECEIPT_VOUCHER CUR_RECEIPT_VOUCHER%ROWTYPE;



CURSOR CUR_PAYMENTS_VOUCHER(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAYMENTS_VOUCHER
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAYMENTS_VOUCHER CUR_PAYMENTS_VOUCHER%ROWTYPE;

CURSOR CUR_PAY_CHECK_COLLECTION(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAY_CHECK_COLLECTION
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAY_CHECK_COLLECTION CUR_PAY_CHECK_COLLECTION%ROWTYPE;


CURSOR CUR_PAY_CHECK_RETURN(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM PAY_CHECK_RETURN
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_PAY_CHECK_RETURN CUR_PAY_CHECK_RETURN%ROWTYPE;

CURSOR CUR_REC_CHECK_DEPOSIT(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_DEPOSIT
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_DEPOSIT CUR_REC_CHECK_DEPOSIT%ROWTYPE;

CURSOR CUR_REC_CHECK_COLLECTION(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_COLLECTION
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_COLLECTION CUR_REC_CHECK_COLLECTION%ROWTYPE;

CURSOR CUR_REC_CHECK_RETURN(V_START_DATE DATE, V_END_DATE DATE)IS
    SELECT COUNT(1)
    FROM REC_CHECK_RETURN
    WHERE BRANCH_ID = V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID
    AND CONFIRMED <> 1
    AND DOCUMENT_DATE >= V_START_DATE
    AND DOCUMENT_DATE <= V_END_DATE;
V_CUR_REC_CHECK_RETURN CUR_REC_CHECK_RETURN%ROWTYPE;

ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    V_COUNT := 0;
    OPEN CUR_JOURNALS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_JOURNALS INTO V_COUNT;
    CLOSE CUR_JOURNALS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(28, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


    V_COUNT := 0;
    OPEN CUR_ACCOUNTS_OPEN_BALANCE(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_ACCOUNTS_OPEN_BALANCE INTO V_COUNT;
    CLOSE CUR_ACCOUNTS_OPEN_BALANCE;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(27, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    ------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_SAL_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_INVOICES INTO V_COUNT;
    CLOSE CUR_SAL_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(1, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_RETURNES INTO V_COUNT;
    CLOSE CUR_SAL_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(6, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_SERVICES_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_SERVICES_INVOICES INTO V_COUNT;
    CLOSE CUR_SAL_SERVICES_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(15, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_SAL_SERVICES_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_SAL_SERVICES_RETURNES INTO V_COUNT;
    CLOSE CUR_SAL_SERVICES_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(16, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
  ----------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_PUR_INVOICES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PUR_INVOICES INTO V_COUNT;
    CLOSE CUR_PUR_INVOICES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(19, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PUR_RETURNES(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PUR_RETURNES INTO V_COUNT;
    CLOSE CUR_PUR_RETURNES;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(7, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    -----------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_STOCK_IN_DOCUMENTS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCK_IN_DOCUMENTS INTO V_COUNT;
    CLOSE CUR_STOCK_IN_DOCUMENTS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(23, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STOCK_OUT_DOCUMENTS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCK_OUT_DOCUMENTS INTO V_COUNT;
    CLOSE CUR_STOCK_OUT_DOCUMENTS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(24, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORE_TRANSFERS(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORE_TRANSFERS INTO V_COUNT;
    CLOSE CUR_STORE_TRANSFERS;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(3, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORES_DISPOSE(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORES_DISPOSE INTO V_COUNT;
    CLOSE CUR_STORES_DISPOSE;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(18, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STOCKTAKING(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STOCKTAKING INTO V_COUNT;
    CLOSE CUR_STOCKTAKING;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(5, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_STORES_ASSEMBLY(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_STORES_ASSEMBLY INTO V_COUNT;
    CLOSE CUR_STORES_ASSEMBLY;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(8, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;
    ---------------------------------------------------------------------
    V_COUNT := 0;
    OPEN CUR_PAYMENT_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAYMENT_VOUCHER INTO V_COUNT;
    CLOSE CUR_PAYMENT_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(30, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_RECEIVE_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_RECEIVE_VOUCHER INTO V_COUNT;
    CLOSE CUR_RECEIVE_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(31, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_RECEIPT_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_RECEIPT_VOUCHER INTO V_COUNT;
    CLOSE CUR_RECEIPT_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(31, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    V_COUNT := 0;
    OPEN CUR_PAYMENTS_VOUCHER(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAYMENTS_VOUCHER INTO V_COUNT;
    CLOSE CUR_PAYMENTS_VOUCHER;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(30, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PAY_CHECK_COLLECTION(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAY_CHECK_COLLECTION INTO V_COUNT;
    CLOSE CUR_PAY_CHECK_COLLECTION;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(204, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_PAY_CHECK_RETURN(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_PAY_CHECK_RETURN INTO V_COUNT;
    CLOSE CUR_PAY_CHECK_RETURN;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(205, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


    V_COUNT := 0;
    OPEN CUR_REC_CHECK_DEPOSIT(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_DEPOSIT INTO V_COUNT;
    CLOSE CUR_REC_CHECK_DEPOSIT;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(206, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_REC_CHECK_COLLECTION(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_COLLECTION INTO V_COUNT;
    CLOSE CUR_REC_CHECK_COLLECTION;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(207, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;

    V_COUNT := 0;
    OPEN CUR_REC_CHECK_RETURN(V_C1.START_DATE, V_C1.END_DATE);
    FETCH CUR_REC_CHECK_RETURN INTO V_COUNT;
    CLOSE CUR_REC_CHECK_RETURN;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000094', 'E', PCK_BRIGHT.GET_DOCUMENT_TYPE_NAME(208, V_LANGUAGE_ID), V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;


END;


----------------------------------------------------

PROCEDURE MAKE_PROFIT_AND_LOSE IS
CURSOR C1 IS
    SELECT ACCOUNTS.ACCOUNT_ID,ACCOUNTS.USER_CODE,JOURNAL_JOURNAL_ENTRY_VIEW.COST_CENTER_ID, JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID, JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT) CR_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT) CR_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW , ACCOUNTS
    WHERE JOURNAL_JOURNAL_ENTRY_VIEW.ACCOUNT_ID = ACCOUNTS.ACCOUNT_ID
    AND ACCOUNTS.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_TYPE IN (3,4)
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CONFIRMED = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CANCELED <> 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    GROUP BY ACCOUNTS.ACCOUNT_ID,ACCOUNTS.USER_CODE,JOURNAL_JOURNAL_ENTRY_VIEW.COST_CENTER_ID, JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID, JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE
    ORDER BY ACCOUNTS.USER_CODE;

V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        FINANCIAL_YEARS_ID     ,
        BRANCH_ID              ,
        USER_CODE              ,
        START_DATE             ,
        END_DATE               ,
        CLOSING_FLAG           ,
        CLOSING_DATE           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM FINANCIAL_YEARS
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
V_C2 C2%ROWTYPE;
CURSOR C3 IS
    SELECT
        FINANCIAL_PERIODS_ID           ,
        FINANCIAL_YEARS_ID             ,
        BRANCH_ID                      ,
        USER_CODE                      ,
        START_DATE                     ,
        END_DATE                       ,
        CLOSING_FLAG                   ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE
    FROM FINANCIAL_PERIODS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    ORDER BY START_DATE DESC;
V_C3 C3%ROWTYPE;

V_COUNT NUMBER;
V_SYSDATE DATE;
V_TRANSACTIONS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(50);
ALERT_ID NUMBER;
I NUMBER;
V_TOTAL NUMBER;
V_TOTAL_ACTUAL_DEBIT NUMBER;
V_TOTAL_ACTUAL_CREDIT NUMBER;
V_COMPUTER_SERIAL VARCHAR2(50);
BEGIN
    SELECT SYSDATE
    INTO V_SYSDATE
    FROM DUAL;

    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,28,V_FINANCIAL_YEARS_ID,-1,NULL,NULL);

    IF V_DOCUMENT_NO = 'ERROR' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000099',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    ELSIF V_DOCUMENT_NO = 'USER' THEN
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000098',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );
    END IF;



    OPEN C3;
    FETCH C3 INTO V_C3;
    CLOSE C3;


  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE, -1 , V_FINANCIAL_YEARS_ID, V_BRANCH_ID);
  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                BASE_DOCUMENT_TYPES_ID ,
                BASE_DOCUMENT_NO             ,
                JOURNAL_TYPES_ID             ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL                 ,
                COMPUTER_SERIAL_FIRST                 ,
                COMPUTER_SERIAL_LAST                 ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID          ,
                28                                              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID                     ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_TYPES_ID             ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO,
                -1                                                    ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO,
                V_C3.END_DATE          ,
                V_CLOSING_FINANCIAL_YEARS_CUR.BRANCH_ID              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID     ,
                V_C3.FINANCIAL_PERIODS_ID                                                 ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION            ,
                0,
                0,
                1                                          ,
                2                                       ,
                V_COMPUTER_SERIAL                 ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
    OPEN C1;
    I:=0;
    V_TOTAL := 0;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;
            I:=I+1;

            V_TOTAL := V_TOTAL + ((NVL(V_C1.CR_DEBIT, 0) - NVL(V_C1.CR_CREDIT, 0)) * V_C1.EXCHANGE_RATE);
            IF V_C1.CR_DEBIT > V_C1.CR_CREDIT THEN
                    V_C1.CR_DEBIT := V_C1.CR_DEBIT - V_C1.CR_CREDIT;
                    V_C1.CR_CREDIT :=0;
            ELSE
                    V_C1.CR_CREDIT := V_C1.CR_CREDIT - V_C1.CR_DEBIT;
                    V_C1.CR_DEBIT :=0;
            END IF;
            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID          ,
                        I          ,
                        V_C1.ACCOUNT_ID             ,
                        V_C1.CURRENCIES_ID          ,
                        V_C1.EXCHANGE_RATE          ,
                        V_C1.CR_CREDIT              ,
                        V_C1.CR_DEBIT               ,
                        NULL                                  ,
                        NULL                                ,
                        NULL                        ,
                        NULL                                ,
                        NULL                                  ,
                        V_C1.COST_CENTER_ID         ,
                        V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION            ,
                        V_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C1;
    I:=I+1;

    OPEN C2;
    FETCH C2 INTO V_C2;
    CLOSE C2;

    IF V_TOTAL > 0 THEN
            V_TOTAL_ACTUAL_DEBIT := V_TOTAL;
            V_TOTAL_ACTUAL_CREDIT :=0;
    ELSE
            V_TOTAL_ACTUAL_DEBIT := 0;
            V_TOTAL_ACTUAL_CREDIT := V_TOTAL * -1;
    END IF;

    INSERT INTO JOURNALS_ENTRIES
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                ARRANGMENT_NO          ,
                ACCOUNT_ID             ,
                CURRENCIES_ID          ,
                EXCHANGE_RATE          ,
                CR_DEBIT               ,
                CR_CREDIT              ,
                SETL_FOR               ,
                SETL_REF               ,
                BANK_ID                ,
                CHECK_NO               ,
                CHECK_DATE             ,
                COST_CENTER_ID         ,
                DESCRIPTION            ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE             ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
            )
    VALUES
            (    V_TRANSACTIONS_ID           ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                I                                              ,
                V_CLOSING_FINANCIAL_YEARS_CUR.ACCOUNT_ID   ,
                V_LOCAL_CURRENCY_ID        ,
                1                                              ,
                V_TOTAL_ACTUAL_DEBIT        ,
                V_TOTAL_ACTUAL_CREDIT       ,
                NULL                                  ,
                NULL                                ,
                NULL                        ,
                NULL                                ,
                NULL                                  ,
                NULL                                         ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DESCRIPTION  ,
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
            );

    IF V_TOTAL > 0 THEN
            UPDATE JOURNALS
            SET TOTAL_ACTUAL_DEBIT = V_TOTAL,
                    TOTAL_ACTUAL_CREDIT = V_TOTAL
            WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
            AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    ELSE
            UPDATE JOURNALS
            SET TOTAL_ACTUAL_DEBIT = V_TOTAL * -1,
                    TOTAL_ACTUAL_CREDIT = V_TOTAL * -1
            WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
            AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    END IF;
END;


---------------------------------------

PROCEDURE MAKE_NEW_OPEN_BALANCE IS
CURSOR C1 IS
    SELECT
        FINANCIAL_PERIODS_ID           ,
        FINANCIAL_YEARS_ID             ,
        BRANCH_ID                      ,
        USER_CODE                      ,
        START_DATE                     ,
        END_DATE                       ,
        CLOSING_FLAG                   ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE
    FROM FINANCIAL_PERIODS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.NEW_FINANCIAL_YEARS_ID
    ORDER BY START_DATE;
V_C1 C1%ROWTYPE;

CURSOR C2 IS
    SELECT ACCOUNT_ID
    FROM ACCOUNTS
    WHERE BRANCH_ID = V_BRANCH_ID
    AND MAIN_SUB_TYPE = 2
    ORDER BY USER_CODE;
V_C2 C2%ROWTYPE;

CURSOR C3(V_ACCOUNT_ID NUMBER) IS
    SELECT  CURRENCIES_ID,EXCHANGE_RATE, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT) CR_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT) CR_CREDIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_DEBIT * JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE) ACTUAL_DEBIT, SUM(JOURNAL_JOURNAL_ENTRY_VIEW.CR_CREDIT * JOURNAL_JOURNAL_ENTRY_VIEW.EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW
    WHERE JOURNAL_JOURNAL_ENTRY_VIEW.ACCOUNT_ID = V_ACCOUNT_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.BRANCH_ID = V_BRANCH_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CONFIRMED = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CANCELED <> 1
    AND FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID
    GROUP BY CURRENCIES_ID,EXCHANGE_RATE;
V_C3 C3%ROWTYPE;
V_COUNT NUMBER;
V_SYSDATE DATE;
V_TRANSACTIONS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(50);
ALERT_ID NUMBER;
I NUMBER;
V_TOTAL NUMBER;
V_TOTAL_ACTUAL_DEBIT NUMBER;
V_TOTAL_ACTUAL_CREDIT NUMBER;
V_ACCOUNT_DEFAULT_CURRENCY NUMBER;
BEGIN
  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;

    SELECT ACCOUNTS_OPEN_BALANCE_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;


    IF V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO IS NULL THEN
        IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                    V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,27,V_CLOSING_FINANCIAL_YEARS_CUR.NEW_FINANCIAL_YEARS_ID,NULL,NULL,NULL);
                END IF;
                IF V_DOCUMENT_NO = 'ERROR' THEN
                    apex_error.add_error(
                        p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                        p_additional_info  => null,
                        p_display_location => apex_error.c_inline_in_notification
                    );

                ELSIF V_DOCUMENT_NO = 'USER' THEN
                    apex_error.add_error(
                        p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                        p_additional_info  => null,
                        p_display_location => apex_error.c_inline_in_notification
                    );
                END IF;
        END IF;
    ELSE
        V_DOCUMENT_NO := V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_NO;
    END IF;


  INSERT INTO ACCOUNTS_OPEN_BALANCE
            (   DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                BRANCH_ID              ,
                BASE_DOCUMENT_ID             ,
                BASE_DEPARTMENT_ID         ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                27                                              ,
                V_DOCUMENT_NO                       ,
                V_C1.START_DATE                  ,
                V_BRANCH_ID           ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_ID             ,
                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID         ,
                V_C1.FINANCIAL_YEARS_ID     ,
                V_C1.FINANCIAL_PERIODS_ID         ,
                'OPEN BALANCE'                            ,
                0                                                 ,
                0                                                    ,
                1                                          ,
                2                                       ,
                V_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          );
    OPEN C2;
    I:=0;
    V_TOTAL :=0;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            OPEN C3(V_C2.ACCOUNT_ID);
            LOOP
                    FETCH C3 INTO V_C3;
                    EXIT WHEN C3%NOTFOUND;
                    I:=I+1;

                    V_C3.CR_DEBIT := NVL(V_C3.CR_DEBIT, 0);
                    V_C3.CR_CREDIT := NVL(V_C3.CR_CREDIT,0);

                    IF V_C3.CR_DEBIT > V_C3.CR_CREDIT THEN
                            V_C3.CR_DEBIT := V_C3.CR_DEBIT - V_C3.CR_CREDIT;
                            V_C3.CR_CREDIT :=0;
                    ELSE
                            V_C3.CR_CREDIT := V_C3.CR_CREDIT - V_C3.CR_DEBIT;
                            V_C3.CR_DEBIT :=0;
                    END IF;

                    INSERT INTO ACCOUNTS_OPEN_BALANCE_DTL
                            (    DOCUMENT_ID            ,
                                DEPARTMENT_ID          ,
                                ARRANGMENT_NO          ,
                                ACCOUNT_ID             ,
                                CURRENCIES_ID          ,
                                EXCHANGE_RATE          ,
                                CR_DEBIT               ,
                                CR_CREDIT              ,
                                BANK_ID                ,
                                CHECK_NO               ,
                                CHECK_DATE             ,
                                COST_CENTER_ID         ,
                                DESCRIPTION            ,
                                CREATED_BY             ,
                                CREATION_DATE          ,
                                CREATION_MACHINE             ,
                                UPDATED_BY             ,
                                UPDATED_DATE           ,
                                UPDATED_MACHINE
                          )
                  VALUES
                            (    V_TRANSACTIONS_ID           ,
                                V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID,
                                I                                             ,
                                V_C2.ACCOUNT_ID             ,
                                V_C3.CURRENCIES_ID                       ,
                                V_C3.EXCHANGE_RATE                    ,
                                V_C3.CR_DEBIT                   ,
                                V_C3.CR_CREDIT                  ,
                                NULL                                ,
                                NULL                                   ,
                                NULL                                     ,
                                NULL                                         ,
                                'OPEN BALANCE'                ,
                                V_USER_NAME                        ,
                                V_SYSDATE                                        ,
                                V_USER_COMPUTER                ,
                                NULL                                                ,
                                NULL                                                ,
                                NULL
                          );
                END LOOP;
                CLOSE C3;
    END LOOP;
    CLOSE C2;
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE)
    INTO V_TOTAL
    FROM ACCOUNTS_OPEN_BALANCE_DTL
    WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
    AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
    UPDATE ACCOUNTS_OPEN_BALANCE
    SET TOTAL_ACTUAL_DEBIT = V_TOTAL,
            TOTAL_ACTUAL_CREDIT = V_TOTAL
    WHERE DOCUMENT_ID =    V_TRANSACTIONS_ID
    AND DEPARTMENT_ID =    V_CLOSING_FINANCIAL_YEARS_CUR.DEPARTMENT_ID;
END;

--------------------------------------------

PROCEDURE CLOSE_FINANCIAL_YEAR IS
BEGIN
    UPDATE FINANCIAL_YEARS
    SET CLOSING_FLAG = 1,
            CLOSING_DATE = V_CLOSING_FINANCIAL_YEARS_CUR.DOCUMENT_DATE
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

    UPDATE FINANCIAL_PERIODS
    SET CLOSING_FLAG = 1
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

END;


---------------------------------

PROCEDURE CLOSE_FINANCIAL_YEAR_C IS
BEGIN
    UPDATE FINANCIAL_YEARS
    SET CLOSING_FLAG = 2,
            CLOSING_DATE = ''
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;

    UPDATE FINANCIAL_PERIODS
    SET CLOSING_FLAG = 2
    WHERE FINANCIAL_YEARS_ID = V_CLOSING_FINANCIAL_YEARS_CUR.FINANCIAL_YEARS_ID;
END;

-------------------


END;
/

CREATE OR REPLACE PACKAGE PCK_GENERAL_LEDGER IS
    PROCEDURE COPY_ACCOUNTS(OLD_BRANCH_ID NUMBER, NEW_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER DEFAULT 1);
    FUNCTION GET_ACCOUNT_MAPPING(V_ACCOUNT_ID_OLD NUMBER) RETURN NUMBER;
    FUNCTION IS_OPEN_FINANCIAL_YEAR(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN;
    FUNCTION IS_OPEN_FINANCIAL_PERIOD(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN;
    FUNCTION JOURNALS(V_DATE DATE, V_JOURNAL_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_BRANCH_ID NUMBER) RETURN VARCHAR2;
    FUNCTION JOURNALS_MONTH(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN VARCHAR2;
    PROCEDURE MAKE_CHECK_TRANSACTION(V_CHECK_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER,V_DOCUMENT_ID NUMBER,V_DEPARTMENT_ID NUMBER, V_DOCUMENT_DATE DATE, V_DOCUMENT_NO VARCHAR2,V_CHECK_STATUS NUMBER, V_SETL_FOR NUMBER, V_SETL_REF NUMBER, V_DESCRIPTION VARCHAR2, V_APP_BRANCH_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE AUTO_DISTRIBUTE_SAL_PAYMENT (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER,  V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    FUNCTION GET_GL_NO_POST_SAVE_FLAG RETURN NUMBER;
    FUNCTION COPY_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2;
    FUNCTION REVERSE_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2;
    FUNCTION GET_OUT_OF_AGE_NOT(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER) RETURN NUMBER;
    PROCEDURE MAKE_CUSTOMER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_SUPPLIER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_EXP_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_TREASURIES_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_TENANT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    PROCEDURE MAKE_OWNER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    FUNCTION GET_COST_CODE_ID(V_COST_CODE_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    FUNCTION GET_COST_CENTER_ID(V_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    FUNCTION GET_ACTIVITY_ID(V_ACTIVITY_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER;
    PROCEDURE GET_ACC_OB_RECON_CUR_S(V_ACCOUNT_ID NUMBER, V_CURRENCIES_ID NUMBER, V_YEAR NUMBER, V_MONTH NUMBER, V_CR_DEBIT IN OUT NUMBER, V_CR_CREDIT IN OUT NUMBER);


    FUNCTION GET_ACC_OPEN_BALANCE_TBD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_TBC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SD(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SC(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIOND(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SD (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SC (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_OPEN_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_OPEN_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_TRANSACTION_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_TRANSACTION_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_BALANCE_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_TRIAL_BALANCE_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIOND (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCED (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCEC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIOND (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCED (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCEC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;




-------



    FUNCTION GET_ACC_OPEN_BALANCE_TBDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_TBCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTIONCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_OPEN_BALANCE_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_EMP_TRANSACTION_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_OPEN_BALANCE_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_ACC_TRANSACTION_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCE_SCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTION_SCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_TRANSACTIONCB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCEDB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_CC_OPEN_BALANCECB(V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCE_SCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTION_SCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_TRANSACTIONCB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCEDB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;
    FUNCTION GET_AT_OPEN_BALANCECB(V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER;















END;
/

CREATE OR REPLACE PACKAGE BODY PCK_GENERAL_LEDGER IS
------------------------------------
PROCEDURE COPY_ACCOUNTS(OLD_BRANCH_ID NUMBER, NEW_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER DEFAULT 1) IS
CURSOR C1 IS
    SELECT
        ACCOUNT_ID                     ,
        BRANCH_ID                      ,
        GENERAL_ACCOUNT_ID             ,
        PARENT_ACCOUNT_ID              ,
        USER_CODE                      ,
        PRIMARY_NAME                   ,
        SECONDARY_NAME                 ,
        MAIN_SUB_TYPE                  ,
        ACCOUNT_TYPE                   ,
        ACCOUNT_REPORT                 ,
        DEBIT_CREDIT_TYPE              ,
        ENFORCE_COST_CENTER            ,
        RESTRICTED_ACCOUNT             ,
        MULTI_CURRENCY_ACCOUNT         ,
        CURRENCIES_ID                  ,
        TREE_LEVEL                                    ,
        ACTIVE              ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE       ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE        ,
        ENFORCE_CHECK_DETAILS  ,
        CURRENCY_RECALCULATION ,
        SALARY_ACCOUNT                 ,
        ENFORCE_ACTIVITY
    FROM ACCOUNTS
    WHERE BRANCH_ID = OLD_BRANCH_ID
    ORDER BY TREE_LEVEL;
V_C1 C1%ROWTYPE;
V_ACCOUNT_ID NUMBER;
V_PARENT_ACCOUNT_ID NUMBER;
V_COUNT NUMBER :=0;
ALERT_ID NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM ACCOUNTS
    WHERE BRANCH_ID = NEW_BRANCH_ID;

    IF V_COUNT > 0 THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000239',V_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );

    END IF;

    DELETE FROM ACCOUNTS_MAPPING;


    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT ACCOUNTS_SEQ.NEXTVAL
            INTO V_ACCOUNT_ID
            FROM DUAL;
            V_PARENT_ACCOUNT_ID := NULL;
            IF V_C1.PARENT_ACCOUNT_ID IS NOT NULL THEN
                    V_PARENT_ACCOUNT_ID := NULL;
                    V_PARENT_ACCOUNT_ID := GET_ACCOUNT_MAPPING(V_C1.PARENT_ACCOUNT_ID);
            END IF;

            INSERT INTO ACCOUNTS
                    (    ACCOUNT_ID             ,
                        BRANCH_ID              ,
                        GENERAL_ACCOUNT_ID     ,
                        PARENT_ACCOUNT_ID      ,
                        USER_CODE              ,
                        PRIMARY_NAME           ,
                        SECONDARY_NAME         ,
                        MAIN_SUB_TYPE          ,
                        ACCOUNT_TYPE           ,
                        ACCOUNT_REPORT         ,
                        DEBIT_CREDIT_TYPE      ,
                        ENFORCE_COST_CENTER    ,
                        RESTRICTED_ACCOUNT     ,
                        MULTI_CURRENCY_ACCOUNT ,
                        CURRENCIES_ID          ,
                        TREE_LEVEL             ,
                        ACTIVE                 ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE       ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE        ,
                        ENFORCE_CHECK_DETAILS  ,
                        CURRENCY_RECALCULATION ,
                        SALARY_ACCOUNT                 ,
                        ENFORCE_ACTIVITY
                    )
            VALUES
                    (    V_ACCOUNT_ID                     ,
                        NEW_BRANCH_ID                            ,
                        V_C1.GENERAL_ACCOUNT_ID     ,
                        V_PARENT_ACCOUNT_ID              ,
                        V_C1.USER_CODE              ,
                        V_C1.PRIMARY_NAME           ,
                        V_C1.SECONDARY_NAME         ,
                        V_C1.MAIN_SUB_TYPE          ,
                        V_C1.ACCOUNT_TYPE           ,
                        V_C1.ACCOUNT_REPORT         ,
                        V_C1.DEBIT_CREDIT_TYPE      ,
                        V_C1.ENFORCE_COST_CENTER    ,
                        V_C1.RESTRICTED_ACCOUNT     ,
                        V_C1.MULTI_CURRENCY_ACCOUNT ,
                        V_C1.CURRENCIES_ID          ,
                        V_C1.TREE_LEVEL             ,
                        V_C1.ACTIVE                 ,
                        V_C1.CREATED_BY             ,
                        V_C1.CREATION_DATE          ,
                        V_C1.CREATION_MACHINE       ,
                        V_C1.UPDATED_BY             ,
                        V_C1.UPDATED_DATE           ,
                        V_C1.UPDATED_MACHINE        ,
                        V_C1.ENFORCE_CHECK_DETAILS  ,
                        V_C1.CURRENCY_RECALCULATION ,
                        V_C1.SALARY_ACCOUNT                 ,
                        V_C1.ENFORCE_ACTIVITY
                    );

            INSERT INTO ACCOUNTS_MAPPING
                    (    ACCOUNT_ID_OLD,
                        ACCOUNT_ID_NEW
                    )
            VALUES
                    (    V_C1.ACCOUNT_ID,
                        V_ACCOUNT_ID
                    );
    END LOOP;
    CLOSE C1;
    COMMIT;
END;
------------------------------------------
FUNCTION GET_ACCOUNT_MAPPING(V_ACCOUNT_ID_OLD NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT ACCOUNT_ID_NEW
    FROM ACCOUNTS_MAPPING
    WHERE ACCOUNT_ID_OLD = V_ACCOUNT_ID_OLD;
V_ACCOUNT_ID_NEW NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_ACCOUNT_ID_NEW;
    CLOSE C1;
     RETURN (V_ACCOUNT_ID_NEW);
END;
-----------------------------------------
FUNCTION IS_OPEN_FINANCIAL_YEAR(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN IS
CURSOR C1 IS
    SELECT CLOSING_FLAG
    FROM FINANCIAL_YEARS
    WHERE START_DATE <= V_DATE
    AND END_DATE >= V_DATE
    AND BRANCH_ID = V_BRANCH_ID;
V_CLOSING_FLAG NUMBER;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CLOSING_FLAG;
    CLOSE C1;

  IF NVL(V_CLOSING_FLAG,1) = 1 THEN
          RETURN(FALSE);
  ELSE
          RETURN(TRUE);
  END IF;
END;
--------------------------------------
FUNCTION IS_OPEN_FINANCIAL_PERIOD(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN BOOLEAN IS
CURSOR C1 IS
    SELECT CLOSING_FLAG
    FROM FINANCIAL_PERIODS
    WHERE START_DATE <= V_DATE
    AND END_DATE >= V_DATE
    AND BRANCH_ID = V_BRANCH_ID;
V_CLOSING_FLAG NUMBER;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CLOSING_FLAG;
    CLOSE C1;
  IF NVL(V_CLOSING_FLAG,1) = 1 THEN
          RETURN(FALSE);
  ELSE
          RETURN(TRUE);
  END IF;
END;
---------------------------------------

FUNCTION JOURNALS(V_DATE DATE, V_JOURNAL_TYPES_ID NUMBER, V_FINANCIAL_YEARS_ID NUMBER, V_BRANCH_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1  IS
    SELECT MAX(COMPUTER_SERIAL_FIRST) COMPUTER_SERIAL
    FROM JOURNALS
    WHERE JOURNAL_TYPES_ID = V_JOURNAL_TYPES_ID
    AND COMPUTER_SERIAL_LAST = TO_CHAR(V_DATE,'MM-RRRR')
    AND BRANCH_ID = V_BRANCH_ID;
V_C1 C1%ROWTYPE;
V_LENGTH NUMBER;
BEGIN
    V_LENGTH := NVL(GET_SYSTEM_PARAMETER(23),5);
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    IF NVL(V_C1.COMPUTER_SERIAL,'0') ='0' THEN
            RETURN(LPAD('1',V_LENGTH,'0') ||'-'|| TO_CHAR(V_DATE,'MM-RRRR'));
    ELSE
            RETURN(LPAD(TO_CHAR(V_C1.COMPUTER_SERIAL + 1),V_LENGTH,'0') ||'-'|| TO_CHAR(V_DATE,'MM-RRRR'));
    END IF;
END;

---------------------------------------

FUNCTION JOURNALS_MONTH(V_DATE DATE, V_BRANCH_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1  IS
    SELECT MAX(DOCUMENT_NO) DOCUMENT_NO
    FROM JOURNALS
    WHERE TO_CHAR(DOCUMENT_DATE,'MM-RRRR') = TO_CHAR(V_DATE,'MM-RRRR')
    AND BRANCH_ID = V_BRANCH_ID;
V_C1 C1%ROWTYPE;
V_LENGTH NUMBER;
BEGIN
    V_LENGTH := NVL(GET_SYSTEM_PARAMETER(23),5);
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    IF NVL(V_C1.DOCUMENT_NO,'0') ='0' THEN
            RETURN(LPAD('1',V_LENGTH,'0'));
    ELSE
            RETURN(LPAD(TO_CHAR(V_C1.DOCUMENT_NO + 1),V_LENGTH,'0'));
    END IF;
END;


---------------------------------------------


PROCEDURE MAKE_CHECK_TRANSACTION(V_CHECK_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER,V_DOCUMENT_ID NUMBER,V_DEPARTMENT_ID NUMBER, V_DOCUMENT_DATE DATE, V_DOCUMENT_NO VARCHAR2,V_CHECK_STATUS NUMBER, V_SETL_FOR NUMBER, V_SETL_REF NUMBER, V_DESCRIPTION VARCHAR2, V_APP_BRANCH_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;
V_GLOBAL_USER_NAME                 VARCHAR2(100);
V_GLOBAL_USER_COMPUTER        VARCHAR2(100);
V_BRANCH_ID NUMBER;
BEGIN
    V_BRANCH_ID := V_APP_BRANCH_ID;
    V_GLOBAL_USER_NAME := V_APP_USER_NAME;
    V_GLOBAL_USER_COMPUTER := V_APP_USER_COMPUTER;

    SELECT CHECKS_TRANSACTIONS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

    SELECT SYSDATE
    INTO V_SYSDATE
    FROM DUAL;

    INSERT INTO CHECKS_TRANSACTIONS

            (   TRANSACTION_ID,
                CHECK_ID,
                BASE_DOCUMENT_TYPES_ID,
                BASE_DOCUMENT_ID,
                BASE_DEPARTMENT_ID,
                TRANSACTION_DATE,
                DOCUMENT_NO,
                NOTES,
                BRANCH_ID,
                CHECK_STATUS,
                SETL_FOR,
                SETL_REF,
                CREATED_BY,
                CREATION_DATE,
                CREATION_MACHINE,
                UPDATED_BY,
                UPDATED_DATE,
                UPDATED_MACHINE
            )
    VALUES
            (   V_TRANSACTIONS_ID,
                V_CHECK_ID,
                V_DOCUMENT_TYPES_ID,
                V_DOCUMENT_ID,
                V_DEPARTMENT_ID,
                V_DOCUMENT_DATE,
                V_DOCUMENT_NO,
                V_DESCRIPTION,
                V_BRANCH_ID,
                V_CHECK_STATUS,
                V_SETL_FOR,
                V_SETL_REF,
                V_GLOBAL_USER_NAME,
                V_SYSDATE,
                V_GLOBAL_USER_COMPUTER,
                NULL,
                NULL,
                NULL
            );
END;




/******************************************************************************************************************************************************/
/*                                                                                                                          Developed By Sameh Noshi Naguib                                                                                                                    */
/******************************************************************************************************************************************************/
/* Warning: This is a restricted software and all right reserved, this program is protected by copyright law and international treaties, unauthorized */
/* reproduction or distribution of this program or any portion of it may result in severe civil and criminal penalties and will be prosecuted  to the    */
/* maximum extent possible under law.                                                                                                                                                                                                                                        */
/******************************************************************************************************************************************************/
PROCEDURE AUTO_DISTRIBUTE_SAL_PAYMENT (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER,  V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2)IS
CURSOR C1(V_SETL_REF NUMBER, V_BRANCH_ID NUMBER)  IS
    SELECT     SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                    SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID,
                    SAL_INVOICES.NET_PRICE - NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_INVOICES, SAL_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                     SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID
    UNION
    SELECT     SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                    SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID,
                    SAL_INVOICES.NET_PRICE - NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_INVOICES, SAL_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_INVOICES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_INVOICES.DOCUMENT_DATE, SAL_INVOICES.DOCUMENT_NO, SAL_INVOICES.DOCUMENT_TYPES_ID, SAL_INVOICES.NET_PRICE,
                     SAL_INVOICES.DOCUMENT_ID, SAL_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                    SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID,
                    SAL_RETURNES.NET_PRICE - NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, -1 OPER
    FROM SAL_RETURNES, SAL_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                     SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID
    UNION
    SELECT      SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                    SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID,
                    SAL_RETURNES.NET_PRICE - NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, -1 OPER
    FROM SAL_RETURNES, SAL_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_RETURNES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_RETURNES.DOCUMENT_DATE, SAL_RETURNES.DOCUMENT_NO, SAL_RETURNES.DOCUMENT_TYPES_ID, SAL_RETURNES.NET_PRICE,
                     SAL_RETURNES.DOCUMENT_ID, SAL_RETURNES.DEPARTMENT_ID
    UNION

    SELECT      SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                    SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID,
                    SAL_SERVICES_INVOICES.NET_PRICE - NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_INVOICES, SAL_SERVICES_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                     SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                    SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID,
                    SAL_SERVICES_INVOICES.NET_PRICE - NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_INVOICES, SAL_SERVICES_INVOICES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_INVOICES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_INVOICES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_INVOICES.DOCUMENT_DATE, SAL_SERVICES_INVOICES.DOCUMENT_NO, SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID, SAL_SERVICES_INVOICES.NET_PRICE,
                     SAL_SERVICES_INVOICES.DOCUMENT_ID, SAL_SERVICES_INVOICES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                    SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID,
                    SAL_SERVICES_RETURNES.NET_PRICE - NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_RETURNES, SAL_SERVICES_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND (CONFIRMED = 1 AND CANCELED <> 1)
    AND SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                     SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID
    UNION
    SELECT      SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                    SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID,
                    SAL_SERVICES_RETURNES.NET_PRICE - NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT),0)REMAINING_VALUE, 1 OPER
    FROM SAL_SERVICES_RETURNES, SAL_SERVICES_RETURNES_PAYMENT
    WHERE BRANCH_ID = V_BRANCH_ID
    AND     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_RETURNES.CUSTOMER_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                             ))
    AND SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DOCUMENT_ID(+)
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DEPARTMENT_ID(+)
    AND CUSTOMER_ID = V_SETL_REF
    AND SAL_SERVICES_RETURNES.PAYMENT_TYPE = 2
    GROUP BY  SAL_SERVICES_RETURNES.DOCUMENT_DATE, SAL_SERVICES_RETURNES.DOCUMENT_NO, SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID, SAL_SERVICES_RETURNES.NET_PRICE,
                     SAL_SERVICES_RETURNES.DOCUMENT_ID, SAL_SERVICES_RETURNES.DEPARTMENT_ID

    order by 1,2;
V_C1 C1%ROWTYPE;
V_ARRANGMENT_NO2 NUMBER;
V_AMOUNT_DISTRIBUTED_SO_FAR NUMBER;
V_END_FLAG BOOLEAN := FALSE;

CURSOR C2 IS
    SELECT *
    FROM JOURNALS
    WHERE     DEPARTMENT_ID = V_DEPARTMENT_ID
    AND         DOCUMENT_ID = V_DOCUMENT_ID;
V_C2 C2%ROWTYPE;

CURSOR C3 IS
    SELECT *
    FROM JOURNALS_ENTRIES
    WHERE     DEPARTMENT_ID = V_DEPARTMENT_ID
    AND         DOCUMENT_ID = V_DOCUMENT_ID
    AND         ARRANGMENT_NO = V_ARRANGMENT_NO;
V_C3 C3%ROWTYPE;

V_AMOUNT_TO_DISTRIBUTE NUMBER;
BEGIN

    OPEN C2;
    FETCH C2 INTO V_C2;
    CLOSE C2;

    OPEN C3;
    FETCH C3 INTO V_C3;
    CLOSE C3;

    V_AMOUNT_TO_DISTRIBUTE := NVL(V_C3.CR_CREDIT,0) - NVL(V_C3.CR_DEBIT,0);

    IF V_C3.SETL_FOR IS NOT NULL AND V_C3.SETL_REF IS NOT NULL AND V_C2.BASE_DOCUMENT_ID IS NULL AND V_AMOUNT_TO_DISTRIBUTE > 0 THEN
            DELETE FROM SAL_INVOICES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_RETURNES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_SERVICES_INVOICES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

            DELETE FROM SAL_SERVICES_RETURNES_PAYMENT
            WHERE     BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND         BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND         BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;
            V_AMOUNT_DISTRIBUTED_SO_FAR :=0;
            OPEN C1(V_C3.SETL_REF, V_C2.BRANCH_ID);
            LOOP
                    FETCH C1 INTO V_C1;
                    EXIT WHEN C1%NOTFOUND OR V_AMOUNT_DISTRIBUTED_SO_FAR = V_AMOUNT_TO_DISTRIBUTE;
                    IF V_C1.REMAINING_VALUE > 0 THEN
                            IF V_C1.DOCUMENT_TYPES_ID IN(1,15) THEN
                                    IF V_AMOUNT_DISTRIBUTED_SO_FAR + V_C1.REMAINING_VALUE > V_AMOUNT_TO_DISTRIBUTE THEN
                                            V_C1.REMAINING_VALUE := V_AMOUNT_TO_DISTRIBUTE - V_AMOUNT_DISTRIBUTED_SO_FAR;
                                    END IF;
                                    V_AMOUNT_DISTRIBUTED_SO_FAR := V_AMOUNT_DISTRIBUTED_SO_FAR + V_C1.REMAINING_VALUE;
                            ELSIF V_C1.DOCUMENT_TYPES_ID IN(6,32,16) THEN
                                    V_AMOUNT_DISTRIBUTED_SO_FAR := V_AMOUNT_DISTRIBUTED_SO_FAR - V_C1.REMAINING_VALUE;
                            END IF;
                            V_ARRANGMENT_NO2 := 1;
                            IF V_C1.DOCUMENT_TYPES_ID = 1 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_INVOICES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_INVOICES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID = 15 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_SERVICES_INVOICES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_SERVICES_INVOICES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID IN (6,32) THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_RETURNES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_RETURNES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );
                            ELSIF V_C1.DOCUMENT_TYPES_ID = 16 THEN
                                    SELECT NVL(MAX(ARRANGMENT_NO) + 1, 1)
                                    INTO V_ARRANGMENT_NO2
                                    FROM SAL_SERVICES_RETURNES_PAYMENT
                                    WHERE DOCUMENT_ID = V_C1.DOCUMENT_ID
                                    AND DEPARTMENT_ID = V_C1.DEPARTMENT_ID;

                                    INSERT INTO SAL_SERVICES_RETURNES_PAYMENT
                                        (    DOCUMENT_ID,
                                            DEPARTMENT_ID,
                                            ARRANGMENT_NO,
                                            BASE_DEPARTMENT_ID,
                                            BASE_DOCUMENT_ID,
                                            BASE_ARRANGMENT_NO,
                                            PAID_AMOUNT
                                        )
                                    VALUES
                                        (    V_C1.DOCUMENT_ID,
                                            V_C1.DEPARTMENT_ID,
                                            V_ARRANGMENT_NO2,
                                            V_DEPARTMENT_ID,
                                            V_DOCUMENT_ID,
                                            V_ARRANGMENT_NO,
                                            V_C1.REMAINING_VALUE
                                        );

                            END IF;
                    END IF;
            END LOOP;
            CLOSE C1;
    END IF;
END;


------------------------------------------------------------------

FUNCTION GET_GL_NO_POST_SAVE_FLAG RETURN NUMBER IS
CURSOR C1 IS
    SELECT POST_SAVE_FLAG
    FROM GL_DOC_NO_SETUP;
V_C1 C1%ROWTYPE;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_C1;
    CLOSE C1;
    RETURN(V_C1.POST_SAVE_FLAG);

END;

----------------------------------------------------------------


FUNCTION COPY_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        DOCUMENT_TYPES_ID              ,
        BASE_DOCUMENT_ID               ,
        BASE_DEPARTMENT_ID             ,
        BASE_DOCUMENT_TYPES_ID         ,
        BASE_DOCUMENT_NO               ,
        DOCUMENT_NO                    ,
        DOCUMENT_DATE                  ,
        JOURNAL_TYPES_ID               ,
        BRANCH_ID                      ,
        FINANCIAL_YEARS_ID             ,
        FINANCIAL_PERIODS_ID           ,
        DESCRIPTION                    ,
        TOTAL_ACTUAL_DEBIT             ,
        TOTAL_ACTUAL_CREDIT            ,
        CONFIRMED                      ,
        CANCELED                       ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        COMPUTER_SERIAL                ,
        COMPUTER_SERIAL_FIRST          ,
        COMPUTER_SERIAL_LAST
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C2 C2%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_FINANCIAL_PERIODS_ID NUMBER;
V_FINANCIAL_YEARS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(25);
V_COMPUTER_SERIAL VARCHAR2(50);
V_ROWID VARCHAR2(500);
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;


    IF GET_USER_PARAMETER(40, V_C1.BRANCH_ID) = 2 THEN
            IF ROUND(V_C1.TOTAL_ACTUAL_DEBIT,4) <> ROUND(V_C1.TOTAL_ACTUAL_CREDIT,4) THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000068',V_APP_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );
            END IF;
    END IF;

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

  V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_SYSDATE, V_C1.BRANCH_ID);
  V_FINANCIAL_PERIODS_ID := GET_FINANCIAL_PERIOD(V_SYSDATE, V_C1.BRANCH_ID);

    V_DOCUMENT_NO :='';
    IF GET_GL_NO_POST_SAVE_FLAG = 2 THEN
          V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_C1.BRANCH_ID,V_C1.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C1.JOURNAL_TYPES_ID,NULL,NULL);

    END IF;

  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_C1.DOCUMENT_DATE, V_C1.JOURNAL_TYPES_ID , V_FINANCIAL_YEARS_ID, V_C1.BRANCH_ID);

  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID       ,
                BASE_DEPARTMENT_ID     ,
                BASE_DOCUMENT_TYPES_ID ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                JOURNAL_TYPES_ID       ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL        ,
                COMPUTER_SERIAL_FIRST        ,
                COMPUTER_SERIAL_LAST        ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_C1.DEPARTMENT_ID          ,
                V_C1.DOCUMENT_TYPES_ID      ,
                V_C1.BASE_DOCUMENT_ID       ,
                V_C1.BASE_DEPARTMENT_ID     ,
                V_C1.BASE_DOCUMENT_TYPES_ID ,
                V_DOCUMENT_NO                           ,
                V_C1.DOCUMENT_DATE                    ,
                V_C1.JOURNAL_TYPES_ID       ,
                V_C1.BRANCH_ID              ,
                V_C1.FINANCIAL_YEARS_ID       ,
                V_C1.FINANCIAL_PERIODS_ID        ,
                V_C1.DESCRIPTION            ,
                0     ,
                0    ,
                2                                          ,
                2                                       ,
                V_COMPUTER_SERIAL               ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_APP_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_APP_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          )
          returning rowid into V_ROWID;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        ACTIVITY_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_C2.DEPARTMENT_ID          ,
                        V_C2.ARRANGMENT_NO          ,
                        V_C2.ACCOUNT_ID             ,
                        V_C2.CURRENCIES_ID          ,
                        V_C2.EXCHANGE_RATE          ,
                        V_C2.CR_DEBIT               ,
                        V_C2.CR_CREDIT              ,
                        V_C2.SETL_FOR               ,
                        V_C2.SETL_REF               ,
                        V_C2.BANK_ID                ,
                        V_C2.CHECK_NO               ,
                        V_C2.CHECK_DATE             ,
                        V_C2.COST_CENTER_ID         ,
                        V_C2.ACTIVITY_ID         ,
                        V_C2.DESCRIPTION            ,
                        V_APP_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_APP_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C2;

    RETURN(V_ROWID);

END;


-----------------------------------------------------


FUNCTION REVERSE_JOURNALS (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID                    ,
        DEPARTMENT_ID                  ,
        DOCUMENT_TYPES_ID              ,
        BASE_DOCUMENT_ID               ,
        BASE_DEPARTMENT_ID             ,
        BASE_DOCUMENT_TYPES_ID         ,
        BASE_DOCUMENT_NO               ,
        DOCUMENT_NO                    ,
        DOCUMENT_DATE                  ,
        JOURNAL_TYPES_ID               ,
        BRANCH_ID                      ,
        FINANCIAL_YEARS_ID             ,
        FINANCIAL_PERIODS_ID           ,
        DESCRIPTION                    ,
        TOTAL_ACTUAL_DEBIT             ,
        TOTAL_ACTUAL_CREDIT            ,
        CONFIRMED                      ,
        CANCELED                       ,
        CREATED_BY                     ,
        CREATION_DATE                  ,
        CREATION_MACHINE               ,
        UPDATED_BY                     ,
        UPDATED_DATE                   ,
        UPDATED_MACHINE                ,
        COMPUTER_SERIAL                ,
        COMPUTER_SERIAL_FIRST          ,
        COMPUTER_SERIAL_LAST
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C1 C1%ROWTYPE;
CURSOR C2 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID;
V_C2 C2%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
ALERT_ID NUMBER;
V_SYSDATE DATE;
V_FINANCIAL_PERIODS_ID NUMBER;
V_FINANCIAL_YEARS_ID NUMBER;
V_DOCUMENT_NO VARCHAR2(25);
V_COMPUTER_SERIAL VARCHAR2(50);
V_ROWID VARCHAR2(500);
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;


    IF GET_USER_PARAMETER(40, V_C1.BRANCH_ID) = 2 THEN
            IF ROUND(V_C1.TOTAL_ACTUAL_DEBIT,4) <> ROUND(V_C1.TOTAL_ACTUAL_CREDIT,4) THEN
        apex_error.add_error(
                 p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000068',V_APP_LANGUAGE_ID),
                 p_additional_info  => null,
                 p_display_location => apex_error.c_inline_in_notification
              );
            END IF;
    END IF;

  SELECT SYSDATE
  INTO V_SYSDATE
  FROM DUAL;


    SELECT JOURNALS_SEQ.NEXTVAL
    INTO V_TRANSACTIONS_ID
    FROM DUAL;

  V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_SYSDATE, V_C1.BRANCH_ID);
  V_FINANCIAL_PERIODS_ID := GET_FINANCIAL_PERIOD(V_SYSDATE, V_C1.BRANCH_ID);

    V_DOCUMENT_NO :='';
    IF GET_GL_NO_POST_SAVE_FLAG = 2 THEN
          V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_C1.BRANCH_ID,V_C1.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_C1.JOURNAL_TYPES_ID,NULL,NULL);

    END IF;

  V_COMPUTER_SERIAL := PCK_GENERAL_LEDGER.JOURNALS(V_C1.DOCUMENT_DATE, V_C1.JOURNAL_TYPES_ID , V_FINANCIAL_YEARS_ID, V_C1.BRANCH_ID);

  INSERT INTO JOURNALS
            (    DOCUMENT_ID            ,
                DEPARTMENT_ID          ,
                DOCUMENT_TYPES_ID      ,
                BASE_DOCUMENT_ID       ,
                BASE_DEPARTMENT_ID     ,
                BASE_DOCUMENT_TYPES_ID ,
                DOCUMENT_NO            ,
                DOCUMENT_DATE          ,
                JOURNAL_TYPES_ID       ,
                BRANCH_ID              ,
                FINANCIAL_YEARS_ID     ,
                FINANCIAL_PERIODS_ID     ,
                DESCRIPTION            ,
                TOTAL_ACTUAL_DEBIT     ,
                TOTAL_ACTUAL_CREDIT    ,
                CONFIRMED              ,
                CANCELED               ,
                COMPUTER_SERIAL        ,
                COMPUTER_SERIAL_FIRST        ,
                COMPUTER_SERIAL_LAST        ,
                CREATED_BY             ,
                CREATION_DATE          ,
                CREATION_MACHINE       ,
                UPDATED_BY             ,
                UPDATED_DATE           ,
                UPDATED_MACHINE
          )
  VALUES
            (    V_TRANSACTIONS_ID                  ,
                V_C1.DEPARTMENT_ID          ,
                V_C1.DOCUMENT_TYPES_ID      ,
                V_C1.BASE_DOCUMENT_ID       ,
                V_C1.BASE_DEPARTMENT_ID     ,
                V_C1.BASE_DOCUMENT_TYPES_ID ,
                V_DOCUMENT_NO                           ,
                V_C1.DOCUMENT_DATE                    ,
                V_C1.JOURNAL_TYPES_ID       ,
                V_C1.BRANCH_ID              ,
                V_C1.FINANCIAL_YEARS_ID       ,
                V_C1.FINANCIAL_PERIODS_ID        ,
                V_C1.DESCRIPTION            ,
                0     ,
                0    ,
                2                                          ,
                2                                       ,
                V_COMPUTER_SERIAL               ,
                SUBSTR(V_COMPUTER_SERIAL,1,(INSTR(V_COMPUTER_SERIAL,'-')-1)),
                SUBSTR(V_COMPUTER_SERIAL,(INSTR(V_COMPUTER_SERIAL,'-')+1),7),
                V_APP_USER_NAME                        ,
                V_SYSDATE                                        ,
                V_APP_USER_COMPUTER                ,
                NULL                                                ,
                NULL                                                ,
                NULL
          )
          returning rowid into V_ROWID;
    OPEN C2;
    LOOP
            FETCH C2 INTO V_C2;
            EXIT WHEN C2%NOTFOUND;

            INSERT INTO JOURNALS_ENTRIES
                    (    DOCUMENT_ID            ,
                        DEPARTMENT_ID          ,
                        ARRANGMENT_NO          ,
                        ACCOUNT_ID             ,
                        CURRENCIES_ID          ,
                        EXCHANGE_RATE          ,
                        CR_DEBIT               ,
                        CR_CREDIT              ,
                        SETL_FOR               ,
                        SETL_REF               ,
                        BANK_ID                ,
                        CHECK_NO               ,
                        CHECK_DATE             ,
                        COST_CENTER_ID         ,
                        ACTIVITY_ID         ,
                        DESCRIPTION            ,
                        CREATED_BY             ,
                        CREATION_DATE          ,
                        CREATION_MACHINE             ,
                        UPDATED_BY             ,
                        UPDATED_DATE           ,
                        UPDATED_MACHINE
                  )
          VALUES
                    (    V_TRANSACTIONS_ID           ,
                        V_C2.DEPARTMENT_ID          ,
                        V_C2.ARRANGMENT_NO          ,
                        V_C2.ACCOUNT_ID             ,
                        V_C2.CURRENCIES_ID          ,
                        V_C2.EXCHANGE_RATE          ,
                        V_C2.CR_CREDIT              ,
                        V_C2.CR_DEBIT               ,
                        V_C2.SETL_FOR               ,
                        V_C2.SETL_REF               ,
                        V_C2.BANK_ID                ,
                        V_C2.CHECK_NO               ,
                        V_C2.CHECK_DATE             ,
                        V_C2.COST_CENTER_ID         ,
                        V_C2.ACTIVITY_ID         ,
                        V_C2.DESCRIPTION            ,
                        V_APP_USER_NAME                        ,
                        V_SYSDATE                                        ,
                        V_APP_USER_COMPUTER                ,
                        NULL                                                ,
                        NULL                                                ,
                        NULL
                  );
    END LOOP;
    CLOSE C2;

    RETURN(V_ROWID);

END;


--------------------------------------

FUNCTION GET_OUT_OF_AGE_NOT(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_ARRANGMENT_NO NUMBER) RETURN NUMBER IS
V_AMOUNT NUMBER;
V_SAL_INVOICES_PAY  NUMBER;
V_SAL_SERVICES_INVOICES_PAY  NUMBER;
V_SAL_RETURNES_PAY  NUMBER;
V_SAL_SERVICES_RETURNES_PAY NUMBER;
BEGIN
    SELECT NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_INVOICES_PAY
    FROM SAL_INVOICES_PAYMENT
    WHERE SAL_INVOICES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_INVOICES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_INVOICES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_RETURNES_PAY
    FROM SAL_RETURNES_PAYMENT
    WHERE SAL_RETURNES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_RETURNES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_RETURNES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_SERVICES_INVOICES_PAY
    FROM SAL_SERVICES_INVOICES_PAYMENT
    WHERE SAL_SERVICES_INVOICES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_SERVICES_INVOICES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_SERVICES_INVOICES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    SELECT NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT) , 0)
    INTO V_SAL_SERVICES_RETURNES_PAY
    FROM SAL_SERVICES_RETURNES_PAYMENT
    WHERE SAL_SERVICES_RETURNES_PAYMENT.BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND SAL_SERVICES_RETURNES_PAYMENT.BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND SAL_SERVICES_RETURNES_PAYMENT.BASE_ARRANGMENT_NO = V_ARRANGMENT_NO;

    RETURN(V_SAL_INVOICES_PAY + V_SAL_SERVICES_INVOICES_PAY - V_SAL_RETURNES_PAY - V_SAL_SERVICES_RETURNES_PAY);
END;

---------------------------------------

PROCEDURE MAKE_CUSTOMER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM CUSTOMERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

------------------------------------

PROCEDURE MAKE_SUPPLIER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM SUPPLIERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

-------------------------------------------------

PROCEDURE MAKE_EXP_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
CURSOR C1 IS
    SELECT SETL_FOR, SETL_REF
    FROM STOCK_IN_DOCUMENTS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND STORES_ID = V_DEPARTMENT_ID;

CURSOR C2 IS
    SELECT SETL_FOR, SETL_REF
    FROM STOCK_OUT_DOCUMENTS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND STORES_ID = V_DEPARTMENT_ID;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;

BEGIN
    DELETE FROM EXPENSES_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

    IF V_DOCUMENT_TYPES_ID = 23 THEN
            OPEN C1;
            FETCH C1 INTO V_SETL_FOR, V_SETL_REF;
            CLOSE C1;
    ELSIF V_DOCUMENT_TYPES_ID = 24 THEN
            OPEN C2;
            FETCH C2 INTO V_SETL_FOR, V_SETL_REF;
            CLOSE C2;
    END IF;

    IF V_SETL_FOR = 1 THEN
            DELETE FROM CUSTOMERS_TRANSACTIONS
            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
    ELSIF V_SETL_FOR = 2 THEN
            DELETE FROM SUPPLIERS_TRANSACTIONS
            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
    END IF;

END;


---------------------------------------------

PROCEDURE MAKE_TREASURIES_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM TREASURIES_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

---------------------------------------------

PROCEDURE MAKE_TENANT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM TENANTS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

----------------------------------------------

PROCEDURE MAKE_OWNER_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM OWNERS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID     = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID     = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

----------------------------------------------


FUNCTION GET_COST_CODE_ID(V_COST_CODE_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT COST_CODE_ID
  FROM COST_CODES
  WHERE USER_CODE = V_COST_CODE_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_COST_CODE_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_COST_CODE_ID;
  CLOSE C1;
  RETURN(V_COST_CODE_ID);
END;

-----------------------


FUNCTION GET_COST_CENTER_ID(V_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT COST_CENTER_ID
  FROM COST_CENTERS
  WHERE USER_CODE = V_COST_CENTER_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_COST_CENTER_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_COST_CENTER_ID;
  CLOSE C1;
  RETURN(V_COST_CENTER_ID);
END;

-----------------------


FUNCTION GET_ACTIVITY_ID(V_ACTIVITY_CODE VARCHAR2, V_BRANCH_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
  SELECT ACTIVITY_ID
  FROM ACTIVITIES
  WHERE USER_CODE = V_ACTIVITY_CODE
  AND BRANCH_ID = V_BRANCH_ID;
V_ACTIVITY_ID NUMBER;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_ACTIVITY_ID;
  CLOSE C1;
  RETURN(V_ACTIVITY_ID);
END;

-----------------------

PROCEDURE GET_ACC_OB_RECON_CUR_S(V_ACCOUNT_ID NUMBER, V_CURRENCIES_ID NUMBER, V_YEAR NUMBER, V_MONTH NUMBER, V_CR_DEBIT IN OUT NUMBER, V_CR_CREDIT IN OUT NUMBER) IS
CURSOR C1 IS
    SELECT SUM(CR_DEBIT) CR_DEBIT, SUM(CR_CREDIT) CR_CREDIT
    FROM JOURNAL_JOURNAL_ENTRY_VIEW
    WHERE ACCOUNT_ID  = V_ACCOUNT_ID
    AND CONFIRMED = 1
    AND CANCELED <> 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.CURRENCIES_ID = V_CURRENCIES_ID
    AND JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_STATUS = 1
    AND JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_YEAR ||'-'||LPAD( JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_MONTH,2,'0')< V_YEAR || '-'||LPAD( V_MONTH,2,'0')
    AND (JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_YEAR,JOURNAL_JOURNAL_ENTRY_VIEW.RECONCILIATION_MONTH) NOT IN (SELECT V_YEAR, V_MONTH FROM DUAL);
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CR_DEBIT, V_CR_CREDIT;
    CLOSE C1;
    V_CR_DEBIT := NVL(V_CR_DEBIT, 0);
    V_CR_CREDIT := NVL(V_CR_CREDIT, 0);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SD(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SC(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;

------------------------------------
FUNCTION GET_ACC_TRANSACTIOND(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTIONC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SD (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_DEBIT);
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SC (V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    RETURN (V_ACTUAL_CREDIT);
END;


-------------------------------------

FUNCTION GET_TRIAL_OPEN_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;


CURSOR C4 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;



CURSOR C11 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;

CURSOR C44 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;
    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C44;
                    FETCH C44 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C44;
            ELSE
                    OPEN C4;
                    FETCH C4 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C4;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C11;
                    FETCH C11 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C11;
            ELSE
                    OPEN C1;
                    FETCH C1 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C1;
            END IF;
    END IF;

    RETURN NVL(V_OPEN_BALANCE_DEBIT_TOTAL,0);

END;


-------------------------------------

FUNCTION GET_TRIAL_OPEN_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;


CURSOR C4 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;



CURSOR C11 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;
    --GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID;

CURSOR C44 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_FROM_DATE OR
  (
    JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID = 0
    AND DOCUMENT_DATE >= V_FROM_DATE
    AND DOCUMENT_DATE <= V_TO_DATE
  ))
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;
    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C44;
                    FETCH C44 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C44;
            ELSE
                    OPEN C4;
                    FETCH C4 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C4;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C11;
                    FETCH C11 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C11;
            ELSE
                    OPEN C1;
                    FETCH C1 INTO V_OPEN_BALANCE_DEBIT_TOTAL, V_OPEN_BALANCE_CREDIT_TOTAL;
                    CLOSE C1;
            END IF;
    END IF;

    RETURN NVL(V_OPEN_BALANCE_CREDIT_TOTAL,0);

END;


-----------------------------------------------------------------------------


FUNCTION GET_TRIAL_TRANSACTION_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C2 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C22 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C55 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C55;
                    FETCH C55 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C55;
            ELSE
                    OPEN C5;
                    FETCH C5 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C5;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C22;
                    FETCH C22 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C22;
            ELSE
                    OPEN C2;
                    FETCH C2 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C2;
            END IF;
    END IF;

    RETURN NVL(V_TRANSACTION_DEBIT_TOTAL,0);

END;


-----------------------------------------------------------------------------


FUNCTION GET_TRIAL_TRANSACTION_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C2 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C5 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C22 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;
CURSOR C55 IS
    SELECT SUM(CR_DEBIT * EXCHANGE_RATE) ACTUAL_DEBIT, SUM(CR_CREDIT * EXCHANGE_RATE) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE BETWEEN V_FROM_DATE AND V_TO_DATE
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <> 0;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C55;
                    FETCH C55 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C55;
            ELSE
                    OPEN C5;
                    FETCH C5 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C5;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C22;
                    FETCH C22 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C22;
            ELSE
                    OPEN C2;
                    FETCH C2 INTO V_TRANSACTION_DEBIT_TOTAL, V_TRANSACTION_CREDIT_TOTAL;
                    CLOSE C2;
            END IF;
    END IF;

    RETURN NVL(V_TRANSACTION_CREDIT_TOTAL,0);

END;

-----------------------------------------------

FUNCTION GET_TRIAL_BALANCE_DEBIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C3 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;


CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C33 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C66 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C66;
                    FETCH C66 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C66;
            ELSE
                    OPEN C6;
                    FETCH C6 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C6;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C33;
                    FETCH C33 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C33;
            ELSE
                    OPEN C3;
                    FETCH C3 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C3;
            END IF;
    END IF;

    RETURN NVL(V_BALANCE_DEBIT_TOTAL,0);
END;

-------------------------------------------

-----------------------------------------------

FUNCTION GET_TRIAL_BALANCE_CREDIT(V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
CURSOR C3 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;


CURSOR C6 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C33 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

CURSOR C66 IS
    SELECT SUM(DECODE(SIGN(SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE)),1,SUM(CR_DEBIT * EXCHANGE_RATE - CR_CREDIT * EXCHANGE_RATE),0)) ACTUAL_DEBIT,
                 SUM(DECODE(SIGN(SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE)),1,SUM(CR_CREDIT * EXCHANGE_RATE - CR_DEBIT * EXCHANGE_RATE),0)) ACTUAL_CREDIT
    FROM JOURNALS_ENTRIES_BALANCE, ACCOUNTS
    WHERE  JOURNALS_ENTRIES_BALANCE.BRANCH_ID = V_BRANCH_ID
    AND ACCOUNTS.ACCOUNT_ID = JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID
    AND JOURNALS_ENTRIES_BALANCE.COST_CENTER_ID IN
                (    SELECT CC.COST_CENTER_ID
                    FROM COST_CENTERS CC
                    WHERE CC.USER_CODE >= V_FROM_COST_CENTER_CODE
                    AND CC.USER_CODE <= V_TO_COST_CENTER_CODE
                    AND CC.BRANCH_ID = V_BRANCH_ID )
    AND ACTIVITY_ID IN
                (    SELECT ACT.ACTIVITY_ID
                    FROM ACTIVITIES ACT
                    WHERE ACT.USER_CODE >= V_FROM_ACTIVITY_CODE
                    AND ACT.USER_CODE <= V_TO_ACTIVITY_CODE
                    AND ACT.BRANCH_ID = V_BRANCH_ID )
    AND (JOURNALS_ENTRIES_BALANCE.CONFIRMED = 1 OR V_ALL = 1)
    AND JOURNALS_ENTRIES_BALANCE.CANCELED <> 1
    AND ( V_IGNORE_CURR_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            ( SELECT DOCUMENT_ID
               FROM JOURNALS
              WHERE JOURNAL_TYPES_ID = -1
                      AND DOCUMENT_DATE >= V_FROM_DATE
                    AND DOCUMENT_DATE <= V_TO_DATE
                    ))
    AND ( ( V_IGNORE_ALL_YEAR_CLOSE = 2 OR JOURNALS_ENTRIES_BALANCE.DOCUMENT_ID NOT IN
            (SELECT DOCUMENT_ID
             FROM JOURNALS
             WHERE JOURNAL_TYPES_ID = -1)
                ))
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID >= V_FROM_JOURNAL_TYPES_ID OR V_FROM_JOURNAL_TYPES_ID IS NULL)
    AND (JOURNALS_ENTRIES_BALANCE.JOURNAL_TYPES_ID <= V_TO_JOURNAL_TYPES_ID OR V_TO_JOURNAL_TYPES_ID IS NULL)
    AND JOURNALS_ENTRIES_BALANCE.DOCUMENT_DATE <V_TO_DATE+1
    AND( ACCOUNTS.USER_CODE >= V_FROM_ACCOUNT_CODE OR V_FROM_ACCOUNT_CODE IS NULL)
    AND( ACCOUNTS.USER_CODE <= RPAD(V_TO_ACCOUNT_CODE,20,'9') OR V_TO_ACCOUNT_CODE IS NULL)
    GROUP BY JOURNALS_ENTRIES_BALANCE.ACCOUNT_ID, SETL_REF;

V_OPEN_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_OPEN_BALANCE_CREDIT_TOTAL NUMBER :=0;
V_TRANSACTION_DEBIT_TOTAL NUMBER :=0;
V_TRANSACTION_CREDIT_TOTAL NUMBER :=0;
V_BALANCE_DEBIT_TOTAL NUMBER :=0;
V_BALANCE_CREDIT_TOTAL NUMBER :=0;
begin
    V_OPEN_BALANCE_DEBIT_TOTAL :=0;
    V_OPEN_BALANCE_CREDIT_TOTAL :=0;
    V_TRANSACTION_DEBIT_TOTAL :=0;
    V_TRANSACTION_CREDIT_TOTAL :=0;
    V_BALANCE_DEBIT_TOTAL :=0;
    V_BALANCE_CREDIT_TOTAL :=0;

    IF V_FROM_COST_CENTER_CODE IS NOT NULL AND V_TO_COST_CENTER_CODE IS NOT NULL THEN
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C66;
                    FETCH C66 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C66;
            ELSE
                    OPEN C6;
                    FETCH C6 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C6;
            END IF;
    ELSE
            IF V_FROM_ACTIVITY_CODE IS NOT NULL AND V_TO_ACTIVITY_CODE IS NOT NULL THEN
                    OPEN C33;
                    FETCH C33 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C33;
            ELSE
                    OPEN C3;
                    FETCH C3 INTO V_BALANCE_DEBIT_TOTAL, V_BALANCE_CREDIT_TOTAL;
                    CLOSE C3;
            END IF;
    END IF;

    RETURN NVL(V_BALANCE_CREDIT_TOTAL,0);
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SD(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SC(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------



FUNCTION GET_ACC_TRANSACTION_CURD(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


------------------------------------------

FUNCTION GET_ACC_TRANSACTION_CURC(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SD (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIOND (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCED (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCEC (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SD (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIOND (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCED (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_DEBIT,0);
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCEC (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    RETURN NVL(V_ACTUAL_CREDIT,0);
END;

--------------------------------------------

--------------------------------------

































FUNCTION GET_ACC_OPEN_BALANCE_TBDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);
    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_TBCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER,  V_FROM_ACTIVITY_CODE      VARCHAR2,V_TO_ACTIVITY_CODE        VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE        NUMBER, V_IGNORE_ALL_YEAR_CLOSE        NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN

    GET_ACC_OPEN_BALANCE_TB(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_DATE,V_FROM_DATE, V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

-----------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_DATE DATE, V_FROM_DATE  DATE, V_TO_DATE DATE , V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2, V_IGNORE_CURR_YEAR_CLOSE NUMBER, V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_S(V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_DATE, V_FROM_DATE, V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------
FUNCTION GET_ACC_TRANSACTIONDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTIONCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2, V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS

V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SDB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------

FUNCTION GET_ACC_TRANSACTION_SCB(V_ACCOUNT_ID NUMBER, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2 , V_TO_ACTIVITY_CODE VARCHAR2 ,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_S (V_ACCOUNT_ID, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE, V_TO_ACTIVITY_CODE, V_IGNORE_CURR_YEAR_CLOSE, V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


-------------------------------------


FUNCTION GET_EMP_OPEN_BALANCE_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

-------------------------------------------

FUNCTION GET_EMP_OPEN_BALANCE_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2, V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_OPEN_BALANCE_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE, V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT ,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SDB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

------------------------------------------

FUNCTION GET_EMP_TRANSACTION_SCB(V_EMPLOYEE_ID NUMBER, V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2, V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_SETL_FOR NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_EMP_TRANSACTION_S(V_EMPLOYEE_ID, V_FROM_ACCOUNT_CODE, V_TO_ACCOUNT_CODE, V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_SETL_FOR,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_OPEN_BALANCE_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_DATE DATE,V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_OPEN_BALANCE_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_DATE,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------



FUNCTION GET_ACC_TRANSACTION_CURDB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID,V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


------------------------------------------

FUNCTION GET_ACC_TRANSACTION_CURCB(V_ACCOUNT_ID NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2, V_TO_COST_CENTER_CODE VARCHAR2,V_BRANCH_ID NUMBER, V_CURRENCIES_ID NUMBER, V_FROM_DATE DATE, V_TO_DATE DATE, V_FROM_JOURNAL_TYPES_ID NUMBER, V_TO_JOURNAL_TYPES_ID NUMBER, V_ALL NUMBER, V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_ACC_TRANSACTION_CUR(V_ACCOUNT_ID,V_FROM_COST_CENTER_CODE, V_TO_COST_CENTER_CODE,V_BRANCH_ID, V_CURRENCIES_ID, V_FROM_DATE, V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID, V_TO_JOURNAL_TYPES_ID, V_ALL, V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCE_SCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTION_SCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION_S(V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_TRANSACTIONCB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_TRANSACTION (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCEDB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_CC_OPEN_BALANCECB (V_COST_CENTER_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_ACTIVITY_CODE VARCHAR2,V_TO_ACTIVITY_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_CC_OPEN_BALANCE (V_COST_CENTER_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_ACTIVITY_CODE,V_TO_ACTIVITY_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCE_SCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTION_SCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2, V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION_S(V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE , V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE, V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_TRANSACTIONCB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE  VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL  NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_TRANSACTION (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_FROM_DATE,V_TO_DATE,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT, V_FROM_JOURNAL_TYPES_ID ,V_TO_JOURNAL_TYPES_ID,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;


--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCEDB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_DEBIT, 0) > NVL(V_ACTUAL_CREDIT, 0) THEN
        RETURN (NVL(V_ACTUAL_DEBIT, 0) - NVL(V_ACTUAL_CREDIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------


FUNCTION GET_AT_OPEN_BALANCECB (V_ACTIVITY_ID NUMBER,V_FROM_ACCOUNT_CODE VARCHAR2,V_TO_ACCOUNT_CODE VARCHAR2,V_BRANCH_ID NUMBER,V_DATE DATE,V_FROM_DATE DATE,V_TO_DATE DATE,V_FROM_JOURNAL_TYPES_ID NUMBER,V_TO_JOURNAL_TYPES_ID NUMBER,V_ALL NUMBER,V_FROM_COST_CENTER_CODE VARCHAR2,V_TO_COST_CENTER_CODE VARCHAR2,V_IGNORE_CURR_YEAR_CLOSE NUMBER,V_IGNORE_ALL_YEAR_CLOSE NUMBER) RETURN NUMBER IS
V_ACTUAL_DEBIT NUMBER;
V_ACTUAL_CREDIT NUMBER;
BEGIN
    GET_AT_OPEN_BALANCE (V_ACTIVITY_ID,V_FROM_ACCOUNT_CODE,V_TO_ACCOUNT_CODE,V_BRANCH_ID,V_DATE,V_FROM_DATE,V_TO_DATE ,V_ACTUAL_DEBIT, V_ACTUAL_CREDIT,V_FROM_JOURNAL_TYPES_ID,V_TO_JOURNAL_TYPES_ID ,V_ALL,V_FROM_COST_CENTER_CODE,V_TO_COST_CENTER_CODE,V_IGNORE_CURR_YEAR_CLOSE,V_IGNORE_ALL_YEAR_CLOSE);

    IF NVL(V_ACTUAL_CREDIT, 0) > NVL(V_ACTUAL_DEBIT, 0) THEN
        RETURN (NVL(V_ACTUAL_CREDIT, 0) - NVL(V_ACTUAL_DEBIT, 0));
    ELSE
        RETURN (0);
    END IF;
END;

--------------------------------------------













END;
/

CREATE OR REPLACE PACKAGE PCK_JOURNALS IS
    PROCEDURE INITIAL_PACKAGE (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE JOURNALS_CONFIRM (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE JOURNALS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2);
    PROCEDURE CHECK_CUST_AGE_DISTRIBUTION;
    PROCEDURE MAKE_CUSTOMER_TRANSACTION;
    PROCEDURE MAKE_SUPPLIER_TRANSACTION;
    PROCEDURE MAKE_TREASURIES_TRANSACTION;
    PROCEDURE MAKE_EXPENSES_TRANSACTION;
    PROCEDURE MAKE_TENANT_TRANSACTION;
    PROCEDURE MAKE_OWNER_TRANSACTION;


END;
/

CREATE OR REPLACE PACKAGE BODY PCK_JOURNALS IS
CURSOR JOURNALS_CUR(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER) IS
    SELECT  DOCUMENT_ID,
            DEPARTMENT_ID,
            DOCUMENT_TYPES_ID,
            DOCUMENT_NO       ,
            DOCUMENT_DATE      ,
            BRANCH_ID           ,
            BASE_DOCUMENT_ID    ,
            BASE_DEPARTMENT_ID  ,
            BASE_DOCUMENT_TYPES_ID,
            FINANCIAL_YEARS_ID  ,
            FINANCIAL_PERIODS_ID,
            JOURNAL_TYPES_ID,
            DESCRIPTION         ,
            TOTAL_ACTUAL_DEBIT  ,
            TOTAL_ACTUAL_CREDIT ,
            CONFIRMED           ,
            CANCELED            ,
            CREATED_BY          ,
            CREATION_DATE       ,
            CREATION_MACHINE    ,
            UPDATED_BY          ,
            UPDATED_DATE        ,
            UPDATED_MACHINE
    FROM JOURNALS
    WHERE DOCUMENT_ID = V_DOCUMENT_ID
    AND DEPARTMENT_ID = V_DEPARTMENT_ID
    FOR UPDATE;
V_JOURNALS_CUR JOURNALS_CUR%ROWTYPE;
V_LOCAL_CURRENCY_ID NUMBER;
V_USER_NAME VARCHAR2(50);
V_USER_COMPUTER VARCHAR2(50);
V_BRANCH_ID VARCHAR2(50);
V_LANGUAGE_ID VARCHAR2(50);
V_FINANCIAL_YEARS_ID NUMBER;

PROCEDURE INITIAL_PACKAGE(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN
    OPEN JOURNALS_CUR(V_DOCUMENT_ID, V_DEPARTMENT_ID);
    FETCH JOURNALS_CUR INTO V_JOURNALS_CUR;
    CLOSE JOURNALS_CUR;
    V_LOCAL_CURRENCY_ID := PCK_BRIGHT.GET_LOCAL_CURRENCY_ID;
    V_USER_NAME := V_APP_USER_NAME;
    V_USER_COMPUTER := V_APP_USER_COMPUTER;
    V_BRANCH_ID := V_JOURNALS_CUR.BRANCH_ID;
    V_LANGUAGE_ID := V_APP_LANGUAGE_ID;
END;


----------------------------------------------


PROCEDURE JOURNALS_CONFIRM(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
V_DOCUMENT_NO VARCHAR2(100);
V_COUNT NUMBER;
BEGIN
    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_JOURNALS_CUR.DOCUMENT_ID ,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID, V_JOURNALS_CUR.CONFIRMED) THEN

        V_FINANCIAL_YEARS_ID := GET_FINANCIAL_YEAR(V_JOURNALS_CUR.DOCUMENT_DATE, V_BRANCH_ID);

        IF V_JOURNALS_CUR.DOCUMENT_NO IS NULL THEN
            IF GET_SYSTEM_PARAMETER(14) = 2 THEN
                    IF GET_USER_PARAMETER(24, V_BRANCH_ID)= 1 THEN
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DB(V_BRANCH_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID,V_FINANCIAL_YEARS_ID,V_JOURNALS_CUR.JOURNAL_TYPES_ID,NULL,NULL);
                    ELSE
                        V_DOCUMENT_NO := GET_DOCUMENT_NO_DEPT_DB(V_BRANCH_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_FINANCIAL_YEARS_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID,V_JOURNALS_CUR.JOURNAL_TYPES_ID);
                    END IF;
                    IF V_DOCUMENT_NO = 'ERROR' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000019',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );

                    ELSIF V_DOCUMENT_NO = 'USER' THEN
                        apex_error.add_error(
                            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000020',V_LANGUAGE_ID),
                            p_additional_info  => null,
                            p_display_location => apex_error.c_inline_in_notification
                        );
                    ELSE
                        UPDATE JOURNALS
                        SET DOCUMENT_NO = V_DOCUMENT_NO
                        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
                        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;
                    END IF;
            END IF;
        ELSE
            V_DOCUMENT_NO := V_JOURNALS_CUR.DOCUMENT_NO;
        END IF;

        V_COUNT := 0;
        SELECT COUNT(1)
        INTO V_COUNT
        FROM JOURNALS
        WHERE DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
        AND DOCUMENT_NO = V_DOCUMENT_NO
        AND JOURNAL_TYPES_ID = V_JOURNALS_CUR.JOURNAL_TYPES_ID
        AND FINANCIAL_YEARS_ID  = V_JOURNALS_CUR.FINANCIAL_YEARS_ID
        AND DOCUMENT_ID <>  V_JOURNALS_CUR.DOCUMENT_ID;

        IF V_COUNT > 0 THEN
            apex_error.add_error(
                p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000101',V_LANGUAGE_ID),
                p_additional_info  => null,
                p_display_location => apex_error.c_inline_in_notification
            );
        END IF;

        INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);


        CHECK_CUST_AGE_DISTRIBUTION;

        IF V_JOURNALS_CUR.BASE_DOCUMENT_ID IS NULL OR V_JOURNALS_CUR.BASE_DOCUMENT_TYPES_ID = 114 THEN
                MAKE_CUSTOMER_TRANSACTION;
                MAKE_SUPPLIER_TRANSACTION;
                MAKE_TREASURIES_TRANSACTION;
                MAKE_EXPENSES_TRANSACTION;
                MAKE_TENANT_TRANSACTION;
                MAKE_OWNER_TRANSACTION;
        END IF;

        UPDATE JOURNALS
        SET CONFIRMED = 1
        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;

    ELSE

        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;


END;

PROCEDURE JOURNALS_CANCEL (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_APP_LANGUAGE_ID NUMBER, V_APP_USER_NAME VARCHAR2, V_APP_USER_COMPUTER VARCHAR2) IS
BEGIN

    INITIAL_PACKAGE(V_DOCUMENT_ID, V_DEPARTMENT_ID, V_APP_LANGUAGE_ID,V_APP_USER_NAME,V_APP_USER_COMPUTER);

    IF GET_DB_CONFIRM_VALUE(V_JOURNALS_CUR.DOCUMENT_ID ,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID, V_JOURNALS_CUR.CONFIRMED) THEN


        IF V_JOURNALS_CUR.BASE_DOCUMENT_ID IS NULL OR V_JOURNALS_CUR.BASE_DOCUMENT_TYPES_ID = 114 THEN
                PCK_GENERAL_LEDGER.MAKE_CUSTOMER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_SUPPLIER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_EXP_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_TREASURIES_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_TENANT_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
                PCK_GENERAL_LEDGER.MAKE_OWNER_TRANSACTION_C(V_JOURNALS_CUR.DOCUMENT_ID,V_JOURNALS_CUR.DEPARTMENT_ID,V_JOURNALS_CUR.DOCUMENT_TYPES_ID);
        END IF;


        UPDATE JOURNALS
        SET CONFIRMED = 2
        WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
        AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID;

    ELSE
        apex_error.add_error(
            p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000115',V_LANGUAGE_ID),
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

    END IF;

END;

-----------------------------------------------

PROCEDURE CHECK_CUST_AGE_DISTRIBUTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE             ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 1
    AND SETL_REF  IS NOT NULL;
V_C1 C1%ROWTYPE;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    LOOP

            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;
            IF ABS(PCK_GENERAL_LEDGER.GET_OUT_OF_AGE_NOT(V_C1.DOCUMENT_ID, V_C1.DEPARTMENT_ID, V_C1.ARRANGMENT_NO)) > ABS((V_C1.CR_DEBIT * V_C1.EXCHANGE_RATE) - (V_C1.CR_CREDIT * V_C1.EXCHANGE_RATE)) THEN
                apex_error.add_error(
                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000150',V_LANGUAGE_ID),
                    p_additional_info  => null,
                    p_display_location => apex_error.c_inline_in_notification
                );
            END IF;
    END LOOP;
    CLOSE C1;
END;

------------------------------------

PROCEDURE MAKE_CUSTOMER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 1
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM CUSTOMERS
            WHERE CUSTOMER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT CUSTOMERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO CUSTOMERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        CUSTOMER_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

-------------------------------------

PROCEDURE MAKE_SUPPLIER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 2
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM SUPPLIERS
            WHERE SUPPLIER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT SUPPLIERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO SUPPLIERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        SUPPLIER_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;


--------------------------------

PROCEDURE MAKE_TREASURIES_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 3
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT TREASURIES_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO TREASURIES_TRANSACTIONS
                    (    TRANSACTION_ID,
                        TREASURIES_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

---------------------------------

PROCEDURE MAKE_EXPENSES_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 5
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT EXPENSES_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO EXPENSES_TRANSACTIONS
                    (    TRANSACTION_ID,
                        EXPENSES_ID,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

----------------------------------------

PROCEDURE MAKE_TENANT_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 6
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM TENANTS_ACC_VIEW
            WHERE TENANT_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT TENANTS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO TENANTS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        TENANT_NO,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        ACCOUNT_ID,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.ACCOUNT_ID,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

------------------------------------

PROCEDURE MAKE_OWNER_TRANSACTION IS
CURSOR C1 IS
    SELECT
        DOCUMENT_ID            ,
        DEPARTMENT_ID          ,
        ARRANGMENT_NO          ,
        ACCOUNT_ID             ,
        CURRENCIES_ID          ,
        EXCHANGE_RATE          ,
        CR_DEBIT               ,
        CR_CREDIT              ,
        SETL_FOR               ,
        SETL_REF               ,
        BANK_ID                ,
        CHECK_NO               ,
        CHECK_DATE             ,
        COST_CENTER_ID         ,
        DESCRIPTION         ,
        ACTIVITY_ID           ,
        CREATED_BY             ,
        CREATION_DATE          ,
        CREATION_MACHINE             ,
        UPDATED_BY             ,
        UPDATED_DATE           ,
        UPDATED_MACHINE
    FROM JOURNALS_ENTRIES
    WHERE DOCUMENT_ID = V_JOURNALS_CUR.DOCUMENT_ID
    AND DEPARTMENT_ID = V_JOURNALS_CUR.DEPARTMENT_ID
    AND SETL_FOR = 7
    AND ACCOUNT_ID IN
        (    SELECT ACCOUNT_ID
            FROM OWNERS_ACC_VIEW
            WHERE OWNER_ID = JOURNALS_ENTRIES.SETL_REF)
    AND SETL_REF IS NOT NULL;
V_C1 C1%ROWTYPE;
V_TRANSACTIONS_ID NUMBER;
V_SYSDATE DATE;

BEGIN
    OPEN C1;
    LOOP
            FETCH C1 INTO V_C1;
            EXIT WHEN C1%NOTFOUND;

            SELECT OWNERS_TRANSACTIONS_SEQ.NEXTVAL
            INTO V_TRANSACTIONS_ID
            FROM DUAL;

            SELECT SYSDATE
            INTO V_SYSDATE
            FROM DUAL;

            INSERT INTO OWNERS_TRANSACTIONS
                    (    TRANSACTION_ID,
                        OWNER_NO,
                        BASE_DOCUMENT_TYPES_ID,
                        BASE_DOCUMENT_ID,
                        BASE_DEPARTMENT_ID,
                        TRANSACTION_DATE,
                        DOCUMENT_NO,
                        CURRENCIES_ID,
                        EXCHANGE_RATE,
                        ACCOUNT_ID,
                        DEBIT,
                        CREDIT,
                        DESCRIPTION,
                        CREATED_BY,
                        CREATION_DATE,
                        CREATION_MACHINE,
                        UPDATED_BY,
                        UPDATED_DATE,
                        UPDATED_MACHINE
                    )
            VALUES
                    (    V_TRANSACTIONS_ID,
                        V_C1.SETL_REF,
                        V_JOURNALS_CUR.DOCUMENT_TYPES_ID,
                        V_JOURNALS_CUR.DOCUMENT_ID,
                        V_JOURNALS_CUR.DEPARTMENT_ID,
                        V_JOURNALS_CUR.DOCUMENT_DATE,
                        V_JOURNALS_CUR.DOCUMENT_NO,
                        V_C1.CURRENCIES_ID,
                        V_C1.EXCHANGE_RATE,
                        V_C1.ACCOUNT_ID,
                        V_C1.CR_DEBIT,
                        V_C1.CR_CREDIT,
                        V_C1.DESCRIPTION,
                        V_USER_NAME,
                        V_SYSDATE,
                        V_USER_COMPUTER,
                        NULL,
                        NULL,
                        NULL
                    );
    END LOOP;
    CLOSE C1;
END;

----------------------------------------------




END;
/

CREATE OR REPLACE PACKAGE PCK_BRIGHT IS
    FUNCTION GET_LOCAL_CURRENCY_ID RETURN NUMBER;
    FUNCTION ABLE_TO_CONFIRM(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN;
    FUNCTION ABLE_TO_CANCEL(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN;
    FUNCTION GET_USER_JOB(V_USER_NAME VARCHAR2) RETURN NUMBER;
    FUNCTION GET_FUNCTION_ID(V_FUNCTION_CODE VARCHAR2) RETURN NUMBER;
    FUNCTION GET_EXCHANGE_RATE(V_CURRENCIES_ID NUMBER, V_DATE DATE) RETURN NUMBER;
    FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;
    FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2,V_START_END VARCHAR2, V_TEXT VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;
    PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER);
    PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER);
    FUNCTION GET_DOCUMENT_TYPE_NAME(V_DOCUMENT_TYPES_ID NUMBER, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2;

END;
/

CREATE OR REPLACE PACKAGE BODY PCK_BRIGHT IS
------------------------------------
FUNCTION GET_LOCAL_CURRENCY_ID RETURN NUMBER IS
CURSOR C1 IS
  SELECT CURRENCIES_ID
  FROM CURRENCIES
  WHERE DEFAULT_CURRENCY = 1;
V_CURRENCIES_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_CURRENCIES_ID;
    CLOSE C1;
    RETURN V_CURRENCIES_ID;

END;
----------------------------------------
FUNCTION ABLE_TO_CONFIRM(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN IS
CURSOR C1(V_FUNCTION_ID NUMBER, V_JOB_ID NUMBER) IS
    SELECT FUNCTION_CONFIRM
    FROM FUNCTIONS_JOBS
    WHERE FUNCTION_ID = V_FUNCTION_ID
    AND JOB_ID = V_JOB_ID;
V_FUNCTION_ID NUMBER;
V_JOB_ID NUMBER;
V_FUNCTION_CONFIRM NUMBER;
BEGIN
    V_FUNCTION_CONFIRM :=2;
    V_FUNCTION_ID   := GET_FUNCTION_ID(V_FUNCTION_CODE);
    V_JOB_ID := GET_USER_JOB(V_USER_NAME);
    OPEN C1(V_FUNCTION_ID, V_JOB_ID);
    FETCH C1 INTO V_FUNCTION_CONFIRM;
    CLOSE C1;
    IF V_FUNCTION_CONFIRM = 1 THEN
            RETURN(TRUE);
    ELSE
            RETURN(FALSE);
    END IF;
END;
----------------------------------------

FUNCTION ABLE_TO_CANCEL(V_FUNCTION_CODE VARCHAR2,V_USER_NAME VARCHAR2)RETURN BOOLEAN IS
CURSOR C1(V_FUNCTION_ID NUMBER, V_JOB_ID NUMBER) IS
    SELECT FUNCTION_CANCEL
    FROM FUNCTIONS_JOBS
    WHERE FUNCTION_ID = V_FUNCTION_ID
    AND JOB_ID = V_JOB_ID;
V_FUNCTION_ID NUMBER;
V_JOB_ID NUMBER;
V_FUNCTION_CANCEL NUMBER;
BEGIN
    V_FUNCTION_CANCEL :=2;
    V_FUNCTION_ID   := GET_FUNCTION_ID(V_FUNCTION_CODE);
    V_JOB_ID := GET_USER_JOB(V_USER_NAME);
    OPEN C1(V_FUNCTION_ID, V_JOB_ID);
    FETCH C1 INTO V_FUNCTION_CANCEL;
    CLOSE C1;
    IF V_FUNCTION_CANCEL = 1 THEN
            RETURN(TRUE);
    ELSE
            RETURN(FALSE);
    END IF;
END;

----------------------------------------

FUNCTION GET_USER_JOB(V_USER_NAME VARCHAR2) RETURN NUMBER IS
CURSOR C1 IS
    SELECT JOB_ID
    FROM USERS
    WHERE USER_NAME = V_USER_NAME;
V_JOB_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_JOB_ID;
    CLOSE C1;
    RETURN(V_JOB_ID);
END;
---------------------------------------
FUNCTION GET_FUNCTION_ID(V_FUNCTION_CODE VARCHAR2) RETURN NUMBER IS
CURSOR C1 IS
    SELECT FUNCTION_ID
    FROM FUNCTIONS
    WHERE FUNCTION_CODE = V_FUNCTION_CODE;
V_FUNCTION_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_FUNCTION_ID;
    CLOSE C1;
    RETURN(V_FUNCTION_ID);
END;
---------------------------------------
FUNCTION GET_EXCHANGE_RATE(V_CURRENCIES_ID NUMBER, V_DATE DATE) RETURN NUMBER IS
CURSOR C1 IS
    SELECT EXCHANGE_RATE
    FROM CURRENCIES_RATE
    WHERE CURRENCIES_ID = V_CURRENCIES_ID
    AND CURRENCIES_DATE <= V_DATE
    ORDER BY CURRENCIES_DATE DESC;
V_EXCHANGE_RATE NUMBER;
V_CURRENCIES_DATE DATE;
ALERT_ID NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_EXCHANGE_RATE;
    CLOSE C1;
    RETURN(NVL(V_EXCHANGE_RATE,0));
END;
-------------------------------------
FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
  SELECT DECODE(NVL(V_LANGUAGE_ID,1), '1', PRIMARY_NAME,SECONDARY_NAME) NAME
  FROM MESSAGES
  WHERE MESSAGE_NO = V_MESSAGE_NO;
V_MESSAGE VARCHAR2(1000);
BEGIN
  OPEN C1;
  FETCH C1 INTO  V_MESSAGE;
  CLOSE C1;

  RETURN (V_MESSAGE);
END;
------------------------------------

FUNCTION GET_ERROR_MESSAGE_LANG(V_MESSAGE_NO VARCHAR2,V_START_END VARCHAR2, V_TEXT VARCHAR2, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
  SELECT DECODE(NVL(V_LANGUAGE_ID,1), '1', PRIMARY_NAME,SECONDARY_NAME) NAME
  FROM MESSAGES
  WHERE MESSAGE_NO = V_MESSAGE_NO;
V_MESSAGE VARCHAR2(1000);
BEGIN
  OPEN C1;
  FETCH C1 INTO  V_MESSAGE;
  CLOSE C1;

  IF V_START_END = 'E' THEN
    RETURN (V_MESSAGE || ' ' || V_TEXT);
  ELSE
    RETURN (V_TEXT || ' ' || V_MESSAGE);
  END IF;

END;
------------------------------------



PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER, V_BRANCH_ID NUMBER, V_LANGUAGE_ID NUMBER) IS
CURSOR C1 IS
    SELECT DOCUMENT_ID, DEPARTMENT_ID, CONFIRMED
    FROM JOURNALS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
V_C1 C1%ROWTYPE;
ALERT_ID NUMBER;
BEGIN
    IF NVL(GET_USER_PARAMETER(86, V_BRANCH_ID),1) = 2 THEN
            OPEN C1;
            FETCH C1 INTO V_C1;
            CLOSE C1;

            IF V_C1.CONFIRMED = 1 THEN
                apex_error.add_error(
                    p_message          => PCK_BRIGHT.GET_ERROR_MESSAGE_LANG('10000255',V_LANGUAGE_ID),
                    p_additional_info  => null,
                    p_display_location => apex_error.c_inline_in_notification
                );
            END IF;
    END IF;

    DELETE FROM JOURNALS_ENTRIES
    WHERE (DOCUMENT_ID, DEPARTMENT_ID) IN
                        (    SELECT  DOCUMENT_ID, DEPARTMENT_ID
                            FROM JOURNALS
                            WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
                            AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
                            AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID);

    DELETE FROM JOURNALS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
END;

------------------------------------


PROCEDURE MAKE_ACCOUNT_TRANSACTION_C(V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER, V_DOCUMENT_TYPES_ID NUMBER) IS
BEGIN
    DELETE FROM CHECKS_TRANSACTIONS
    WHERE BASE_DOCUMENT_ID = V_DOCUMENT_ID
    AND BASE_DEPARTMENT_ID = V_DEPARTMENT_ID
    AND BASE_DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;

END;

------------------------------------

FUNCTION GET_DOCUMENT_TYPE_NAME(V_DOCUMENT_TYPES_ID NUMBER, V_LANGUAGE_ID NUMBER) RETURN VARCHAR2 IS
CURSOR C1 IS
    SELECT DECODE(GET_USER_LANG(V_LANGUAGE_ID), 'P', PRIMARY_NAME, SECONDARY_NAME) NAME
    FROM DOCUMENT_TYPES
    WHERE DOCUMENT_TYPES_ID = V_DOCUMENT_TYPES_ID;
V_C1 C1%ROWTYPE;
BEGIN
  OPEN C1;
  FETCH C1 INTO V_C1;
  CLOSE C1;
  RETURN (V_C1.NAME);
END;

------------------------------------

END;
/






ALTER TABLE FUNCTIONS ADD(WORKFLOW NUMBER(1) DEFAULT 2 NOT NULL);
ALTER TABLE FUNCTIONS ADD(MOBILE_ORDER VARCHAR2(25));
ALTER TABLE FUNCTIONS ADD(PRIMARY_NAME_MOBILE VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD(SECONDARY_NAME_MOBILE VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD(FUNCTION_ID_MOBILE NUMBER(15));
ALTER TABLE FUNCTIONS ADD(MOBILE_ICON VARCHAR2(100));
ALTER TABLE FUNCTIONS ADD (FUNCTION_CATEGORY NUMBER(15));
ALTER TABLE FUNCTIONS ADD (FUNCTION_SUB_CATEGORY NUMBER(15));
ALTER TABLE FUNCTIONS ADD (FUNCTION_ORDER NUMBER(15));
ALTER TABLE CODES_SYS ADD (ORDER_BY NUMBER(15));
ALTER TABLE FUNCTIONS_JOBS ADD(FUNCTION_FAVOURITE NUMBER(1));
ALTER TABLE FUNCTIONS_JOBS ADD (ORDER_BY NUMBER(15));


UPDATE FUNCTIONS 
SET WORKFLOW = 1
WHERE FUNCTION_CODE IN (
'ACC_F_019', 
'ACC_F_008', 
'ACC_F_050',
'ACC_F_009',
'SAL_F_011',
'SAL_F_108',
'SAL_F_039',
'SAL_F_006',
'SAL_F_029',
'SAL_F_007',
'SAL_F_030',
'SAL_F_031',
'SAL_F_032',
'SAL_F_102',
'SAL_F_103',
'SAL_F_104',
'SAL_F_101',
'SAL_F_008',
'SAL_F_009',
'PUR_F_028',
'PUR_F_006',
'PUR_F_007',
'PUR_F_008',
'PUR_F_009',
'PUR_F_010',
'PUR_F_011',
'PUR_F_107',
'PUR_F_103',
'PUR_F_104',
'PUR_F_105',
'PUR_F_022',
'PUR_F_023',
'STK_F_006_SAMEH',
'STK_F_007_SAMEH',
'STK_F_008_SAMEH',
'STK_F_009_SAMEH',
'STK_F_010_SAMEH',
'STK_F_011_SAMEH',
'STK_F_012_SAMEH',
'STK_F_013_SAMEH',
'WFL_F_001',
'WFL_F_002',
'FST_F_029',
'FST_F_019',
'FST_F_020',
'FST_F_022',
'FST_F_038',
'FST_F_027',
'PAY_F_051',
'CSH_F_011',
'CSH_F_012',
'CSH_F_013',
'CSH_F_014',
'CSH_F_015',
'CSH_F_016',
'CSH_F_017',
'CSH_F_018',
'CSH_F_019',
'CSH_F_020',
'CSH_F_021',
'CSH_F_022',
'CON_F_010',
'CTR_F_010',
'LGR_F_003',
'LGR_F_004',
'LGR_F_005',
'LGR_F_006',
'LGR_F_007'
);

COMMIT;



  CREATE TABLE "APP_PAGES" 
   (	"APPLICATION_ID" NUMBER, 
	"PAGE_ID" NUMBER, 
	"PRIMARY_NAME" VARCHAR2(200), 
	"SECONDARY_NAME" VARCHAR2(200), 
	"ENTRY_TARGET" VARCHAR2(1000), 
	"PARENT_PAGE_ID" NUMBER, 
	"ENTRY_IMAGE" VARCHAR2(200), 
	"DISPLAY_SEQUENCE" NUMBER, 
	"IS_VISIBLE" NUMBER, 
	"FUNCTION_ID" NUMBER, 
	"APEX_PAGE_ID" NUMBER, 
	 CONSTRAINT "APP_PAGES_PK" PRIMARY KEY ("PAGE_ID") DISABLE, 
	 CONSTRAINT "APP_PAGES_R01" FOREIGN KEY ("PARENT_PAGE_ID")
	  REFERENCES "APP_PAGES" ("PAGE_ID") DISABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INCRE_APP_PAGES" BEFORE INSERT ON APP_PAGES
FOR EACH ROW
BEGIN
IF :NEW.PAGE_ID=-1 OR  :NEW.PAGE_ID IS NULL THEN

SELECT  MAX(PAGE_ID)+1 into :new.PAGE_ID
FROM APP_PAGES;


END IF;
END;


/
ALTER TRIGGER "TRG_INCRE_APP_PAGES" ENABLE;




ALTER TABLE APP_PAGES ADD constraint FK_PP_PAGE_01 foreign key (FUNCTION_ID)
         references FUNCTIONS (FUNCTION_ID)

DROP VIEW BI_PUR_INVOICES_ITEMS_VIEW;

CREATE OR REPLACE FORCE VIEW BI_PUR_INVOICES_ITEMS_VIEW
(
   BRANCH_ID,
   DOCUMENT_ID,
   DOCUMENT_NO,
   DOCUMENT_TYPES_ID,
   DOCUMENT_TYPES_PRIMARY_NAME,
   DOCUMENT_TYPES_SECONDARY_NAME,
   PAYMENT_TYPE,
   PAYMENT_TYPES_PRIMARY_NAME,
   PAYMENT_TYPES_SECONDARY_NAME,
   DEPARTMENT_ID,
   DEPARTMENT_CODE,
   DEPARTMENT_PRIMARY_NAME,
   DEPARTMENT_SECONDARY_NAME,
   DOCUMENT_DATE,
   SUPPLIER_ID,
   SUPPLIER_CODE,
   SUPPLIER_PRIMARY_NAME,
   SUPPLIER_SECONDARY_NAME,
   SUPPLIERS_GROUP_ID,
   SUPPLIERS_GROUP_CODE,
   SUPPLIERS_GROUP_PRIMARY_NAME,
   SUPPLIERS_GROUP_SECONDARY_NAME,
   ITEMS_TYPE,
   ITEMS_ID,
   ITEMS_CODE,
   ITEMS_PRIMARY_NAME,
   ITEMS_SECONDARY_NAME,
   ITEMS_GROUPS_CODE,
   ITEMS_GROUPS_PRIMARY_NAME,
   ITEMS_GROUPS_SECONDARY_NAME,
   ITEM_PRICE
)
AS
   SELECT ALL
          PUR_INVOICES.BRANCH_ID,
          PUR_INVOICES.DOCUMENT_ID,
          PUR_INVOICES.DOCUMENT_NO,
          PUR_INVOICES.DOCUMENT_TYPES_ID,
          DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
          DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
          PUR_INVOICES.PAYMENT_TYPE,
          PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
          PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
          PUR_INVOICES.DEPARTMENT_ID,
          DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
          DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
          DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
          PUR_INVOICES.DOCUMENT_DATE,
          PUR_INVOICES.SUPPLIER_ID,
          SUPPLIERS.USER_CODE SUPPLIER_CODE,
          SUPPLIERS.PRIMARY_NAME SUPPLIER_PRIMARY_NAME,
          SUPPLIERS.SECONDARY_NAME SUPPLIER_SECONDARY_NAME,
          SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID SUPPLIERS_GROUP_ID,
          SUPPLIERS_GROUPS.USER_CODE SUPPLIERS_GROUP_CODE,
          SUPPLIERS_GROUPS.PRIMARY_NAME SUPPLIERS_GROUP_PRIMARY_NAME,
          SUPPLIERS_GROUPS.SECONDARY_NAME SUPPLIERS_GROUP_SECONDARY_NAME,
          ITEMS.ITEM_STOCK_TYPE ITEMS_TYPE,
          PUR_INVOICES_ITEMS.ITEMS_ID,
          ITEMS.USER_CODE ITEMS_CODE,
          ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
          ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
          ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
          ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
          ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
            NVL (PUR_INVOICES_ITEMS.ITEM_COST, 0)
          * PUR_INVOICES_ITEMS.UNIT_FACTOR
          * NVL (PUR_INVOICES_ITEMS.UNIT_QUANTITY, 0)
          * PUR_INVOICES.EXCHANGE_RATE
             ITEM_PRICE
     FROM PUR_INVOICES,
          PUR_INVOICES_ITEMS,
          DEPARTMENTS,
          SUPPLIERS,
          ITEMS,
          ITEMS_GROUPS,
          SUPPLIERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
    WHERE     PUR_INVOICES.DOCUMENT_ID = PUR_INVOICES_ITEMS.DOCUMENT_ID
          AND PUR_INVOICES.DEPARTMENT_ID = PUR_INVOICES_ITEMS.DEPARTMENT_ID
          AND PUR_INVOICES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
          AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
          AND PUR_INVOICES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
          AND PUR_INVOICES.SUPPLIER_ID = SUPPLIERS.SUPPLIER_ID
          AND SUPPLIERS.SUPPLIERS_GROUPS_ID =
                 SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID
          AND (PAYMENT_TYPES.CODES_SYS_ID = PUR_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
          AND PUR_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
          AND PUR_INVOICES.CONFIRMED = 1
          AND PUR_INVOICES.CANCELED <> 1
   UNION ALL
   SELECT ALL
          PUR_RETURNES.BRANCH_ID,
          PUR_RETURNES.DOCUMENT_ID,
          PUR_RETURNES.DOCUMENT_NO,
          PUR_RETURNES.DOCUMENT_TYPES_ID,
          DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
          DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
          PUR_RETURNES.PAYMENT_TYPE,
          PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
          PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
          PUR_RETURNES.DEPARTMENT_ID,
          DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
          DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
          DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
          PUR_RETURNES.DOCUMENT_DATE,
          PUR_RETURNES.SUPPLIER_ID,
          SUPPLIERS.USER_CODE SUPPLIER_CODE,
          SUPPLIERS.PRIMARY_NAME SUPPLIER_PRIMARY_NAME,
          SUPPLIERS.SECONDARY_NAME SUPPLIER_SECONDARY_NAME,
          SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID SUPPLIERS_GROUP_ID,
          SUPPLIERS_GROUPS.USER_CODE SUPPLIERS_GROUP_CODE,
          SUPPLIERS_GROUPS.PRIMARY_NAME SUPPLIERS_GROUP_PRIMARY_NAME,
          SUPPLIERS_GROUPS.SECONDARY_NAME SUPPLIERS_GROUP_SECONDARY_NAME,
          ITEMS.ITEM_STOCK_TYPE ITEMS_TYPE,
          PUR_RETURNES_ITEMS.ITEMS_ID,
          ITEMS.USER_CODE ITEMS_CODE,
          ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
          ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
          ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
          ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
          ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
            -1
          * (  NVL (PUR_RETURNES_ITEMS.ITEM_COST, 0)
             * PUR_RETURNES_ITEMS.UNIT_FACTOR
             * NVL (PUR_RETURNES_ITEMS.UNIT_QUANTITY, 0)
             * PUR_RETURNES.EXCHANGE_RATE)
             ITEM_PRICE
     FROM PUR_RETURNES,
          PUR_RETURNES_ITEMS,
          DEPARTMENTS,
          SUPPLIERS,
          ITEMS,
          ITEMS_GROUPS,
          SUPPLIERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
    WHERE     PUR_RETURNES.DOCUMENT_ID = PUR_RETURNES_ITEMS.DOCUMENT_ID
          AND PUR_RETURNES.DEPARTMENT_ID = PUR_RETURNES_ITEMS.DEPARTMENT_ID
          AND PUR_RETURNES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
          AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
          AND PUR_RETURNES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
          AND PUR_RETURNES.SUPPLIER_ID = SUPPLIERS.SUPPLIER_ID
          AND SUPPLIERS.SUPPLIERS_GROUPS_ID =
                 SUPPLIERS_GROUPS.SUPPLIERS_GROUPS_ID
          AND (PAYMENT_TYPES.CODES_SYS_ID = PUR_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
          AND PUR_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
          AND PUR_RETURNES.CONFIRMED = 1
          AND PUR_RETURNES.CANCELED <> 1;

DROP VIEW BI_SAL_INVOICES_ITEMS_VIEW;

DROP MATERIALIZED VIEW BI_SAL_INVOICES_ITEMS_VIEW;

CREATE MATERIALIZED VIEW BI_SAL_INVOICES_ITEMS_VIEW
(BRANCH_ID, DOCUMENT_ID, DOCUMENT_NO, DOCUMENT_TYPES_ID, DOCUMENT_TYPES_PRIMARY_NAME,DOCUMENT_TYPES_SECONDARY_NAME,
DEPARTMENT_ID, DEPARTMENT_CODE, DEPARTMENT_PRIMARY_NAME, DEPARTMENT_SECONDARY_NAME, 
 DOCUMENT_DATE, CUSTOMER_ID, CUSTOMER_CODE, CUSTOMER_PRIMARY_NAME, CUSTOMER_SECONDARY_NAME, 
 CUSTOMERS_GROUP_ID, CUSTOMERS_GROUP_CODE, CUSTOMERS_GROUP_PRIMARY_NAME, CUSTOMERS_GROUP_SECONDARY_NAME, SALES_MAN_ID, 
 SALES_MAN_CODE, SALES_MAN_PRIMARY_NAME, SALES_MAN_SECONDARY_NAME, ITEMS_TYPE, ITEMS_ID, 
 ITEMS_CODE, ITEMS_PRIMARY_NAME, ITEMS_SECONDARY_NAME, ITEMS_GROUPS_CODE, ITEMS_GROUPS_PRIMARY_NAME, 
 ITEMS_GROUPS_SECONDARY_NAME, PAYMENT_TYPE, PAYMENT_TYPES_PRIMARY_NAME, PAYMENT_TYPES_SECONDARY_NAME, ITEM_PRICE, ITEM_COST)
REFRESH COMPLETE ON DEMAND AS
SELECT ALL
SAL_INVOICES.BRANCH_ID,
SAL_INVOICES.DOCUMENT_ID,
SAL_INVOICES.DOCUMENT_NO,
SAL_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_INVOICES.DOCUMENT_DATE,
SAL_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'I' ITEMS_TYPE,
SAL_INVOICES_ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
SAL_INVOICES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES_ITEMS.TOTAL_PRICE * SAL_INVOICES.EXCHANGE_RATE  
-(((SAL_INVOICES.INVOICE_DISCOUNT / SAL_INVOICES.TOTAL_PRICE * SAL_INVOICES_ITEMS.TOTAL_PRICE ) +SAL_INVOICES_ITEMS.TOTAL_DISCOUNT) * SAL_INVOICES.EXCHANGE_RATE) ITEM_PRICE,
SAL_INVOICES_ITEMS.ITEM_COST * SAL_INVOICES_ITEMS.UNIT_QUANTITY * SAL_INVOICES_ITEMS.UNIT_FACTOR ITEM_COST 
FROM SAL_INVOICES LEFT JOIN SALES_MAN ON SAL_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID  , SAL_INVOICES_ITEMS, DEPARTMENTS, CUSTOMERS, ITEMS, ITEMS_GROUPS, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_ITEMS.DOCUMENT_ID
AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_ITEMS.DEPARTMENT_ID
AND SAL_INVOICES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND SAL_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_INVOICES.CONFIRMED=1
AND SAL_INVOICES.CANCELED <> 1
AND SAL_INVOICES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_SERVICES_INVOICES.BRANCH_ID,
SAL_SERVICES_INVOICES.DOCUMENT_ID,
SAL_SERVICES_INVOICES.DOCUMENT_NO,
SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_SERVICES_INVOICES.DOCUMENT_DATE,
SAL_SERVICES_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_SERVICES_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME, 
'S' ITEMS_TYPE,
SAL_SERVICES_INVOICES_DTL.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_SERVICES_INVOICES.PAYMENT_TYPE PAYMENT_TYPES,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_INVOICES_DTL.SERVICES_VALUE * SAL_SERVICES_INVOICES.EXCHANGE_RATE 
- ( (SAL_SERVICES_INVOICES.INVOICE_DISCOUNT /  SAL_SERVICES_INVOICES.TOTAL_PRICE * SAL_SERVICES_INVOICES_DTL.SERVICES_VALUE * SAL_SERVICES_INVOICES.EXCHANGE_RATE)) ITEM_PRICE,
0 ITEM_COST
FROM SAL_SERVICES_INVOICES LEFT JOIN SALES_MAN ON SAL_SERVICES_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID   , SAL_SERVICES_INVOICES_DTL , DEPARTMENTS, CUSTOMERS, SALES_SERVICES , CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_DTL.DOCUMENT_ID
AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_DTL.DEPARTMENT_ID
AND SAL_SERVICES_INVOICES_DTL.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_SERVICES_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_SERVICES_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_SERVICES_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_SERVICES_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_SERVICES_INVOICES.CONFIRMED=1
AND SAL_SERVICES_INVOICES.CANCELED <> 1
AND SAL_SERVICES_INVOICES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_INVOICES.BRANCH_ID,
SAL_INVOICES.DOCUMENT_ID,
SAL_INVOICES.DOCUMENT_NO,
SAL_INVOICES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_INVOICES.DOCUMENT_DATE,
SAL_INVOICES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_INVOICES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'S' ITEMS_TYPE,
SAL_INVOICES_SERVICES.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_INVOICES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
SAL_INVOICES_SERVICES.SERVICES_VALUE * SAL_INVOICES.EXCHANGE_RATE ITEM_PRICE,
0 ITEM_COST
FROM SAL_INVOICES LEFT JOIN SALES_MAN ON SAL_INVOICES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID , SAL_INVOICES_SERVICES , DEPARTMENTS, CUSTOMERS, SALES_SERVICES, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_SERVICES.DOCUMENT_ID
AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_SERVICES.DEPARTMENT_ID
AND SAL_INVOICES_SERVICES.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_INVOICES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_INVOICES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_INVOICES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_INVOICES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_INVOICES.CONFIRMED=1
AND SAL_INVOICES.CANCELED <> 1
UNION ALL
SELECT ALL
SAL_RETURNES.BRANCH_ID,
SAL_RETURNES.DOCUMENT_ID,
SAL_RETURNES.DOCUMENT_NO,
SAL_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_RETURNES.DOCUMENT_DATE,
SAL_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'I' ITEMS_TYPE,
SAL_RETURNES_ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
SAL_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_RETURNES_ITEMS.TOTAL_PRICE * SAL_RETURNES.EXCHANGE_RATE  
-(((SAL_RETURNES.INVOICE_DISCOUNT / SAL_RETURNES.TOTAL_PRICE * SAL_RETURNES_ITEMS.TOTAL_PRICE ) +SAL_RETURNES_ITEMS.TOTAL_DISCOUNT) * SAL_RETURNES.EXCHANGE_RATE)) ITEM_PRICE,
-1 * (SAL_RETURNES_ITEMS.ITEM_COST * SAL_RETURNES_ITEMS.UNIT_QUANTITY * SAL_RETURNES_ITEMS.UNIT_FACTOR) ITEM_COST 
FROM SAL_RETURNES LEFT JOIN SALES_MAN ON SAL_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID  , SAL_RETURNES_ITEMS, DEPARTMENTS, CUSTOMERS, ITEMS, ITEMS_GROUPS, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_ITEMS.DOCUMENT_ID
AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_ITEMS.DEPARTMENT_ID
AND SAL_RETURNES_ITEMS.ITEMS_ID = ITEMS.ITEMS_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND SAL_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_RETURNES.CONFIRMED=1
AND SAL_RETURNES.CANCELED <> 1
AND SAL_RETURNES.TOTAL_PRICE <>0
UNION ALL
SELECT ALL
SAL_SERVICES_RETURNES.BRANCH_ID,
SAL_SERVICES_RETURNES.DOCUMENT_ID,
SAL_SERVICES_RETURNES.DOCUMENT_NO,
SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_SERVICES_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_SERVICES_RETURNES.DOCUMENT_DATE,
SAL_SERVICES_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_SERVICES_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME, 
'S' ITEMS_TYPE,
SAL_SERVICES_RETURNES_DTL.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_SERVICES_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_SERVICES_RETURNES_DTL.SERVICES_VALUE * SAL_SERVICES_RETURNES.EXCHANGE_RATE 
- ( (SAL_SERVICES_RETURNES.INVOICE_DISCOUNT /  SAL_SERVICES_RETURNES.TOTAL_PRICE * SAL_SERVICES_RETURNES_DTL.SERVICES_VALUE * SAL_SERVICES_RETURNES.EXCHANGE_RATE))) ITEM_PRICE,
0 ITEM_COST
FROM SAL_SERVICES_RETURNES LEFT JOIN SALES_MAN ON SAL_SERVICES_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID   , SAL_SERVICES_RETURNES_DTL , DEPARTMENTS, CUSTOMERS, SALES_SERVICES , CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_DTL.DOCUMENT_ID
AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_DTL.DEPARTMENT_ID
AND SAL_SERVICES_RETURNES_DTL.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_SERVICES_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_SERVICES_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_SERVICES_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_SERVICES_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_SERVICES_RETURNES.CONFIRMED=1
AND SAL_SERVICES_RETURNES.CANCELED <> 1
AND SAL_SERVICES_RETURNES.TOTAL_PRICE <> 0
UNION ALL
SELECT ALL
SAL_RETURNES.BRANCH_ID,
SAL_RETURNES.DOCUMENT_ID,
SAL_RETURNES.DOCUMENT_NO,
SAL_RETURNES.DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
SAL_RETURNES.DEPARTMENT_ID,
DEPARTMENTS.USER_CODE DEPARTMENT_CODE,
DEPARTMENTS.PRIMARY_NAME DEPARTMENT_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME DEPARTMENT_SECONDARY_NAME,
SAL_RETURNES.DOCUMENT_DATE,
SAL_RETURNES.CUSTOMER_ID,
CUSTOMERS.USER_CODE CUSTOMER_CODE,
CUSTOMERS.PRIMARY_NAME CUSTOMER_PRIMARY_NAME,
CUSTOMERS.SECONDARY_NAME CUSTOMER_SECONDARY_NAME,
CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID CUSTOMERS_GROUP_ID,
CUSTOMERS_GROUPS.USER_CODE CUSTOMERS_GROUP_CODE,
CUSTOMERS_GROUPS.PRIMARY_NAME CUSTOMERS_GROUP_PRIMARY_NAME,
CUSTOMERS_GROUPS.SECONDARY_NAME CUSTOMERS_GROUP_SECONDARY_NAME,
SAL_RETURNES.SALES_MAN_ID,
SALES_MAN.USER_CODE SALES_MAN_CODE,
SALES_MAN.PRIMARY_NAME SALES_MAN_PRIMARY_NAME,
SALES_MAN.SECONDARY_NAME SALES_MAN_SECONDARY_NAME,
'S' ITEMS_TYPE,
SAL_RETURNES_SERVICES.SALES_SERVICES_ID ITEMS_ID,
SALES_SERVICES.USER_CODE ITEMS_CODE,
SALES_SERVICES.PRIMARY_NAME ITEMS_PRIMARY_NAME,
SALES_SERVICES.SECONDARY_NAME ITEMS_SECONDARY_NAME,
NULL ITEMS_GROUPS_CODE,
NULL ITEMS_GROUPS_PRIMARY_NAME,
NULL ITEMS_GROUPS_SECONDARY_NAME,
SAL_RETURNES.PAYMENT_TYPE,
PAYMENT_TYPES.PRIMARY_NAME PAYMENT_TYPES_PRIMARY_NAME,
PAYMENT_TYPES.SECONDARY_NAME PAYMENT_TYPES_SECONDARY_NAME,
-1 * (SAL_RETURNES_SERVICES.SERVICES_VALUE * SAL_RETURNES.EXCHANGE_RATE) ITEM_PRICE,
0 ITEM_COST
FROM SAL_RETURNES LEFT JOIN SALES_MAN ON SAL_RETURNES.SALES_MAN_ID = SALES_MAN.SALES_MAN_ID , SAL_RETURNES_SERVICES , DEPARTMENTS, CUSTOMERS, SALES_SERVICES, CUSTOMERS_GROUPS, CODES_SYS PAYMENT_TYPES, DOCUMENT_TYPES
WHERE SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_SERVICES.DOCUMENT_ID
AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_SERVICES.DEPARTMENT_ID
AND SAL_RETURNES_SERVICES.SALES_SERVICES_ID = SALES_SERVICES.SALES_SERVICES_ID
AND SAL_RETURNES.DEPARTMENT_ID =DEPARTMENTS.DEPARTMENT_ID
AND SAL_RETURNES.CUSTOMER_ID =CUSTOMERS.CUSTOMER_ID
AND CUSTOMERS.CUSTOMERS_GROUPS_ID =CUSTOMERS_GROUPS.CUSTOMERS_GROUPS_ID
AND (PAYMENT_TYPES.CODES_SYS_ID = SAL_RETURNES.PAYMENT_TYPE AND PAYMENT_TYPES.CODE_TYPES_ID = 107)
AND SAL_RETURNES.DOCUMENT_TYPES_ID = DOCUMENT_TYPES.DOCUMENT_TYPES_ID
AND SAL_RETURNES.CONFIRMED=1
AND SAL_RETURNES.CANCELED <> 1
;

CREATE INDEX MV_SAL_001 ON BI_SAL_INVOICES_ITEMS_VIEW(DOCUMENT_DATE);
CREATE INDEX MV_SAL_002 ON BI_SAL_INVOICES_ITEMS_VIEW(TO_CHAR(DOCUMENT_DATE,'MM-RRRR'));
CREATE INDEX MV_SAL_003 ON BI_SAL_INVOICES_ITEMS_VIEW(BRANCH_ID);
CREATE INDEX MV_SAL_004 ON BI_SAL_INVOICES_ITEMS_VIEW(DEPARTMENT_CODE);
CREATE INDEX MV_SAL_005 ON BI_SAL_INVOICES_ITEMS_VIEW(CUSTOMER_CODE);
CREATE INDEX MV_SAL_006 ON BI_SAL_INVOICES_ITEMS_VIEW(CUSTOMERS_GROUP_CODE);
CREATE INDEX MV_SAL_007 ON BI_SAL_INVOICES_ITEMS_VIEW(SALES_MAN_CODE);
CREATE INDEX MV_SAL_008 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_TYPE);
CREATE INDEX MV_SAL_009 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_CODE);
CREATE INDEX MV_SAL_010 ON BI_SAL_INVOICES_ITEMS_VIEW(ITEMS_GROUPS_CODE);
CREATE INDEX MV_SAL_011 ON BI_SAL_INVOICES_ITEMS_VIEW(TO_CHAR(DOCUMENT_DATE,'DD-MM-RRRR'));




DROP MATERIALIZED VIEW BI_INVENTORY_ITEMS_VIEW;

CREATE MATERIALIZED VIEW BI_INVENTORY_ITEMS_VIEW (BRANCH_ID,STORES_ID,STORES_CODE,STORES_PRIMARY_NAME,STORES_SECONDARY_NAME,ITEMS_ID,ITEMS_CODE,ITEMS_PRIMARY_NAME,ITEMS_SECONDARY_NAME,ITEMS_GROUPS_ID,ITEMS_GROUPS_CODE,ITEMS_GROUPS_PRIMARY_NAME,ITEMS_GROUPS_SECONDARY_NAME, ITEMS_UNITS_PRIMARY_NAME, ITEMS_UNITS_SECONDARY_NAME,MONTH_END_DATE,TOTAL_COST, CURRENT_BALANCE,
ITEM_NATURE,
ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURE_SECONDARY_NAME
)
REFRESH COMPLETE ON DEMAND 
AS
SELECT ITEMS.BRANCH_ID,
DEPARTMENTS.DEPARTMENT_ID STORES_ID,
DEPARTMENTS.USER_CODE STORES_CODE,
DEPARTMENTS.PRIMARY_NAME STORES_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME STORES_SECONDARY_NAME,
ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.ITEMS_GROUPS_ID,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
ITEMS_UNITS.PRIMARY_NAME ITEMS_UNITS_PRIMARY_NAME,
ITEMS_UNITS.SECONDARY_NAME ITEMS_UNITS_SECONDARY_NAME,
T1.MONTH_END_DATE,
T1.TOTAL_COST,
T1.CURRENT_BALANCE,
ITEMS.ITEM_NATURE,
ITEM_NATURES.PRIMARY_NAME ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURES.SECONDARY_NAME ITEM_NATURE_SECONDARY_NAME
FROM (
WITH ITEMS_TRANSACTIONS_MAX
AS 
(  SELECT STORES_ID,
   ITEMS_ID,
   LAST_DAY (TRANSACTION_DATE) MONTH_END_DATE,
   MAX (TRANSACTION_DATE) TRANSACTION_DATE --, MAX(ITEMS_TRANSACTIONS_ID) ITEMS_TRANSACTIONS_ID
   FROM ITEMS_TRANSACTIONS
   GROUP BY STORES_ID, ITEMS_ID, LAST_DAY (TRANSACTION_DATE)
),
ITEMS_TRANSACTIONS_MAX_TR
AS 
(  SELECT ITEMS_TRANSACTIONS_MAX.STORES_ID,
   ITEMS_TRANSACTIONS_MAX.ITEMS_ID,
   ITEMS_TRANSACTIONS_MAX.MONTH_END_DATE,
   MAX (ITEMS_TRANSACTIONS.ITEMS_TRANSACTIONS_ID)
   ITEMS_TRANSACTIONS_ID
   FROM ITEMS_TRANSACTIONS_MAX, ITEMS_TRANSACTIONS
   WHERE     ITEMS_TRANSACTIONS_MAX.STORES_ID =
   ITEMS_TRANSACTIONS.STORES_ID
   AND ITEMS_TRANSACTIONS_MAX.ITEMS_ID =
   ITEMS_TRANSACTIONS.ITEMS_ID
   AND ITEMS_TRANSACTIONS_MAX.TRANSACTION_DATE =
   ITEMS_TRANSACTIONS.TRANSACTION_DATE
   GROUP BY ITEMS_TRANSACTIONS_MAX.STORES_ID,
   ITEMS_TRANSACTIONS_MAX.ITEMS_ID,
   ITEMS_TRANSACTIONS_MAX.MONTH_END_DATE
)
SELECT ITEMS_TRANSACTIONS.STORES_ID,
ITEMS_TRANSACTIONS.ITEMS_ID,
ITEMS_TRANSACTIONS.CURRENT_BALANCE,
ITEMS_TRANSACTIONS.CURRENT_BALANCE
* ITEMS_TRANSACTIONS.AVERAGE_COST
TOTAL_COST,
ITEMS_TRANSACTIONS_MAX_TR.MONTH_END_DATE
FROM ITEMS_TRANSACTIONS_MAX_TR, ITEMS_TRANSACTIONS
WHERE     ITEMS_TRANSACTIONS_MAX_TR.STORES_ID = ITEMS_TRANSACTIONS.STORES_ID
AND ITEMS_TRANSACTIONS_MAX_TR.ITEMS_ID = ITEMS_TRANSACTIONS.ITEMS_ID
AND ITEMS_TRANSACTIONS_MAX_TR.ITEMS_TRANSACTIONS_ID = ITEMS_TRANSACTIONS.ITEMS_TRANSACTIONS_ID) T1,
STORES_ITEMS ST1,
ITEMS LEFT JOIN CODES ITEMS_UNITS ON (ITEMS.UNITS_ID = ITEMS_UNITS.CODES_ID), 
ITEMS_GROUPS,
DEPARTMENTS,
CODES_SYS ITEM_NATURES 
WHERE     ST1.ITEMS_ID = ITEMS.ITEMS_ID
AND DEPARTMENTS.DEPARTMENT_ID = ST1.STORES_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND T1.STORES_ID = ST1.STORES_ID
AND T1.ITEMS_ID = ST1.ITEMS_ID
AND (ITEMS.ITEM_NATURE = ITEM_NATURES.CODES_SYS_ID AND ITEM_NATURES.CODE_TYPES_ID = 14)
;




CREATE INDEX MV_STK_001 ON BI_INVENTORY_ITEMS_VIEW(MONTH_END_DATE);
CREATE INDEX MV_STK_002 ON BI_INVENTORY_ITEMS_VIEW(TO_CHAR(MONTH_END_DATE,'MM-RRRR'));
CREATE INDEX MV_STK_003 ON BI_INVENTORY_ITEMS_VIEW(TO_CHAR(MONTH_END_DATE,'DD-MM-RRRR'));
CREATE INDEX MV_STK_004 ON BI_INVENTORY_ITEMS_VIEW(BRANCH_ID);
CREATE INDEX MV_STK_005 ON BI_INVENTORY_ITEMS_VIEW(STORES_ID);
CREATE INDEX MV_STK_006 ON BI_INVENTORY_ITEMS_VIEW(STORES_CODE);
CREATE INDEX MV_STK_007 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_ID);
CREATE INDEX MV_STK_008 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_CODE);
CREATE INDEX MV_STK_009 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_GROUPS_ID);
CREATE INDEX MV_STK_010 ON BI_INVENTORY_ITEMS_VIEW(ITEMS_GROUPS_CODE);
CREATE UNIQUE INDEX MV_STK_011 ON BI_INVENTORY_ITEMS_VIEW(STORES_ID, ITEMS_ID, MONTH_END_DATE);
CREATE INDEX MV_STK_013 ON BI_INVENTORY_ITEMS_VIEW(BRANCH_ID,STORES_ID, ITEMS_ID, MONTH_END_DATE);

ALTER TABLE MONTH_TABLE ADD CONSTRAINT MONTH_TABLE_PK PRIMARY KEY(NONTH_NAME);


------------
DROP MATERIALIZED VIEW BI_INVENTORY_ITEMS_INOUT_VIEW;

CREATE MATERIALIZED VIEW BI_INVENTORY_ITEMS_INOUT_VIEW (BRANCH_ID,STORES_ID,STORES_CODE,STORES_PRIMARY_NAME,STORES_SECONDARY_NAME,ITEMS_ID,ITEMS_CODE,ITEMS_PRIMARY_NAME,ITEMS_SECONDARY_NAME,ITEMS_GROUPS_ID,ITEMS_GROUPS_CODE,ITEMS_GROUPS_PRIMARY_NAME,ITEMS_GROUPS_SECONDARY_NAME, ITEMS_UNITS_PRIMARY_NAME, ITEMS_UNITS_SECONDARY_NAME,
BASE_DEPARTMENT_ID,
BASE_DOCUMENT_TYPES_ID,
DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES_SECONDARY_NAME,
BASE_DOCUMENT_ID,
BASE_DOCUMENT_NO,
TRANSACTION_DATE,
CALC_TYPE,
QTY,
CURRENT_BALANCE,
QTY_COST,
AVERAGE_COST,
ITEM_NATURE,
ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURE_SECONDARY_NAME
)
AS
SELECT ITEMS.BRANCH_ID,
DEPARTMENTS.DEPARTMENT_ID STORES_ID,
DEPARTMENTS.USER_CODE STORES_CODE,
DEPARTMENTS.PRIMARY_NAME STORES_PRIMARY_NAME,
DEPARTMENTS.SECONDARY_NAME STORES_SECONDARY_NAME,
ITEMS.ITEMS_ID,
ITEMS.USER_CODE ITEMS_CODE,
ITEMS.PRIMARY_NAME ITEMS_PRIMARY_NAME,
ITEMS.SECONDARY_NAME ITEMS_SECONDARY_NAME,
ITEMS_GROUPS.ITEMS_GROUPS_ID,
ITEMS_GROUPS.USER_CODE ITEMS_GROUPS_CODE,
ITEMS_GROUPS.PRIMARY_NAME ITEMS_GROUPS_PRIMARY_NAME,
ITEMS_GROUPS.SECONDARY_NAME ITEMS_GROUPS_SECONDARY_NAME,
ITEMS_UNITS.PRIMARY_NAME ITEMS_UNITS_PRIMARY_NAME,
ITEMS_UNITS.SECONDARY_NAME ITEMS_UNITS_SECONDARY_NAME,
ITEMS_TRANSACTIONS.BASE_DEPARTMENT_ID,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_TYPES_ID,
DOCUMENT_TYPES.PRIMARY_NAME DOCUMENT_TYPES_PRIMARY_NAME,
DOCUMENT_TYPES.SECONDARY_NAME DOCUMENT_TYPES_SECONDARY_NAME,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_ID,
ITEMS_TRANSACTIONS.BASE_DOCUMENT_NO,
ITEMS_TRANSACTIONS.TRANSACTION_DATE,
ITEMS_TRANSACTIONS.CALC_TYPE,
ITEMS_TRANSACTIONS.QTY,
ITEMS_TRANSACTIONS.CURRENT_BALANCE,
ITEMS_TRANSACTIONS.QTY_COST,
ITEMS_TRANSACTIONS.AVERAGE_COST,
ITEMS.ITEM_NATURE,
ITEM_NATURES.PRIMARY_NAME ITEM_NATURE_PRIMARY_NAME,
ITEM_NATURES.SECONDARY_NAME ITEM_NATURE_SECONDARY_NAME
FROM STORES_ITEMS ST1,
ITEMS LEFT JOIN CODES ITEMS_UNITS ON (ITEMS.UNITS_ID = ITEMS_UNITS.CODES_ID), 
ITEMS_GROUPS,
DEPARTMENTS, ITEMS_TRANSACTIONS,
DOCUMENT_TYPES,
CODES_SYS ITEM_NATURES
WHERE     ST1.ITEMS_ID = ITEMS.ITEMS_ID
AND DEPARTMENTS.DEPARTMENT_ID = ST1.STORES_ID
AND ITEMS.ITEMS_GROUPS_ID = ITEMS_GROUPS.ITEMS_GROUPS_ID
AND ITEMS_TRANSACTIONS.STORES_ID = ST1.STORES_ID
AND ITEMS_TRANSACTIONS.ITEMS_ID = ST1.ITEMS_ID
AND DOCUMENT_TYPES.DOCUMENT_TYPES_ID = ITEMS_TRANSACTIONS.BASE_DOCUMENT_TYPES_ID
AND (ITEMS.ITEM_NATURE = ITEM_NATURES.CODES_SYS_ID AND ITEM_NATURES.CODE_TYPES_ID = 14)
;


CREATE INDEX MV_INOUT_STK_001 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TRANSACTION_DATE);
CREATE INDEX MV_INOUT_STK_002 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TO_CHAR(TRANSACTION_DATE,'MM-RRRR'));
CREATE INDEX MV_INOUT_STK_003 ON BI_INVENTORY_ITEMS_INOUT_VIEW(TO_CHAR(TRANSACTION_DATE,'DD-MM-RRRR'));
CREATE INDEX MV_INOUT_STK_004 ON BI_INVENTORY_ITEMS_INOUT_VIEW(BRANCH_ID);
CREATE INDEX MV_INOUT_STK_005 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_ID);
CREATE INDEX MV_INOUT_STK_006 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_CODE);
CREATE INDEX MV_INOUT_STK_007 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_ID);
CREATE INDEX MV_INOUT_STK_008 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_CODE);
CREATE INDEX MV_INOUT_STK_009 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_GROUPS_ID);
CREATE INDEX MV_INOUT_STK_010 ON BI_INVENTORY_ITEMS_INOUT_VIEW(ITEMS_GROUPS_CODE);
CREATE INDEX MV_INOUT_STK_011 ON BI_INVENTORY_ITEMS_INOUT_VIEW(STORES_ID, ITEMS_ID, TRANSACTION_DATE);
CREATE INDEX MV_INOUT_STK_013 ON BI_INVENTORY_ITEMS_INOUT_VIEW(BRANCH_ID,STORES_ID, ITEMS_ID, TRANSACTION_DATE);


----------


DROP MATERIALIZED VIEW BI_PAYROLL_VIEW;

CREATE MATERIALIZED VIEW BI_PAYROLL_VIEW
(
   BRANCH_ID,
   EMPLOYEE_ID,
   EMPLOYEE_TYPE,
   EMPLOYEE_TYPE_PRIMARY_NAME,
   EMPLOYEE_TYPE_SECONDARY_NAME,
   EMPLOYEE_CODE,
   EMPLOYEE_PRIMARY_NAME,
   EMPLOYEE_SECONDARY_NAME,
   EMP_DEPARTMENT_ID,
   EMP_DEPARTMENT_CODE,
   EMP_DEPARTMENT_PRIMARY_NAME,
   EMP_DEPARTMENT_SECONDARY_NAME,
   CITIZEN,
   EMP_JOB_ID,
   EMP_JOB_CODE,
   EMP_JOB_PRIMARY_NAME,
   EMP_JOB_SECONDARY_NAME,
   EMP_GRADES_ID,
   EMP_GRADES_USER_CODE,
   EMP_GRADES_PRIMARY_NAME,
   EMP_GRADES_SECONDARY_NAME,
   GENDER,
   GENDER_PRIMARY_NAME,
   GENDER_SECONDARY_NAME,
   NATIONALITY,
   NATIONALITY_PRIMARY_NAME,
   NATIONALITY_SECONDARY_NAME,
   SOCIAL_STATUS,
   SOCIAL_STATUS_PRIMARY_NAME,
   SOCIAL_STATUS_SECONDARY_NAME,
   MONTH,
   ENTITLE_DEDUCT_ID,
   ENTITLE_DEDUCT_CODE,
   ENTITLE_DEDUCT_PRIMARY_NAME,
   ENTITLE_DEDUCT_SECONDARY_NAME,
   ENTITLE_DEDUCT_FLAG,
   SALARY
)
REFRESH COMPLETE ON DEMAND AS
  SELECT ALL
          EMPLOYEES.BRANCH_ID,
          EMPLOYEES.EMPLOYEE_ID,
          EMPLOYEES.EMPLOYEE_TYPE,
          EMPLOYEE_TYPES.PRIMARY_NAME EMPLOYEE_TYPE_PRIMARY_NAME,
          EMPLOYEE_TYPES.SECONDARY_NAME EMPLOYEE_TYPE_SECONDARY_NAME,
          EMPLOYEES.USER_CODE EMPLOYEE_CODE,
          EMPLOYEES.PRIMARY_NAME EMPLOYEE_PRIMARY_NAME,
          EMPLOYEES.SECONDARY_NAME EMPLOYEE_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.EMP_DEPARTMENT_ID,
          EMP_DEPARTMENT.USER_CODE EMP_DEPARTMENT_CODE,
          EMP_DEPARTMENT.PRIMARY_NAME EMP_DEPARTMENT_PRIMARY_NAME,
          EMP_DEPARTMENT.SECONDARY_NAME EMP_DEPARTMENT_SECONDARY_NAME,
          EMPLOYEES.CITIZEN,
          EMPLOYEE_MONTH_TRANS.EMP_JOB_ID,
          EMP_JOBS.USER_CODE EMP_JOBS_CODE,
          EMP_JOBS.PRIMARY_NAME EMP_JOBS_PRIMARY_NAME,
          EMP_JOBS.SECONDARY_NAME EMP_JOBS_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.EMP_GRADES_ID,
          EMP_GRADES.USER_CODE EMP_GRADES_USER_CODE,
          EMP_GRADES.PRIMARY_NAME EMP_GRADES_PRIMARY_NAME,
          EMP_GRADES.SECONDARY_NAME EMP_GRADES_SECONDARY_NAME,
          EMPLOYEES.GENDER,
          GENDERS.PRIMARY_NAME GENDER_PRIMARY_NAME,
          GENDERS.SECONDARY_NAME GENDER_SECONDARY_NAME,
          EMPLOYEES.NATIONALITY,
          NATIONALITIES.PRIMARY_NAME NATIONALITY_PRIMARY_NAME,
          NATIONALITIES.SECONDARY_NAME NATIONALITY_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.SOCIAL_STATUS,
          SOCIAL_STATUS.PRIMARY_NAME SOCIAL_STATUS_PRIMARY_NAME,
          SOCIAL_STATUS.SECONDARY_NAME SOCIAL_STATUS_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.MONTH,
          EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_ID,
          ENTITLE_DEDUCT.USER_CODE ENTITLE_DEDUCT_CODE,
          ENTITLE_DEDUCT.PRIMARY_NAME ENTITLE_DEDUCT_PRIMARY_NAME,
          ENTITLE_DEDUCT.SECONDARY_NAME ENTITLE_DEDUCT_SECONDARY_NAME,
          EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG,
          DECODE (EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG, 1, EMPLOYEE_MONTH_TRANS.AMOUNT, -1 * EMPLOYEE_MONTH_TRANS.AMOUNT) SALARY
     FROM EMPLOYEES 
          LEFT JOIN CODES_SYS EMPLOYEE_TYPES ON (EMPLOYEES.EMPLOYEE_TYPE = EMPLOYEE_TYPES.CODES_SYS_ID AND EMPLOYEE_TYPES.CODE_TYPES_ID = 74)
          LEFT JOIN CODES_SYS GENDERS ON (EMPLOYEES.GENDER = GENDERS.CODES_SYS_ID AND GENDERS.CODE_TYPES_ID = 59)
          LEFT JOIN CODES NATIONALITIES ON (EMPLOYEES.NATIONALITY = NATIONALITIES.CODES_ID),
          EMP_DEPARTMENT,
          EMP_JOBS,
          EMPLOYEE_MONTH_TRANS
          LEFT JOIN EMP_GRADES ON (EMP_GRADES.EMP_GRADES_ID = EMPLOYEE_MONTH_TRANS.EMP_GRADES_ID )
          LEFT JOIN CODES SOCIAL_STATUS ON (EMPLOYEE_MONTH_TRANS.SOCIAL_STATUS = SOCIAL_STATUS.CODES_ID),
          ENTITLE_DEDUCT
    WHERE     EMPLOYEES.EMPLOYEE_ID = EMPLOYEE_MONTH_TRANS.EMPLOYEE_ID
          AND EMPLOYEE_MONTH_TRANS.EMP_DEPARTMENT_ID =
                 EMP_DEPARTMENT.EMP_DEPARTMENT_ID
          AND EMPLOYEE_MONTH_TRANS.EMP_JOB_ID = EMP_JOBS.EMP_JOB_ID
          AND EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_ID =
                 ENTITLE_DEDUCT.ENTITLE_DEDUCT_ID
          AND EMPLOYEE_MONTH_TRANS.ENTITLE_DEDUCT_FLAG =
                 ENTITLE_DEDUCT.ENTITLE_DEDUCT_FLAG;


CREATE INDEX MV_PAY_001 ON BI_PAYROLL_VIEW(MONTH);
CREATE INDEX MV_PAY_002 ON BI_PAYROLL_VIEW(TO_CHAR(MONTH,'RRRR'));
CREATE INDEX MV_PAY_003 ON BI_PAYROLL_VIEW(BRANCH_ID);
CREATE INDEX MV_PAY_004 ON BI_PAYROLL_VIEW(EMPLOYEE_ID);
CREATE INDEX MV_PAY_005 ON BI_PAYROLL_VIEW(EMPLOYEE_CODE);


DROP MATERIALIZED VIEW BI_EMPLOYEES_VIEW;

CREATE MATERIALIZED VIEW BI_EMPLOYEES_VIEW
(
   BRANCH_ID,
   EMPLOYEE_ID,
   EMPLOYEE_TYPE,
   EMPLOYEE_TYPE_PRIMARY_NAME,
   EMPLOYEE_TYPE_SECONDARY_NAME,
   EMPLOYEE_CODE,
   EMPLOYEE_PRIMARY_NAME,
   EMPLOYEE_SECONDARY_NAME,
   EMP_DEPARTMENT_ID,
   EMP_DEPARTMENT_CODE,
   EMP_DEPARTMENT_PRIMARY_NAME,
   EMP_DEPARTMENT_SECONDARY_NAME,
   CITIZEN,
   EMP_JOB_ID,
   EMP_JOB_CODE,
   EMP_JOB_PRIMARY_NAME,
   EMP_JOB_SECONDARY_NAME,
   EMP_GRADES_ID,
   EMP_GRADES_USER_CODE,
   EMP_GRADES_PRIMARY_NAME,
   EMP_GRADES_SECONDARY_NAME,
   GENDER,
   GENDER_PRIMARY_NAME,
   GENDER_SECONDARY_NAME,
   NATIONALITY,
   NATIONALITY_PRIMARY_NAME,
   NATIONALITY_SECONDARY_NAME,
   SOCIAL_STATUS,
   SOCIAL_STATUS_PRIMARY_NAME,
   SOCIAL_STATUS_SECONDARY_NAME,
   TERMINATION_DATE,
   BIRTHDATE,
   EMP_STATUS,
   PASSPORT_NO,
   PASSPORT_ISSUE_DATE,
   PASSPORT_END_DATE,
   DRIVE_LICENSE_NO,
   DRIVE_LICENSE_ISSUE_DATE,
   DRIVE_LICENSE_END_DATE,
   RESIDENCE_NO,
   RESIDENCE_ISSUE_DATE,
   RESIDENCE_END_DATE,
   HEALTH_NO,
   HEALTH_ISSUE_DATE,
   HEALTH_END_DATE,
   INSURANCE_NO,
   INSURANCE_ISSUE_DATE,
   INSURANCE_END_DATE,
   EMP_NATIONAL_NO,
   EMP_NATIONAL_ISSUE_DATE,
   EMP_NATIONAL_END_DATE,
   EMP_CONTRACT,
   EMP_CONTRACT_ISSUE_DATE,
   EMP_CONTRACT_END_DATE,
   HEALTH_CERTIFICATE,
   HEALTH_CERTIFICATE_ISSUE_DATE,
   HEALTH_CERTIFICATE_END_DATE,
   VISA_CARD_NO,
   VISA_CARD_ISSUE_DATE,
   VISA_CARD_END_DATE,
   LOAN_NUMBER,
   LOAN_START_DATE,
   LOAN_END_DATE,
   HIREDATE,
   MOBILE
)
REFRESH COMPLETE ON DEMAND AS
  SELECT ALL
          EMPLOYEES.BRANCH_ID,
          EMPLOYEES.EMPLOYEE_ID,
          EMPLOYEES.EMPLOYEE_TYPE,
          EMPLOYEE_TYPES.PRIMARY_NAME EMPLOYEE_TYPE_PRIMARY_NAME,
          EMPLOYEE_TYPES.SECONDARY_NAME EMPLOYEE_TYPE_SECONDARY_NAME,
          EMPLOYEES.USER_CODE EMPLOYEE_CODE,
          EMPLOYEES.PRIMARY_NAME EMPLOYEE_PRIMARY_NAME,
          EMPLOYEES.SECONDARY_NAME EMPLOYEE_SECONDARY_NAME,
          EMPLOYEES.EMP_DEPARTMENT_ID,
          EMP_DEPARTMENT.USER_CODE EMP_DEPARTMENT_CODE,
          EMP_DEPARTMENT.PRIMARY_NAME EMP_DEPARTMENT_PRIMARY_NAME,
          EMP_DEPARTMENT.SECONDARY_NAME EMP_DEPARTMENT_SECONDARY_NAME,
          EMPLOYEES.CITIZEN,
          EMPLOYEES.EMP_JOB_ID,
          EMP_JOBS.USER_CODE EMP_JOBS_CODE,
          EMP_JOBS.PRIMARY_NAME EMP_JOBS_PRIMARY_NAME,
          EMP_JOBS.SECONDARY_NAME EMP_JOBS_SECONDARY_NAME,
          EMPLOYEES.EMP_GRADES_ID,
          EMP_GRADES.USER_CODE EMP_GRADES_USER_CODE,
          EMP_GRADES.PRIMARY_NAME EMP_GRADES_PRIMARY_NAME,
          EMP_GRADES.SECONDARY_NAME EMP_GRADES_SECONDARY_NAME,
          EMPLOYEES.GENDER,
          GENDERS.PRIMARY_NAME GENDER_PRIMARY_NAME,
          GENDERS.SECONDARY_NAME GENDER_SECONDARY_NAME,
          EMPLOYEES.NATIONALITY,
          NATIONALITIES.PRIMARY_NAME NATIONALITY_PRIMARY_NAME,
          NATIONALITIES.SECONDARY_NAME NATIONALITY_SECONDARY_NAME,
          EMPLOYEES.SOCIAL_STATUS,
          SOCIAL_STATUS.PRIMARY_NAME SOCIAL_STATUS_PRIMARY_NAME,
          SOCIAL_STATUS.SECONDARY_NAME SOCIAL_STATUS_SECONDARY_NAME,
          EMPLOYEES.TERMINATION_DATE,
          EMPLOYEES.BIRTHDATE,
          EMPLOYEES.EMP_STATUS,
          EMPLOYEES.PASSPORT_NO,
          EMPLOYEES.PASSPORT_ISSUE_DATE,
          EMPLOYEES.PASSPORT_END_DATE,
          EMPLOYEES.DRIVE_LICENSE_NO,
          EMPLOYEES.DRIVE_LICENSE_ISSUE_DATE,
          EMPLOYEES.DRIVE_LICENSE_END_DATE,
          EMPLOYEES.RESIDENCE_NO,
          EMPLOYEES.RESIDENCE_ISSUE_DATE,
          EMPLOYEES.RESIDENCE_END_DATE,
          EMPLOYEES.HEALTH_NO,
          EMPLOYEES.HEALTH_ISSUE_DATE,
          EMPLOYEES.HEALTH_END_DATE,
          EMPLOYEES.INSURANCE_NO,
          EMPLOYEES.INSURANCE_ISSUE_DATE,
          EMPLOYEES.INSURANCE_END_DATE,
          EMPLOYEES.EMP_NATIONAL_NO,
          EMPLOYEES.EMP_NATIONAL_ISSUE_DATE,
          EMPLOYEES.EMP_NATIONAL_END_DATE,
          EMPLOYEES.EMP_CONTRACT,
          EMPLOYEES.EMP_CONTRACT_ISSUE_DATE,
          EMPLOYEES.EMP_CONTRACT_END_DATE,
          EMPLOYEES.HEALTH_CERTIFICATE,
          EMPLOYEES.HEALTH_CERTIFICATE_ISSUE_DATE,
          EMPLOYEES.HEALTH_CERTIFICATE_END_DATE,
          EMPLOYEES.VISA_CARD_NO,
          EMPLOYEES.VISA_CARD_ISSUE_DATE,
          EMPLOYEES.VISA_CARD_END_DATE,
          EMPLOYEES.LOAN_NUMBER,
          EMPLOYEES.LOAN_START_DATE,
          EMPLOYEES.LOAN_END_DATE,
          EMPLOYEES.HIREDATE,
          NVL(EMPLOYEES.BUSINESS_MOBILE, EMPLOYEES.PERSONAL_PHONE) MOBILE
     FROM EMPLOYEES 
          LEFT JOIN CODES_SYS EMPLOYEE_TYPES ON (EMPLOYEES.EMPLOYEE_TYPE = EMPLOYEE_TYPES.CODES_SYS_ID AND EMPLOYEE_TYPES.CODE_TYPES_ID = 74)
          LEFT JOIN CODES_SYS GENDERS ON (EMPLOYEES.GENDER = GENDERS.CODES_SYS_ID AND GENDERS.CODE_TYPES_ID = 59)
          LEFT JOIN CODES NATIONALITIES ON (EMPLOYEES.NATIONALITY = NATIONALITIES.CODES_ID)
          LEFT JOIN EMP_GRADES ON (EMP_GRADES.EMP_GRADES_ID = EMPLOYEES.EMP_GRADES_ID )
          LEFT JOIN CODES SOCIAL_STATUS ON (EMPLOYEES.SOCIAL_STATUS = SOCIAL_STATUS.CODES_ID),
          EMP_DEPARTMENT,
          EMP_JOBS          
    WHERE EMPLOYEES.EMP_DEPARTMENT_ID = EMP_DEPARTMENT.EMP_DEPARTMENT_ID
    AND EMPLOYEES.EMP_JOB_ID = EMP_JOBS.EMP_JOB_ID;


CREATE INDEX MV_EMP_001 ON BI_EMPLOYEES_VIEW(BRANCH_ID);
CREATE INDEX MV_EMP_002 ON BI_EMPLOYEES_VIEW(EMPLOYEE_ID);
CREATE INDEX MV_EMP_003 ON BI_EMPLOYEES_VIEW(EMPLOYEE_CODE);
CREATE INDEX MV_EMP_004 ON BI_EMPLOYEES_VIEW(EMPLOYEE_TYPE);
CREATE INDEX MV_EMP_005 ON BI_EMPLOYEES_VIEW(EMP_DEPARTMENT_CODE);
CREATE INDEX MV_EMP_006 ON BI_EMPLOYEES_VIEW(EMP_JOB_CODE);
CREATE INDEX MV_EMP_007 ON BI_EMPLOYEES_VIEW(EMP_STATUS);


CREATE OR REPLACE FUNCTION DECR (INPUT_STR IN VARCHAR2)RETURN VARCHAR2 IS
 CRNT_CHR   VARCHAR2(2) ;                             -- CONCURRENT CHARACTER .
 REVRS_STR  VARCHAR2(2000);
 TEMPSTR    VARCHAR2(2000) := NULL;
 OUTPUT_STR VARCHAR2(2000);
 EN_KEY     NUMBER(1) := 1;
 RSLT       VARCHAR2(2000);
 INPUT      VARCHAR2(2000);
BEGIN
  INPUT := INPUT_STR;

 IF INPUT_STR IS NULL THEN
   RETURN(NULL);
 END IF;

 TEMPSTR := NULL;
 REVRS_STR := NULL;

   FOR I IN  1..LENGTH(INPUT_STR)
  LOOP
    CRNT_CHR := SUBSTR(INPUT_STR,I,1);
   TEMPSTR := TEMPSTR||CHR((ASCII(CRNT_CHR))-I);
  END LOOP;

 FOR I IN REVERSE 1..LENGTH(TEMPSTR)
 LOOP
  CRNT_CHR := SUBSTR(TEMPSTR,I,1);
  IF ASCII(CRNT_CHR) = 32 THEN CRNT_CHR := '}{'; END IF;
  REVRS_STR := REVRS_STR||CRNT_CHR;
  END LOOP;

   FOR I IN  1..LENGTH(REVRS_STR)
  LOOP
    CRNT_CHR := SUBSTR(REVRS_STR,I,1);
    IF CRNT_CHR = '{' THEN
      IF  SUBSTR(REVRS_STR,I+1,1) = '}' THEN CRNT_CHR := NULL;
      END IF;
    END IF;

    IF CRNT_CHR = '}' THEN
      IF  SUBSTR(REVRS_STR,I-1,1) = '{' THEN CRNT_CHR := ' ';
      END IF;
    END IF;

   RSLT := RSLT||CRNT_CHR;
  END LOOP;

    RSLT := SUBSTR(RSLT,1,LENGTH(RSLT));
 RETURN(RSLT);
END;
/



CREATE OR REPLACE FUNCTION AUTHENTICATE_USER
  (p_username in varchar2,
   p_password in varchar2)
return boolean
is
CURSOR C1 IS
	SELECT COUNT(1)
	FROM USERS
	WHERE UPPER(USER_NAME) = UPPER(p_username);
V_COUNT NUMBER;

CURSOR C2 IS
	SELECT USER_PASSWORD, USER_PASSWORD_EXPIRY_DATE, ACTIVE, JOB_ID
	FROM USERS
	WHERE UPPER(USER_NAME) = UPPER(p_username);
V_C2 C2%ROWTYPE;
begin
  v_count := 0;

  OPEN C1;
  FETCH C1 INTO V_COUNT;
  CLOSE C1;
  IF V_COUNT <> 1 THEN
        apex_error.add_error(
            p_message          =>  'Invalid user name',
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

  END IF;


  OPEN C2;
  FETCH C2 INTO V_C2;
  CLOSE C2;

  IF UPPER(p_password) <> UPPER(DECR(V_C2.USER_PASSWORD)) THEN
        apex_error.add_error(
            p_message          => 'Invalid Password',
            p_additional_info  => null,
            p_display_location => apex_error.c_inline_in_notification
        );

  END IF;

 return(true);
end;
/




  CREATE TABLE "NAMES_ENGLISH_ARABIC" 
   (	"NAME_ID" NUMBER, 
	"PRIMARY_NAME" VARCHAR2(100), 
	"SECONDARY_NAME" VARCHAR2(100), 
	 PRIMARY KEY ("NAME_ID")
  USING INDEX  ENABLE
   ) ;




  CREATE TABLE "JOURNALS_ENTRIES_BALANCE_G" 
   (	"BASE_DOCUMENT_TYPES_ID" NUMBER(15,0), 
	"DOCUMENT_DATE" DATE NOT NULL ENABLE, 
	"JOURNAL_TYPES_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"BRANCH_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"ACCOUNT_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"CURRENCIES_ID" NUMBER(15,0) NOT NULL ENABLE, 
	"EXCHANGE_RATE" NUMBER(17,5) NOT NULL ENABLE, 
	"CR_DEBIT" NUMBER(17,5) NOT NULL ENABLE, 
	"CR_CREDIT" NUMBER(17,5) NOT NULL ENABLE, 
	"COST_CENTER_ID" NUMBER(15,0), 
	"ACTIVITY_ID" NUMBER(15,0), 
	"CONFIRMED" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"CANCELED" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"SETL_FOR" NUMBER(15,0), 
	"SETL_REF" NUMBER(15,0), 
	"DOCUMENT_MONTH" VARCHAR2(25), 
	"DOCUMENT_YEAR" VARCHAR2(25)
   ) ;

  CREATE INDEX "ACT_JOUR_ENT_BALG_IDX1" ON "JOURNALS_ENTRIES_BALANCE_G" ("ACTIVITY_ID") 
  ;

  CREATE INDEX "JECB_IDX_01" ON "JOURNALS_ENTRIES_BALANCE_G" ("ACCOUNT_ID") 
  ;

  CREATE INDEX "JECB_IDX_02" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_DATE") 
  ;

  CREATE INDEX "JECB_IDX_03" ON "JOURNALS_ENTRIES_BALANCE_G" ("JOURNAL_TYPES_ID") 
  ;

  CREATE INDEX "JECB_IDX_04" ON "JOURNALS_ENTRIES_BALANCE_G" ("COST_CENTER_ID") 
  ;

  CREATE UNIQUE INDEX "JECB_MAIN_IDX_01" ON "JOURNALS_ENTRIES_BALANCE_G" ("BASE_DOCUMENT_TYPES_ID", "DOCUMENT_DATE", "JOURNAL_TYPES_ID", "BRANCH_ID", "ACCOUNT_ID", "CURRENCIES_ID", "EXCHANGE_RATE", "COST_CENTER_ID", "ACTIVITY_ID", "CONFIRMED", "CANCELED", "SETL_FOR", "SETL_REF", "DOCUMENT_MONTH", "DOCUMENT_YEAR") 
  ;

  CREATE INDEX "SETL_REF_JECG_IDX1" ON "JOURNALS_ENTRIES_BALANCE_G" ("SETL_REF") 
  ;


  CREATE INDEX "ACT_JOUR_ENT_BAL_IDX1" ON "JOURNALS_ENTRIES_BALANCE" ("ACTIVITY_ID") 
  ;

  CREATE INDEX "JEB_MONTH01" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_MONTH") 
  ;

  CREATE INDEX "JEB_YEAR01" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_YEAR") 
  ;

  CREATE INDEX "JEC_IDX_01" ON "JOURNALS_ENTRIES_BALANCE" ("ACCOUNT_ID") 
  ;

  CREATE INDEX "JEC_IDX_02" ON "JOURNALS_ENTRIES_BALANCE" ("DOCUMENT_DATE") 
  ;

  CREATE INDEX "JEC_IDX_03" ON "JOURNALS_ENTRIES_BALANCE" ("JOURNAL_TYPES_ID") 
  ;

  CREATE INDEX "JEC_IDX_04" ON "JOURNALS_ENTRIES_BALANCE" ("COST_CENTER_ID") 
  ;

  CREATE INDEX "SETL_REF_IDX1" ON "JOURNALS_ENTRIES_BALANCE" ("SETL_REF") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "JOURNALS_ENTRIES_BALANCE_TRI" 
AFTER INSERT OR UPDATE OR DELETE ON JOURNALS_ENTRIES_BALANCE
FOR EACH ROW
DECLARE
V_JOURNAL_TYPES_ID NUMBER;
V_SETL_FOR NUMBER;
V_SETL_REF NUMBER;
V_COUNT NUMBER;
BEGIN
    IF INSERTING THEN
        
        V_COUNT := 0;
        
        SELECT COUNT(*)
        INTO V_COUNT
        FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :NEW.BRANCH_ID              
        AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
        AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :NEW.CONFIRMED              
        AND     CANCELED = :NEW.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
                
        
        IF V_COUNT = 0 THEN
            INSERT INTO JOURNALS_ENTRIES_BALANCE_G
                (
                BASE_DOCUMENT_TYPES_ID,  
                DOCUMENT_DATE         ,  
                JOURNAL_TYPES_ID      , 
                BRANCH_ID             ,  
                ACCOUNT_ID            ,  
                CURRENCIES_ID         ,  
                EXCHANGE_RATE         ,  
                CR_DEBIT              ,  
                CR_CREDIT             ,  
                COST_CENTER_ID        ,  
                ACTIVITY_ID           , 
                CONFIRMED             ,
                CANCELED              ,
                SETL_FOR              , 
                SETL_REF              ,
                DOCUMENT_MONTH        ,
                DOCUMENT_YEAR        
                )
            VALUES                    
                (
                :NEW.BASE_DOCUMENT_TYPES_ID,  
                :NEW.DOCUMENT_DATE         ,  
                :NEW.JOURNAL_TYPES_ID      , 
                :NEW.BRANCH_ID             ,  
                :NEW.ACCOUNT_ID            ,  
                :NEW.CURRENCIES_ID         ,  
                :NEW.EXCHANGE_RATE         ,  
                :NEW.CR_DEBIT              ,  
                :NEW.CR_CREDIT             ,  
                :NEW.COST_CENTER_ID        ,  
                :NEW.ACTIVITY_ID           , 
                :NEW.CONFIRMED             ,
                :NEW.CANCELED              ,
                :NEW.SETL_FOR              , 
                :NEW.SETL_REF              ,
                :NEW.DOCUMENT_MONTH        ,
                :NEW.DOCUMENT_YEAR        
                );
        ELSE
            UPDATE JOURNALS_ENTRIES_BALANCE_G
            SET     CR_DEBIT = NVL(CR_DEBIT,0) + NVL(:NEW.CR_DEBIT,0),
                    CR_CREDIT = NVL(CR_CREDIT,0) + NVL(:NEW.CR_CREDIT,0)
            WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
            AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
            AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
            AND     BRANCH_ID = :NEW.BRANCH_ID              
            AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
            AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
            AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
            AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
            AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
            AND     CONFIRMED = :NEW.CONFIRMED              
            AND     CANCELED = :NEW.CANCELED               
            AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
            AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
            AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
            AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
        END IF;


    ELSIF UPDATING THEN
        UPDATE JOURNALS_ENTRIES_BALANCE_G
        SET     CR_DEBIT = NVL(CR_DEBIT,0) - NVL(:OLD.CR_DEBIT,0),
                CR_CREDIT = NVL(CR_CREDIT,0) - NVL(:OLD.CR_CREDIT,0)
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10);

        DELETE FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10)
        AND     CR_DEBIT = 0
        AND     CR_CREDIT = 0;

        
        V_COUNT := 0;
        
        SELECT COUNT(*)
        INTO V_COUNT
        FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :NEW.BRANCH_ID              
        AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
        AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :NEW.CONFIRMED              
        AND     CANCELED = :NEW.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
                
        
        IF V_COUNT = 0 THEN
            INSERT INTO JOURNALS_ENTRIES_BALANCE_G
                (
                BASE_DOCUMENT_TYPES_ID,  
                DOCUMENT_DATE         ,  
                JOURNAL_TYPES_ID      , 
                BRANCH_ID             ,  
                ACCOUNT_ID            ,  
                CURRENCIES_ID         ,  
                EXCHANGE_RATE         ,  
                CR_DEBIT              ,  
                CR_CREDIT             ,  
                COST_CENTER_ID        ,  
                ACTIVITY_ID           , 
                CONFIRMED             ,
                CANCELED              ,
                SETL_FOR              , 
                SETL_REF              ,
                DOCUMENT_MONTH        ,
                DOCUMENT_YEAR        
                )
            VALUES                    
                (
                :NEW.BASE_DOCUMENT_TYPES_ID,  
                :NEW.DOCUMENT_DATE         ,  
                :NEW.JOURNAL_TYPES_ID      , 
                :NEW.BRANCH_ID             ,  
                :NEW.ACCOUNT_ID            ,  
                :NEW.CURRENCIES_ID         ,  
                :NEW.EXCHANGE_RATE         ,  
                :NEW.CR_DEBIT              ,  
                :NEW.CR_CREDIT             ,  
                :NEW.COST_CENTER_ID        ,  
                :NEW.ACTIVITY_ID           , 
                :NEW.CONFIRMED             ,
                :NEW.CANCELED              ,
                :NEW.SETL_FOR              , 
                :NEW.SETL_REF              ,
                :NEW.DOCUMENT_MONTH        ,
                :NEW.DOCUMENT_YEAR        
                );
        ELSE
            UPDATE JOURNALS_ENTRIES_BALANCE_G
            SET     CR_DEBIT = NVL(CR_DEBIT,0) + NVL(:NEW.CR_DEBIT,0),
                    CR_CREDIT = NVL(CR_CREDIT,0) + NVL(:NEW.CR_CREDIT,0)
            WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:NEW.BASE_DOCUMENT_TYPES_ID, -10) 
            AND     DOCUMENT_DATE  = :NEW.DOCUMENT_DATE          
            AND     JOURNAL_TYPES_ID = :NEW.JOURNAL_TYPES_ID       
            AND     BRANCH_ID = :NEW.BRANCH_ID              
            AND     ACCOUNT_ID = :NEW.ACCOUNT_ID             
            AND     CURRENCIES_ID = :NEW.CURRENCIES_ID          
            AND     EXCHANGE_RATE = :NEW.EXCHANGE_RATE          
            AND     NVL(COST_CENTER_ID, -10) = NVL(:NEW.COST_CENTER_ID, -10)         
            AND     NVL(ACTIVITY_ID, -10) = NVL(:NEW.ACTIVITY_ID, -10)            
            AND     CONFIRMED = :NEW.CONFIRMED              
            AND     CANCELED = :NEW.CANCELED               
            AND     NVL(SETL_FOR, -10) = NVL(:NEW.SETL_FOR, -10)               
            AND     NVL(SETL_REF, -10) = NVL(:NEW.SETL_REF, -10)                       
            AND     NVL(DOCUMENT_MONTH, -10) = NVL(:NEW.DOCUMENT_MONTH, -10)                 
            AND     NVL(DOCUMENT_YEAR, -10) = NVL(:NEW.DOCUMENT_YEAR, -10);
        END IF;
        
        
    ELSIF DELETING THEN
        UPDATE JOURNALS_ENTRIES_BALANCE_G
        SET     CR_DEBIT = NVL(CR_DEBIT,0) - NVL(:OLD.CR_DEBIT,0),
                CR_CREDIT = NVL(CR_CREDIT,0) - NVL(:OLD.CR_CREDIT,0)
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10);
        
        DELETE FROM JOURNALS_ENTRIES_BALANCE_G
        WHERE   NVL(BASE_DOCUMENT_TYPES_ID, -10)  = NVL(:OLD.BASE_DOCUMENT_TYPES_ID, -10) 
        AND     DOCUMENT_DATE  = :OLD.DOCUMENT_DATE          
        AND     JOURNAL_TYPES_ID = :OLD.JOURNAL_TYPES_ID       
        AND     BRANCH_ID = :OLD.BRANCH_ID              
        AND     ACCOUNT_ID = :OLD.ACCOUNT_ID             
        AND     CURRENCIES_ID = :OLD.CURRENCIES_ID          
        AND     EXCHANGE_RATE = :OLD.EXCHANGE_RATE          
        AND     NVL(COST_CENTER_ID, -10) = NVL(:OLD.COST_CENTER_ID, -10)         
        AND     NVL(ACTIVITY_ID, -10) = NVL(:OLD.ACTIVITY_ID, -10)            
        AND     CONFIRMED = :OLD.CONFIRMED              
        AND     CANCELED = :OLD.CANCELED               
        AND     NVL(SETL_FOR, -10) = NVL(:OLD.SETL_FOR, -10)               
        AND     NVL(SETL_REF, -10) = NVL(:OLD.SETL_REF, -10)                       
        AND     NVL(DOCUMENT_MONTH, -10) = NVL(:OLD.DOCUMENT_MONTH, -10)                 
        AND     NVL(DOCUMENT_YEAR, -10) = NVL(:OLD.DOCUMENT_YEAR, -10)
        AND     CR_DEBIT = 0
        AND     CR_CREDIT = 0;
        
  END IF;
END;
/

CREATE INDEX "JEBG_MONTH05" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_MONTH"); 
 
CREATE INDEX "JEBG_YEAR05" ON "JOURNALS_ENTRIES_BALANCE_G" ("DOCUMENT_YEAR"); 

<<<<<<< HEAD
-- comment 1
=======
--- Sameh
--kafrawy

-- ahlam
>>>>>>> 3469c90788073bd02e714234068742cd86344c19
--- farid
---- ahmed 